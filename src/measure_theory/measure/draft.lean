/-
Copyright (c) 2023 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne
-/
import measure_theory.measure.measure_space_def

/-!
# Draft

## Main definitions

* `foo_bar`

## Main statements

* `foo_bar_unique`

## Notation



## Implementation details



## References

* [F. Bar, *Quuxes*][bibkey]

## Tags

Foobars, barfoos
-/

open filter

open_locale ennreal topology big_operators

namespace measure_theory

namespace measure

variables {Œ± : Type*} [measurable_space Œ±]

lemma measurable_set.accumulate {s : ‚Ñï ‚Üí set Œ±} (hs : ‚àÄ n, measurable_set (s n)) (n : ‚Ñï) :
  measurable_set (set.accumulate s n) :=
measurable_set.bUnion (set.to_countable _) (Œª n _, hs n)

lemma ennreal.tendsto_at_top_zero_const_sub_iff (f : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû) (a : ‚Ñù‚â•0‚àû) (ha : a ‚â† ‚àû)
  (hfa : ‚àÄ n, f n ‚â§ a) :
  tendsto (Œª n, a - f n) at_top (ùìù 0) ‚Üî tendsto (Œª n, f n) at_top (ùìù a) :=
begin
  rw [ennreal.tendsto_at_top_zero, ennreal.tendsto_at_top ha],
  swap, { apply_instance, },
  refine ‚ü®Œª h Œµ hŒµ, _, Œª h Œµ hŒµ, _‚ü©; obtain ‚ü®N, hN‚ü© := h Œµ hŒµ,
  { refine ‚ü®N, Œª n hn, ‚ü®_, (hfa n).trans (le_add_right le_rfl)‚ü©‚ü©,
    specialize hN n hn,
    rw tsub_le_iff_right at hN ‚ä¢,
    rwa add_comm, },
  { refine ‚ü®N, Œª n hn, _‚ü©,
    have hN_left := (hN n hn).1,
    rw tsub_le_iff_right at hN_left ‚ä¢,
    rwa add_comm, },
end

lemma set.accumulate_subset_Union (s : ‚Ñï ‚Üí set Œ±) (n : ‚Ñï) :
  set.accumulate s n ‚äÜ ‚ãÉ i, s i :=
by { simp_rw [set.accumulate_def, set.Union_subset_iff], exact Œª i _, set.subset_Union s i, }

/-- todo: this has to be somewhere -/
lemma set.bUnion_le_succ (s : ‚Ñï ‚Üí set Œ±) (n : ‚Ñï) :
  (‚ãÉ i ‚â§ n.succ, s i) = (‚ãÉ i ‚â§ n, s i) ‚à™ s n.succ :=
begin
  ext1 x,
  simp only [set.mem_Union, exists_prop, set.mem_union],
  refine ‚ü®Œª h, _, Œª h, _‚ü©,
  { obtain ‚ü®i, hi_le, hxi‚ü© := h,
    cases hi_le with hi_eq hi_le,
    { exact or.inr hxi, },
    { exact or.inl ‚ü®i, hi_le, hxi‚ü©, }, },
  { cases h with h h,
    { obtain ‚ü®i, hi_le, hxi‚ü© := h,
      exact ‚ü®i, hi_le.trans (nat.lt_succ_self _).le, hxi‚ü©, },
    { exact ‚ü®n.succ, le_rfl, h‚ü©, }, },
end

lemma set.disjoint_accumulate {s : ‚Ñï ‚Üí set Œ±} (hs : pairwise (disjoint on s)) {i j : ‚Ñï}
  (hij : i < j) :
  disjoint (set.accumulate s i) (s j) :=
begin
  rw set.accumulate_def,
  induction i with i hi,
  { simp only [le_zero_iff, set.Union_Union_eq_left],
    exact hs hij.ne, },
  { rw set.bUnion_le_succ s i,
    refine disjoint.union_left _ _,
    { exact hi ((nat.lt_succ_self i).trans hij), },
    { exact hs hij.ne, }, },
end

lemma countably_additive_of_todo (m : Œ† (s : set Œ±), measurable_set s ‚Üí ‚Ñù‚â•0‚àû)
  (hm_ne_top : ‚àÄ s (hs : measurable_set s), m s hs ‚â† ‚àû)
  (hm_add : ‚àÄ (s t : set Œ±) (hs : measurable_set s) (ht : measurable_set t),
    disjoint s t ‚Üí m (s ‚à™ t) (hs.union ht) = m s hs + m t ht)
  (hm : ‚àÄ (s : ‚Ñï ‚Üí set Œ±) (hs : ‚àÄ n, measurable_set (s n)),
    antitone s ‚Üí (‚ãÇ n, s n) = ‚àÖ ‚Üí tendsto (Œª n, m (s n) (hs n)) at_top (ùìù 0))
  ‚¶Éf : ‚Ñï ‚Üí set Œ±‚¶Ñ (h : ‚àÄ i, measurable_set (f i)) (h_disj : pairwise (disjoint on f)) :
    m (‚ãÉ i, f i) (measurable_set.Union h) = ‚àë' i, m (f i) (h i) :=
begin
  have h_meas_Union : measurable_set (‚ãÉ i, f i) := measurable_set.Union h,
  have hm_diff : ‚àÄ s t (hs : measurable_set s) (ht : measurable_set t),
    t ‚äÜ s ‚Üí m (s \ t) (hs.diff ht) = m s hs - m t ht,
  { intros s t hs ht hst,
    have h_union := hm_add t (s \ t) ht (hs.diff ht) disjoint_sdiff_self_right,
    simp_rw [set.union_diff_self, set.union_eq_right_iff_subset.mpr hst] at h_union,
    rw [h_union, ennreal.add_sub_cancel_left (hm_ne_top t ht)], },
  have hm_mono : ‚àÄ s t (hs : measurable_set s) (ht : measurable_set t),
    t ‚äÜ s ‚Üí m t ht ‚â§ m s hs,
  { intros s t hs ht hst,
    have h_union := hm_add t (s \ t) ht (hs.diff ht) disjoint_sdiff_self_right,
    simp_rw [set.union_diff_self, set.union_eq_right_iff_subset.mpr hst] at h_union,
    rw h_union,
    exact le_add_right le_rfl, },
  have hm_acc : ‚àÄ (s : ‚Ñï ‚Üí set Œ±) (h_disj : pairwise (disjoint on s))
    (h_meas : ‚àÄ i, measurable_set (s i)) (n : ‚Ñï),
    m (set.accumulate s n) (measurable_set.accumulate h_meas n)
      = ‚àë i in finset.range (n + 1), m (s i) (h_meas i),
  { intros s hs_disj hs_meas n,
    simp_rw set.accumulate_def,
    induction n with n hn,
    { simp only [le_zero_iff, set.Union_Union_eq_left, finset.range_one, finset.sum_singleton], },
    rw [finset.sum_range_succ, ‚Üê hn],
    simp_rw [set.bUnion_le_succ],
    rw hm_add,
    exact set.disjoint_accumulate hs_disj (nat.lt_succ_self n), },
  let s : ‚Ñï ‚Üí set Œ± := Œª n, (‚ãÉ i, f i) \ (set.accumulate f n),
  have hf_meas_acc : ‚àÄ n, measurable_set (set.accumulate f n) := measurable_set.accumulate h,
  have hs_meas : ‚àÄ n, measurable_set (s n) := Œª n, h_meas_Union.diff (hf_meas_acc n),
  have hs_anti : antitone s,
  { intros i j hij x hxj,
    rw set.mem_diff at hxj ‚ä¢,
    exact ‚ü®hxj.1, Œª hxi, hxj.2 (set.monotone_accumulate hij hxi)‚ü©, },
  have hs_Inter : (‚ãÇ n, s n) = ‚àÖ,
  { simp_rw [s, set.diff_eq],
    rw [set.Inter_inter_distrib, set.Inter_const, ‚Üê set.compl_Union, set.Union_accumulate],
    exact set.inter_compl_self _, },
  have h_tendsto : tendsto (Œª n, m (s n) (hs_meas n)) at_top (ùìù 0) :=
    hm s hs_meas hs_anti hs_Inter,
  have hmsn : ‚àÄ n, m (s n) (hs_meas n)
    = m (‚ãÉ i, f i) h_meas_Union - ‚àë i in finset.range (n + 1), m (f i) (h i),
  { intro n,
    simp_rw s,
    rw hm_diff _ _ h_meas_Union (hf_meas_acc n),
    { congr,
      exact hm_acc _ h_disj _ n, },
    { exact set.accumulate_subset_Union _ _, }, },
  simp_rw hmsn at h_tendsto,
  have h_tendsto' : tendsto (Œª n, ‚àë i in finset.range n, m (f i) (h i)) at_top
    (ùìù (m (‚ãÉ i, f i) h_meas_Union)),
  { refine (filter.tendsto_add_at_top_iff_nat 1).mp _,
    rwa ennreal.tendsto_at_top_zero_const_sub_iff _ _ (hm_ne_top _ _) at h_tendsto,
    intros n,
    rw ‚Üê hm_acc _ h_disj,
    exact hm_mono _ _ _ _ (set.accumulate_subset_Union _ _), },
  exact tendsto_nhds_unique h_tendsto' (ennreal.tendsto_nat_tsum (Œª i, m (f i) (h i))),
end

/-- todo name. Or don't define this, use of_measurable directly -/
noncomputable def of_measurable' (m : Œ† (s : set Œ±), measurable_set s ‚Üí ‚Ñù‚â•0‚àû)
  (m0 : m ‚àÖ measurable_set.empty = 0)
  (hm_ne_top : ‚àÄ s (hs : measurable_set s), m s hs ‚â† ‚àû)
  (hm_add : ‚àÄ (s t : set Œ±) (hs : measurable_set s) (ht : measurable_set t),
    disjoint s t ‚Üí m (s ‚à™ t) (hs.union ht) = m s hs + m t ht)
  (hm : ‚àÄ (s : ‚Ñï ‚Üí set Œ±) (hs : ‚àÄ n, measurable_set (s n)),
    antitone s ‚Üí (‚ãÇ n, s n) = ‚àÖ ‚Üí tendsto (Œª n, m (s n) (hs n)) at_top (ùìù 0)) :
  measure Œ± :=
of_measurable m m0 (countably_additive_of_todo m hm_ne_top hm_add hm)

end measure

end measure_theory
