/-
Copyright (c) 2022 Jujian Zhang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jujian Zhang
-/
import algebra.category.Module.basic
import ring_theory.tensor_product

/-!
# Change Of Rings

## Main definitions

* `category_theory.Module.restrict_scalars`: given rings `R, S` and a ring homomorphism `R ‚ü∂ S`,
  then `restrict_scalars : Module S ‚•§ Module R` is defined by `M ‚Ü¶ M` where `M : S-module` is seen
  as `R-module` by `r ‚Ä¢ m := f r ‚Ä¢ m` and `S`-linear map `l : M ‚ü∂ M'` is `R`-linear as well.

* `category_theory.Module.extend_scalars`: given **commutative** rings `R, S` and ring homomorphism
  `f : R ‚ü∂ S`, then `extend_scalars : Module R ‚•§ Module S` is defined by `M ‚Ü¶ S ‚®Ç M` where the
  module structure is defined by `s ‚Ä¢ (s' ‚äó m) := (s * s') ‚äó m` and `R`-linear map `l : M ‚ü∂ M'`
  is sent to `S`-linear map `s ‚äó m ‚Ü¶ s ‚äó l m : S ‚®Ç M ‚ü∂ S ‚®Ç M'`.

* `category_theory.Module.coextend_scalars`: given rings `R, S` and a ring homomorphism `R ‚ü∂ S`
  then `coextend_scalars : Module R ‚•§ Module S` is defined by `M ‚Ü¶ (S ‚Üí‚Çó[R] M)` where `S` is seen as
  `R-module` by restriction of scalars and `l ‚Ü¶ l ‚àò _`.

## Main results

* `category_theory.Module.extend_restrict_scalars_adj`: given commutative rings `R, S` and a ring
  homomorphism `f : R ‚Üí+* S`, the extension and restriction of scalars by `f` are adjoint functors.
* `category_theory.Module.restrict_coextend_scalars_adj`: given rings `R, S` and a ring homomorphism
  `f : R ‚ü∂ S` then `coextend_scalars f` is the right adjoint of `restrict_scalars f`.

## List of notations
Let `R, S` be rings and `f : R ‚Üí+* S`
* if `M` is an `R`-module, `s : S` and `m : M`, then `s ‚äó‚Çú[R, f] m` is the pure tensor
  `s ‚äó m : S ‚äó[R, f] M`.
-/


namespace category_theory.Module

universes v u‚ÇÅ u‚ÇÇ

namespace restrict_scalars

variables {R : Type u‚ÇÅ} {S : Type u‚ÇÇ} [ring R] [ring S] (f : R ‚Üí+* S)
variable (M : Module.{v} S)

/-- Any `S`-module M is also an `R`-module via a ring homomorphism `f : R ‚ü∂ S` by defining
    `r ‚Ä¢ m := f r ‚Ä¢ m` (`module.comp_hom`). This is called restriction of scalars. -/
def obj' : Module R :=
{ carrier := M,
  is_module := module.comp_hom M f }

/--
Given an `S`-linear map `g : M ‚Üí M'` between `S`-modules, `g` is also `R`-linear between `M` and
`M'` by means of restriction of scalars.
-/
def map' {M M' : Module.{v} S} (g : M ‚ü∂ M') :
  obj' f M ‚ü∂ obj' f M' :=
{ map_smul' := Œª r, g.map_smul (f r), ..g }

end restrict_scalars

/--
The restriction of scalars operation is functorial. For any `f : R ‚Üí+* S` a ring homomorphism,
* an `S`-module `M` can be considered as `R`-module by `r ‚Ä¢ m = f r ‚Ä¢ m`
* an `S`-linear map is also `R`-linear
-/
def restrict_scalars {R : Type u‚ÇÅ} {S : Type u‚ÇÇ} [ring R] [ring S] (f : R ‚Üí+* S) :
  Module.{v} S ‚•§ Module.{v} R :=
{ obj := restrict_scalars.obj' f,
  map := Œª _ _, restrict_scalars.map' f,
  map_id' := Œª _, linear_map.ext $ Œª m, rfl,
  map_comp' := Œª _ _ _ g h, linear_map.ext $ Œª m, rfl }

instance {R : Type u‚ÇÅ} {S : Type u‚ÇÇ} [comm_ring R] [comm_ring S] (f : R ‚Üí+* S) :
  category_theory.faithful (restrict_scalars.{v} f) :=
{ map_injective' := Œª _ _ _ _ h, linear_map.ext $ Œª x, by simpa only using fun_like.congr_fun h x }

@[simp] lemma restrict_scalars.map_apply {R : Type u‚ÇÅ} {S : Type u‚ÇÇ} [ring R] [ring S] (f : R ‚Üí+* S)
  {M M' : Module.{v} S} (g : M ‚ü∂ M') (x) : (restrict_scalars f).map g x = g x := rfl

@[simp] lemma restrict_scalars.smul_def {R : Type u‚ÇÅ} {S : Type u‚ÇÇ} [ring R] [ring S] (f : R ‚Üí+* S)
  {M : Module.{v} S} (r : R) (m : (restrict_scalars f).obj M) : r ‚Ä¢ m = (f r ‚Ä¢ m : M) := rfl

lemma restrict_scalars.smul_def' {R : Type u‚ÇÅ} {S : Type u‚ÇÇ} [ring R] [ring S] (f : R ‚Üí+* S)
  {M : Module.{v} S} (r : R) (m : M) : (r ‚Ä¢ m : (restrict_scalars f).obj M) = (f r ‚Ä¢ m : M) := rfl

@[priority 100]
instance smul_comm_class_mk {R : Type u‚ÇÅ} {S : Type u‚ÇÇ} [ring R] [comm_ring S] (f : R ‚Üí+* S)
  (M : Type v) [add_comm_group M] [module S M] :
  @smul_comm_class R S M ((restrict_scalars.obj' f (Module.mk M)).is_module.to_has_smul) _ :=
{ smul_comm := Œª r s m, (by simp [‚Üêmul_smul, mul_comm] : f r ‚Ä¢ s ‚Ä¢ m = s ‚Ä¢ f r ‚Ä¢ m) }

namespace extend_scalars

open tensor_product

variables {R : Type u‚ÇÅ} {S : Type u‚ÇÇ} [comm_ring R] [comm_ring S] (f : R ‚Üí+* S)

section unbundled

variables (M : Type v) [add_comm_monoid M] [module R M]
-- This notation is necessary because we need to reason about `s ‚äó‚Çú m` where `s : S` and `m : M`;
-- without this notation, one need to work with `s : (restrict_scalars f).obj ‚ü®S‚ü©`.
localized "notation s `‚äó‚Çú[` R `,` f `]` m := @tensor_product.tmul R _ _ _ _ _
  (module.comp_hom _ f) _ s m" in change_of_rings

end unbundled

open_locale change_of_rings

variables (M : Module.{v} R)

/--
Extension of scalars turn an `R`-module into `S`-module by M ‚Ü¶ S ‚®Ç M
-/
def obj' : Module S :=
‚ü®tensor_product R ((restrict_scalars f).obj ‚ü®S‚ü©) M‚ü©

/--
Extension of scalars is a functor where an `R`-module `M` is sent to `S ‚äó M` and
`l : M1 ‚ü∂ M2` is sent to `s ‚äó m ‚Ü¶ s ‚äó l m`
-/
def map' {M1 M2 : Module.{v} R} (l : M1 ‚ü∂ M2) : (obj' f M1) ‚ü∂ (obj' f M2) :=
-- The "by apply" part makes this require 75% fewer heartbeats to process (#16371).
by apply (@linear_map.base_change R S M1 M2 _ _ ((algebra_map S _).comp f).to_algebra _ _ _ _ l)

lemma map'_id {M : Module.{v} R} : map' f (ùüô M) = ùüô _ :=
linear_map.ext $ Œª (x : obj' f M),
begin
  dsimp only [map', Module.id_apply],
  induction x using tensor_product.induction_on with _ _ m s ihx ihy,
  { simp only [map_zero], },
  { rw [linear_map.base_change_tmul, Module.id_apply], },
  { rw [map_add, ihx, ihy] },
end

lemma map'_comp {M‚ÇÅ M‚ÇÇ M‚ÇÉ : Module.{v} R} (l‚ÇÅ‚ÇÇ : M‚ÇÅ ‚ü∂ M‚ÇÇ) (l‚ÇÇ‚ÇÉ : M‚ÇÇ ‚ü∂ M‚ÇÉ) :
  map' f (l‚ÇÅ‚ÇÇ ‚â´ l‚ÇÇ‚ÇÉ) = map' f l‚ÇÅ‚ÇÇ ‚â´ map' f l‚ÇÇ‚ÇÉ :=
linear_map.ext $ Œª (x : obj' f M‚ÇÅ),
begin
  dsimp only [map'],
  induction x using tensor_product.induction_on with _ _ x y ihx ihy,
  { refl, },
  { refl, },
  { simp only [map_add, ihx, ihy], },
end

end extend_scalars

/--
Extension of scalars is a functor where an `R`-module `M` is sent to `S ‚äó M` and
`l : M1 ‚ü∂ M2` is sent to `s ‚äó m ‚Ü¶ s ‚äó l m`
-/
def extend_scalars {R : Type u‚ÇÅ} {S : Type u‚ÇÇ} [comm_ring R] [comm_ring S] (f : R ‚Üí+* S) :
  Module.{v} R ‚•§ Module.{max v u‚ÇÇ} S :=
{ obj := Œª M, extend_scalars.obj' f M,
  map := Œª M1 M2 l, extend_scalars.map' f l,
  map_id' := Œª _, extend_scalars.map'_id f,
  map_comp' := Œª _ _ _, extend_scalars.map'_comp f }

namespace extend_scalars

open_locale change_of_rings

variables {R : Type u‚ÇÅ} {S : Type u‚ÇÇ} [comm_ring R] [comm_ring S] (f : R ‚Üí+* S)

@[simp] protected lemma smul_tmul {M : Module.{v} R} (s s' : S) (m : M) :
  s ‚Ä¢ (s' ‚äó‚Çú[R, f] m : (extend_scalars f).obj M) = (s * s') ‚äó‚Çú[R, f] m := rfl

@[simp] lemma map_tmul {M M' : Module.{v} R} (g : M ‚ü∂ M') (s : S) (m : M) :
  (extend_scalars f).map g (s ‚äó‚Çú[R, f] m) = s ‚äó‚Çú[R, f] g m := rfl

end extend_scalars

namespace coextend_scalars

variables {R : Type u‚ÇÅ} {S : Type u‚ÇÇ} [ring R] [ring S] (f : R ‚Üí+* S)

section unbundled

variables (M : Type v) [add_comm_monoid M] [module R M]

-- We use `S'` to denote `S` viewed as `R`-module, via the map `f`.
local notation `S'` := (restrict_scalars f).obj ‚ü®S‚ü©

/--
 Given an `R`-module M, consider Hom(S, M) -- the `R`-linear maps between S (as an `R`-module by
 means of restriction of scalars) and M. `S` acts on Hom(S, M) by `s ‚Ä¢ g = x ‚Ü¶ g (x ‚Ä¢ s)`
 -/
instance has_smul : has_smul S $ S' ‚Üí‚Çó[R] M :=
{ smul := Œª s g,
  { to_fun := Œª (s' : S), g (s' * s : S),
    map_add' := Œª (x y : S), by simp [add_mul, map_add],
    map_smul' := Œª r (t : S), by rw [ring_hom.id_apply, @restrict_scalars.smul_def _ _ _ _ f ‚ü®S‚ü©,
      ‚Üêlinear_map.map_smul, @restrict_scalars.smul_def _ _ _ _ f ‚ü®S‚ü©, smul_eq_mul, smul_eq_mul,
      mul_assoc] } }

@[simp] lemma smul_apply' (s : S) (g :  S' ‚Üí‚Çó[R] M) (s' : S) :
  @has_smul.smul _ _ (coextend_scalars.has_smul f _) s g s' = g (s' * s : S) := rfl

instance mul_action : mul_action S $ S' ‚Üí‚Çó[R] M :=
{ one_smul := Œª g, linear_map.ext $ Œª (s : S), by simp,
  mul_smul := Œª (s t : S) g, linear_map.ext $ Œª (x : S), by simp [mul_assoc],
  ..coextend_scalars.has_smul f _ }

instance distrib_mul_action : distrib_mul_action S $ S' ‚Üí‚Çó[R] M :=
{ smul_add := Œª s g h, linear_map.ext $ Œª (t : S), by simp,
  smul_zero := Œª s, linear_map.ext $ Œª (t : S), by simp,
  ..coextend_scalars.mul_action f _ }

/--
`S` acts on Hom(S, M) by `s ‚Ä¢ g = x ‚Ü¶ g (x ‚Ä¢ s)`, this action defines an `S`-module structure on
Hom(S, M).
 -/
instance is_module : module S $ S' ‚Üí‚Çó[R] M :=
{ add_smul := Œª s1 s2 g, linear_map.ext $ Œª (x : S), by simp [mul_add],
  zero_smul := Œª g, linear_map.ext $ Œª (x : S), by simp,
  ..coextend_scalars.distrib_mul_action f _ }

end unbundled

variable (M : Module.{v} R)

/-- If `M` is an `R`-module, then the set of `R`-linear maps `S ‚Üí‚Çó[R] M` is an `S`-module with
scalar multiplication defined by `s ‚Ä¢ l := x ‚Ü¶ l (x ‚Ä¢ s)`-/
def obj' : Module S := ‚ü®(restrict_scalars f).obj ‚ü®S‚ü© ‚Üí‚Çó[R] M‚ü©

instance : has_coe_to_fun (obj' f M) (Œª g, S ‚Üí M) :=
{ coe := Œª g, g.to_fun }

/-- If `M, M'` are `R`-modules, then any `R`-linear map `g : M ‚ü∂ M'` induces an `S`-linear map
`(S ‚Üí‚Çó[R] M) ‚ü∂ (S ‚Üí‚Çó[R] M')` defined by `h ‚Ü¶ g ‚àò h`-/
@[simps] def map' {M M' : Module R} (g : M ‚ü∂ M') : obj' f M ‚ü∂ obj' f M' :=
{ to_fun := Œª h, g.comp h,
  map_add' := Œª _ _, linear_map.comp_add _ _ _,
  map_smul' := Œª s h, linear_map.ext $ Œª (t : S), by simpa only [smul_apply'] }

end coextend_scalars

/--
For any rings `R, S` and a ring homomorphism `f : R ‚Üí+* S`, there is a functor from `R`-module to
`S`-module defined by `M ‚Ü¶ (S ‚Üí‚Çó[R] M)` where `S` is considered as an `R`-module via restriction of
scalars and `g : M ‚ü∂ M'` is sent to `h ‚Ü¶ g ‚àò h`.
-/
def coextend_scalars {R : Type u‚ÇÅ} {S : Type u‚ÇÇ} [ring R] [ring S] (f : R ‚Üí+* S) :
  Module R ‚•§ Module S :=
{ obj := coextend_scalars.obj' f,
  map := Œª _ _, coextend_scalars.map' f,
  map_id' := Œª M, linear_map.ext $ Œª h, linear_map.ext $ Œª x, rfl,
  map_comp' := Œª _ _ _ g h, linear_map.ext $ Œª h, linear_map.ext $ Œª x, rfl }

namespace coextend_scalars

variables {R : Type u‚ÇÅ} {S : Type u‚ÇÇ} [ring R] [ring S] (f : R ‚Üí+* S)

instance (M : Module R) : has_coe_to_fun ((coextend_scalars f).obj M) (Œª g, S ‚Üí M) :=
(infer_instance : has_coe_to_fun (coextend_scalars.obj' f M) _)

lemma smul_apply (M : Module R) (g : (coextend_scalars f).obj M) (s s' : S) :
  (s ‚Ä¢ g) s' = g (s' * s) := rfl

@[simp] lemma map_apply {M M' : Module R} (g : M ‚ü∂ M') (x) (s : S) :
  (coextend_scalars f).map g x s = g (x s) := rfl

end coextend_scalars

namespace restriction_coextension_adj

variables {R : Type u‚ÇÅ} {S : Type u‚ÇÇ} [ring R] [ring S] (f : R ‚Üí+* S)

/--
Given `R`-module X and `S`-module Y, any `g : (restrict_of_scalars f).obj Y ‚ü∂ X`
corresponds to `Y ‚ü∂ (coextend_scalars f).obj X` by sending `y ‚Ü¶ (s ‚Ü¶ g (s ‚Ä¢ y))`
-/
@[simps] def hom_equiv.from_restriction {X Y} (g : (restrict_scalars f).obj Y ‚ü∂ X) :
  Y ‚ü∂ (coextend_scalars f).obj X :=
{ to_fun := Œª (y : Y),
  { to_fun := Œª (s : S), g $ (s ‚Ä¢ y : Y),
    map_add' := Œª (s1 s2 : S), by simp [add_smul],
    map_smul' := Œª r (s : S), by rw [ring_hom.id_apply, ‚Üêg.map_smul,
      @restrict_scalars.smul_def _ _ _ _ f ‚ü®S‚ü©, smul_eq_mul, mul_smul,
      @restrict_scalars.smul_def _ _ _ _ f Y] },
  map_add' := Œª (y1 y2 : Y), linear_map.ext $ Œª (s : S),
  by rw [linear_map.add_apply, linear_map.coe_mk, linear_map.coe_mk, linear_map.coe_mk,
      smul_add, map_add],
  map_smul' := Œª s y, linear_map.ext $ Œª (t : S), by simp [mul_smul] }

/--
Given `R`-module X and `S`-module Y, any `g : Y ‚ü∂ (coextend_scalars f).obj X`
corresponds to `(restrict_scalars f).obj Y ‚ü∂ X` by `y ‚Ü¶ g y 1`
-/
@[simps] def hom_equiv.to_restriction {X Y} (g : Y ‚ü∂ (coextend_scalars f).obj X) :
  (restrict_scalars f).obj Y ‚ü∂ X :=
{ to_fun := Œª (y : Y), (g y).to_fun (1 : S),
  map_add' := Œª x y, by simp only [g.map_add, linear_map.to_fun_eq_coe, linear_map.add_apply],
  map_smul' := Œª r (y : Y), by rw [linear_map.to_fun_eq_coe, linear_map.to_fun_eq_coe,
    ring_hom.id_apply, ‚Üêlinear_map.map_smul, restrict_scalars.smul_def f r y,
    @restrict_scalars.smul_def _ _ _ _ f ‚ü®S‚ü©, smul_eq_mul, mul_one, linear_map.map_smul,
    coextend_scalars.smul_apply, one_mul], }

/--
The natural transformation from identity functor to the composition of restriction and coextension
of scalars.
-/
@[simps] protected def unit' : ùü≠ (Module S) ‚ü∂ restrict_scalars f ‚ãô coextend_scalars f :=
{ app := Œª Y,
  { to_fun := Œª (y : Y),
    { to_fun := Œª (s : S), (s ‚Ä¢ y : Y),
      map_add' := Œª s s', add_smul _ _ _,
      map_smul' := Œª r (s : S), by rw [ring_hom.id_apply, @restrict_scalars.smul_def _ _ _ _ f ‚ü®S‚ü©,
        smul_eq_mul, mul_smul, restrict_scalars.smul_def f] },
    map_add' := Œª y1 y2, linear_map.ext $ Œª (s : S), by rw [linear_map.add_apply, linear_map.coe_mk,
      linear_map.coe_mk, linear_map.coe_mk, smul_add],
    map_smul' := Œª s (y : Y), linear_map.ext $ Œª (t : S), by simp [mul_smul] },
  naturality' := Œª Y Y' g, linear_map.ext $ Œª (y : Y), linear_map.ext $ Œª (s : S),
    by simp [coextend_scalars.map_apply] }

/--
The natural transformation from the composition of coextension and restriction of scalars to
identity functor.
-/
@[simps] protected def counit' : coextend_scalars f ‚ãô restrict_scalars f ‚ü∂ ùü≠ (Module R) :=
{ app := Œª X,
  { to_fun := Œª g, g.to_fun (1 : S),
    map_add' := Œª x1 x2, by simp [linear_map.to_fun_eq_coe],
    map_smul' := Œª r (g : (restrict_scalars f).obj ((coextend_scalars f).obj X)),
    begin
      simp only [linear_map.to_fun_eq_coe, ring_hom.id_apply],
      rw [restrict_scalars.smul_def f, coextend_scalars.smul_apply, one_mul, ‚Üêlinear_map.map_smul,
        @restrict_scalars.smul_def _ _ _ _ f ‚ü®S‚ü©, smul_eq_mul, mul_one],
    end },
  naturality' := Œª X X' g, linear_map.ext $ Œª h, by simp [coextend_scalars.map_apply] }

end restriction_coextension_adj

/-- Restriction of scalars is left adjoint to coextension of scalars. -/
@[simps] def restrict_coextend_scalars_adj {R : Type u‚ÇÅ} {S : Type u‚ÇÇ} [ring R] [ring S]
  (f : R ‚Üí+* S) : restrict_scalars f ‚ä£ coextend_scalars f :=
{ hom_equiv := Œª X Y,
  { to_fun := restriction_coextension_adj.hom_equiv.from_restriction f,
    inv_fun := restriction_coextension_adj.hom_equiv.to_restriction f,
    left_inv := Œª g, linear_map.ext $ Œª (x : X), by simp,
    right_inv := Œª g, linear_map.ext $ Œª x, linear_map.ext $ Œª (s : S), by simp },
  unit := restriction_coextension_adj.unit' f,
  counit := restriction_coextension_adj.counit' f,
  hom_equiv_unit' := Œª X Y g, linear_map.ext $ Œª y, rfl,
  hom_equiv_counit' := Œª Y X g, linear_map.ext $ Œª (y : Y), by simp }

instance {R : Type u‚ÇÅ} {S : Type u‚ÇÇ} [ring R] [ring S] (f : R ‚Üí+* S) :
  category_theory.is_left_adjoint (restrict_scalars f) := ‚ü®_, restrict_coextend_scalars_adj f‚ü©

instance {R : Type u‚ÇÅ} {S : Type u‚ÇÇ} [ring R] [ring S] (f : R ‚Üí+* S) :
  category_theory.is_right_adjoint (coextend_scalars f) := ‚ü®_, restrict_coextend_scalars_adj f‚ü©

namespace extend_restrict_scalars_adj

open_locale change_of_rings
open tensor_product

variables {R : Type u‚ÇÅ} {S : Type u‚ÇÇ} [comm_ring R] [comm_ring S] (f : R ‚Üí+* S)

/--
Given `R`-module X and `S`-module Y and a map `g : (extend_scalars f).obj X ‚ü∂ Y`, i.e. `S`-linear
map `S ‚®Ç X ‚Üí Y`, there is a `X ‚ü∂ (restrict_scalars f).obj Y`, i.e. `R`-linear map `X ‚ü∂ Y` by
`x ‚Ü¶ g (1 ‚äó x)`.
-/
@[simps] def hom_equiv.to_restrict_scalars {X Y} (g : (extend_scalars f).obj X ‚ü∂ Y) :
  X ‚ü∂ (restrict_scalars f).obj Y :=
{ to_fun := Œª x, g $ (1 : S) ‚äó‚Çú[R, f] x,
  map_add' := Œª _ _, by rw [tmul_add, map_add],
  map_smul' := Œª r x,
  begin
    letI : module R S := module.comp_hom S f,
    letI : module R Y := module.comp_hom Y f,
    rw [ring_hom.id_apply, restrict_scalars.smul_def, ‚Üêlinear_map.map_smul, tmul_smul],
    congr,
  end }

/--
Given `R`-module X and `S`-module Y and a map `X ‚ü∂ (restrict_scalars f).obj Y`, i.e `R`-linear map
`X ‚ü∂ Y`, there is a map `(extend_scalars f).obj X ‚ü∂ Y`, i.e  `S`-linear map `S ‚®Ç X ‚Üí Y` by
`s ‚äó x ‚Ü¶ s ‚Ä¢ g x`.
-/
@[simps] def hom_equiv.from_extend_scalars {X Y} (g : X ‚ü∂ (restrict_scalars f).obj Y) :
  (extend_scalars f).obj X ‚ü∂ Y :=
begin
  letI m1 : module R S := module.comp_hom S f, letI m2 : module R Y := module.comp_hom Y f,
  refine ‚ü®Œª z, tensor_product.lift ‚ü®Œª s, ‚ü®_, _, _‚ü©, _, _‚ü© z, _, _‚ü©,
  { exact Œª x, s ‚Ä¢ g x },
  { intros, rw [map_add, smul_add], },
  { intros, rw [ring_hom.id_apply, smul_comm, ‚Üêlinear_map.map_smul], },
  { intros, ext, simp only [linear_map.coe_mk, linear_map.add_apply], rw ‚Üêadd_smul, },
  { intros, ext,
    simp only [linear_map.coe_mk, ring_hom.id_apply, linear_map.smul_apply,
      restrict_scalars.smul_def, smul_eq_mul],
    convert mul_smul _ _ _, },
  { intros, rw [map_add], },
  { intros r z,
    rw [ring_hom.id_apply],
    induction z using tensor_product.induction_on with x y x y ih1 ih2,
    { simp only [smul_zero, map_zero], },
    { simp only [linear_map.coe_mk, extend_scalars.smul_tmul, lift.tmul, ‚Üêmul_smul], },
    { rw [smul_add, map_add, ih1, ih2, map_add, smul_add], }, },
end

/--
Given `R`-module X and `S`-module Y, `S`-linear linear maps `(extend_scalars f).obj X ‚ü∂ Y`
bijectively correspond to `R`-linear maps `X ‚ü∂ (restrict_scalars f).obj Y`.
-/
@[simps]
def hom_equiv {X Y} : ((extend_scalars f).obj X ‚ü∂ Y) ‚âÉ (X ‚ü∂ (restrict_scalars f).obj Y) :=
{ to_fun := hom_equiv.to_restrict_scalars f,
  inv_fun := hom_equiv.from_extend_scalars f,
  left_inv := Œª g, begin
    ext z,
    induction z using tensor_product.induction_on with x s z1 z2 ih1 ih2,
    { simp only [map_zero], },
    { erw tensor_product.lift.tmul,
      simp only [linear_map.coe_mk],
      change S at x,
      erw [‚Üêlinear_map.map_smul, extend_scalars.smul_tmul, mul_one x], },
    { rw [map_add, map_add, ih1, ih2], }
  end,
  right_inv := Œª g,
  begin
    ext,
    rw [hom_equiv.to_restrict_scalars_apply, hom_equiv.from_extend_scalars_apply, lift.tmul,
      linear_map.coe_mk, linear_map.coe_mk],
    convert one_smul _ _,
  end }

/--
For any `R`-module X, there is a natural `R`-linear map from `X` to `X ‚®Ç S` by sending `x ‚Ü¶ x ‚äó 1`
-/
@[simps] def unit.map {X} : X ‚ü∂ (extend_scalars f ‚ãô restrict_scalars f).obj X :=
{ to_fun := Œª x, (1 : S) ‚äó‚Çú[R, f] x,
  map_add' := Œª x x', by { rw tensor_product.tmul_add, },
  map_smul' := Œª r x, by { letI m1 : module R S := module.comp_hom S f, tidy } }

/--
The natural transformation from identity functor on `R`-module to the composition of extension and
restriction of scalars.
-/
@[simps] def unit : ùü≠ (Module R) ‚ü∂ extend_scalars f ‚ãô restrict_scalars f :=
{ app := Œª _, unit.map f, naturality' := Œª X X' g, by tidy }

/--
For any `S`-module Y, there is a natural `R`-linear map from `S ‚®Ç Y` to `Y` by
`s ‚äó y ‚Ü¶ s ‚Ä¢ y`
-/
@[simps] def counit.map {Y} : (restrict_scalars f ‚ãô extend_scalars f).obj Y ‚ü∂ Y :=
begin
  letI m1 : module R S := module.comp_hom S f,
  letI m2 : module R Y := module.comp_hom Y f,
  refine ‚ü®tensor_product.lift ‚ü®Œª (s : S), ‚ü®Œª (y : Y), s ‚Ä¢ y, smul_add _, _‚ü©, _, _‚ü©, _, _‚ü©,
  { intros, rw [ring_hom.id_apply, restrict_scalars.smul_def, ‚Üêmul_smul, mul_comm, mul_smul,
      restrict_scalars.smul_def], },
  { intros, ext, simp only [linear_map.add_apply, linear_map.coe_mk, add_smul], },
  { intros, ext,
    simpa only [ring_hom.id_apply, linear_map.smul_apply, linear_map.coe_mk,
      @restrict_scalars.smul_def _ _ _ _ f ‚ü®S‚ü©, smul_eq_mul, mul_smul], },
  { intros, rw [map_add], },
  { intros s z,
    rw [ring_hom.id_apply],
    induction z using tensor_product.induction_on with x s' z1 z2 ih1 ih2,
    { simp only [smul_zero, map_zero], },
    { simp only [extend_scalars.smul_tmul, linear_map.coe_mk, tensor_product.lift.tmul, mul_smul] },
    { rw [smul_add, map_add, map_add, ih1, ih2, smul_add], } },
end

/--
The natural transformation from the composition of restriction and extension of scalars to the
identity functor on `S`-module.
-/
@[simps] def counit : (restrict_scalars f ‚ãô extend_scalars f) ‚ü∂ (ùü≠ (Module S)) :=
{ app := Œª _, counit.map f,
  naturality' := Œª Y Y' g,
    begin
      ext z, induction z using tensor_product.induction_on,
      { simp only [map_zero] },
      { simp only [category_theory.functor.comp_map, Module.coe_comp, function.comp_app,
          extend_scalars.map_tmul, restrict_scalars.map_apply, counit.map_apply, lift.tmul,
          linear_map.coe_mk, category_theory.functor.id_map, linear_map.map_smul‚Çõ‚Çó,
          ring_hom.id_apply] },
      { simp only [map_add, *] },
    end }

end extend_restrict_scalars_adj

/--
Given commutative rings `R, S` and a ring hom `f : R ‚Üí+* S`, the extension and restriction of
scalars by `f` are adjoint to each other.
-/
@[simps]
def extend_restrict_scalars_adj {R : Type u‚ÇÅ} {S : Type u‚ÇÇ} [comm_ring R] [comm_ring S]
  (f : R ‚Üí+* S) : extend_scalars f ‚ä£ restrict_scalars f :=
{ hom_equiv := Œª _ _, extend_restrict_scalars_adj.hom_equiv f,
  unit := extend_restrict_scalars_adj.unit f,
  counit := extend_restrict_scalars_adj.counit f,
  hom_equiv_unit' := Œª X Y g, linear_map.ext $ Œª x, by simp,
  hom_equiv_counit' := Œª X Y g, linear_map.ext $ Œª x,
    begin
      induction x using tensor_product.induction_on,
      { simp only [map_zero]},
      { simp only [extend_restrict_scalars_adj.hom_equiv_symm_apply, linear_map.coe_mk,
          extend_restrict_scalars_adj.hom_equiv.from_extend_scalars_apply, tensor_product.lift.tmul,
          extend_restrict_scalars_adj.counit_app, Module.coe_comp, function.comp_app,
          extend_scalars.map_tmul, extend_restrict_scalars_adj.counit.map_apply] },
      { simp only [map_add, *], }
    end }

instance {R : Type u‚ÇÅ} {S : Type u‚ÇÇ} [comm_ring R] [comm_ring S] (f : R ‚Üí+* S) :
  category_theory.is_left_adjoint (extend_scalars f) := ‚ü®_, extend_restrict_scalars_adj f‚ü©

instance {R : Type u‚ÇÅ} {S : Type u‚ÇÇ} [comm_ring R] [comm_ring S] (f : R ‚Üí+* S) :
  category_theory.is_right_adjoint (restrict_scalars f) := ‚ü®_, extend_restrict_scalars_adj f‚ü©

end category_theory.Module
