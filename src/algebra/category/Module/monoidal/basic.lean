/-
Copyright (c) 2020 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kevin Buzzard, Scott Morrison, Jakob von Raumer
-/
import algebra.category.Module.basic
import linear_algebra.tensor_product
import category_theory.linear.yoneda
import category_theory.monoidal.linear

/-!
# The monoidal category structure on R-modules

Mostly this uses existing machinery in `linear_algebra.tensor_product`.
We just need to provide a few small missing pieces to build the
`monoidal_category` instance.
The `symmetric_category` instance is in `algebra.category.Module.monoidal.symmetric`
to reduce imports.

Note the universe level of the modules must be at least the universe level of the ring,
so that we have a monoidal unit.
For now, we simplify by insisting both universe levels are the same.

We construct the monoidal closed structure on `Module R` in
`algebra.category.Module.monoidal.closed`.

If you're happy using the bundled `Module R`, it may be possible to mostly
use this as an interface and not need to interact much with the implementation details.
-/

universes v w x u

open category_theory

namespace Module

variables {R : Type u} [comm_ring R]

namespace monoidal_category
-- The definitions inside this namespace are essentially private.
-- After we build the `monoidal_category (Module R)` instance,
-- you should use that API.

open_locale tensor_product
local attribute [ext] tensor_product.ext

/-- (implementation) tensor product of R-modules -/
def tensor_obj (M N : Module R) : Module R := Module.of R (M ‚äó[R] N)
/-- (implementation) tensor product of morphisms R-modules -/
def tensor_hom {M N M' N' : Module R} (f : M ‚ü∂ N) (g : M' ‚ü∂ N') :
  tensor_obj M M' ‚ü∂ tensor_obj N N' :=
tensor_product.map f g

lemma tensor_id (M N : Module R) : tensor_hom (ùüô M) (ùüô N) = ùüô (Module.of R (M ‚äó N)) :=
by { ext1, refl }

lemma tensor_comp {X‚ÇÅ Y‚ÇÅ Z‚ÇÅ X‚ÇÇ Y‚ÇÇ Z‚ÇÇ : Module R}
  (f‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (f‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ) (g‚ÇÅ : Y‚ÇÅ ‚ü∂ Z‚ÇÅ) (g‚ÇÇ : Y‚ÇÇ ‚ü∂ Z‚ÇÇ) :
    tensor_hom (f‚ÇÅ ‚â´ g‚ÇÅ) (f‚ÇÇ ‚â´ g‚ÇÇ) = tensor_hom f‚ÇÅ f‚ÇÇ ‚â´ tensor_hom g‚ÇÅ g‚ÇÇ :=
by { ext1, refl }

/-- (implementation) the associator for R-modules -/
def associator (M : Module.{v} R) (N : Module.{w} R) (K : Module.{x} R) :
  tensor_obj (tensor_obj M N) K ‚âÖ tensor_obj M (tensor_obj N K) :=
(tensor_product.assoc R M N K).to_Module_iso

section

/-! The `associator_naturality` and `pentagon` lemmas below are very slow to elaborate.

We give them some help by expressing the lemmas first non-categorically, then using
`convert _aux using 1` to have the elaborator work as little as possible. -/

open tensor_product (assoc map)

private lemma associator_naturality_aux
  {X‚ÇÅ X‚ÇÇ X‚ÇÉ : Type*}
  [add_comm_monoid X‚ÇÅ] [add_comm_monoid X‚ÇÇ] [add_comm_monoid X‚ÇÉ]
  [module R X‚ÇÅ] [module R X‚ÇÇ] [module R X‚ÇÉ]
  {Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ : Type*}
  [add_comm_monoid Y‚ÇÅ] [add_comm_monoid Y‚ÇÇ] [add_comm_monoid Y‚ÇÉ]
  [module R Y‚ÇÅ] [module R Y‚ÇÇ] [module R Y‚ÇÉ]
  (f‚ÇÅ : X‚ÇÅ ‚Üí‚Çó[R] Y‚ÇÅ) (f‚ÇÇ : X‚ÇÇ ‚Üí‚Çó[R] Y‚ÇÇ) (f‚ÇÉ : X‚ÇÉ ‚Üí‚Çó[R] Y‚ÇÉ) :
  (‚Üë(assoc R Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ) ‚àò‚Çó (map (map f‚ÇÅ f‚ÇÇ) f‚ÇÉ)) = ((map f‚ÇÅ (map f‚ÇÇ f‚ÇÉ)) ‚àò‚Çó ‚Üë(assoc R X‚ÇÅ X‚ÇÇ X‚ÇÉ)) :=
begin
  apply tensor_product.ext_threefold,
  intros x y z,
  refl
end

variables (R)

private lemma pentagon_aux
  (W X Y Z : Type*)
  [add_comm_monoid W] [add_comm_monoid X] [add_comm_monoid Y] [add_comm_monoid Z]
  [module R W] [module R X] [module R Y] [module R Z] :
  ((map (1 : W ‚Üí‚Çó[R] W) (assoc R X Y Z).to_linear_map).comp (assoc R W (X ‚äó[R] Y) Z).to_linear_map)
    .comp (map ‚Üë(assoc R W X Y) (1 : Z ‚Üí‚Çó[R] Z)) =
  (assoc R W X (Y ‚äó[R] Z)).to_linear_map.comp (assoc R (W ‚äó[R] X) Y Z).to_linear_map :=
begin
  apply tensor_product.ext_fourfold,
  intros w x y z,
  refl
end

end

lemma associator_naturality {X‚ÇÅ X‚ÇÇ X‚ÇÉ Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ : Module R}
  (f‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (f‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ) (f‚ÇÉ : X‚ÇÉ ‚ü∂ Y‚ÇÉ) :
    tensor_hom (tensor_hom f‚ÇÅ f‚ÇÇ) f‚ÇÉ ‚â´ (associator Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ).hom =
    (associator X‚ÇÅ X‚ÇÇ X‚ÇÉ).hom ‚â´ tensor_hom f‚ÇÅ (tensor_hom f‚ÇÇ f‚ÇÉ) :=
by convert associator_naturality_aux f‚ÇÅ f‚ÇÇ f‚ÇÉ using 1

lemma pentagon (W X Y Z : Module R) :
  tensor_hom (associator W X Y).hom (ùüô Z) ‚â´ (associator W (tensor_obj X Y) Z).hom
  ‚â´ tensor_hom (ùüô W) (associator X Y Z).hom =
    (associator (tensor_obj W X) Y Z).hom ‚â´ (associator W X (tensor_obj Y Z)).hom :=
by convert pentagon_aux R W X Y Z using 1

/-- (implementation) the left unitor for R-modules -/
def left_unitor (M : Module.{u} R) : Module.of R (R ‚äó[R] M) ‚âÖ M :=
(linear_equiv.to_Module_iso (tensor_product.lid R M) : of R (R ‚äó M) ‚âÖ of R M).trans (of_self_iso M)

lemma left_unitor_naturality {M N : Module R} (f : M ‚ü∂ N) :
  tensor_hom (ùüô (Module.of R R)) f ‚â´ (left_unitor N).hom = (left_unitor M).hom ‚â´ f :=
begin
  ext x y, dsimp,
  erw [tensor_product.lid_tmul, tensor_product.lid_tmul],
  rw linear_map.map_smul,
  refl,
end

/-- (implementation) the right unitor for R-modules -/
def right_unitor (M : Module.{u} R) : Module.of R (M ‚äó[R] R) ‚âÖ M :=
(linear_equiv.to_Module_iso (tensor_product.rid R M) : of R (M ‚äó R) ‚âÖ of R M).trans (of_self_iso M)

lemma right_unitor_naturality {M N : Module R} (f : M ‚ü∂ N) :
  tensor_hom f (ùüô (Module.of R R)) ‚â´ (right_unitor N).hom = (right_unitor M).hom ‚â´ f :=
begin
  ext x y, dsimp,
  erw [tensor_product.rid_tmul, tensor_product.rid_tmul],
  rw linear_map.map_smul,
  refl,
end

lemma triangle (M N : Module.{u} R) :
  (associator M (Module.of R R) N).hom ‚â´ tensor_hom (ùüô M) (left_unitor N).hom =
    tensor_hom (right_unitor M).hom (ùüô N) :=
begin
  apply tensor_product.ext_threefold,
  intros x y z,
  change R at y,
  dsimp [tensor_hom, associator],
  erw [tensor_product.lid_tmul, tensor_product.rid_tmul],
  exact (tensor_product.smul_tmul _ _ _).symm
end

end monoidal_category

open monoidal_category

instance monoidal_category : monoidal_category (Module.{u} R) :=
{ -- data
  tensor_obj   := tensor_obj,
  tensor_hom   := @tensor_hom _ _,
  tensor_unit  := Module.of R R,
  associator   := associator,
  left_unitor  := left_unitor,
  right_unitor := right_unitor,
  -- properties
  tensor_id'               := Œª M N, tensor_id M N,
  tensor_comp'             := Œª M N K M' N' K' f g h, tensor_comp f g h,
  associator_naturality'   := Œª M N K M' N' K' f g h, associator_naturality f g h,
  left_unitor_naturality'  := Œª M N f, left_unitor_naturality f,
  right_unitor_naturality' := Œª M N f, right_unitor_naturality f,
  pentagon'                := Œª M N K L, pentagon M N K L,
  triangle'                := Œª M N, triangle M N, }

/-- Remind ourselves that the monoidal unit, being just `R`, is still a commutative ring. -/
instance : comm_ring ((ùüô_ (Module.{u} R) : Module.{u} R) : Type u) :=
(by apply_instance : comm_ring R)

namespace monoidal_category

@[simp]
lemma hom_apply {K L M N : Module.{u} R} (f : K ‚ü∂ L) (g : M ‚ü∂ N) (k : K) (m : M) :
  (f ‚äó g) (k ‚äó‚Çú m) = f k ‚äó‚Çú g m := rfl

@[simp]
lemma left_unitor_hom_apply {M : Module.{u} R} (r : R) (m : M) :
  ((Œª_ M).hom : ùüô_ (Module R) ‚äó M ‚ü∂ M) (r ‚äó‚Çú[R] m) = r ‚Ä¢ m :=
tensor_product.lid_tmul m r

@[simp]
lemma left_unitor_inv_apply {M : Module.{u} R} (m : M) :
  ((Œª_ M).inv : M ‚ü∂ ùüô_ (Module.{u} R) ‚äó M) m = 1 ‚äó‚Çú[R] m :=
tensor_product.lid_symm_apply m

@[simp]
lemma right_unitor_hom_apply {M : Module.{u} R} (m : M) (r : R) :
  ((œÅ_ M).hom : M ‚äó ùüô_ (Module R) ‚ü∂ M) (m ‚äó‚Çú r) = r ‚Ä¢ m :=
tensor_product.rid_tmul m r

@[simp]
lemma right_unitor_inv_apply {M : Module.{u} R} (m : M) :
  ((œÅ_ M).inv : M ‚ü∂ M ‚äó ùüô_ (Module.{u} R)) m = m ‚äó‚Çú[R] 1 :=
tensor_product.rid_symm_apply m

@[simp]
lemma associator_hom_apply {M N K : Module.{u} R} (m : M) (n : N) (k : K) :
  ((Œ±_ M N K).hom : (M ‚äó N) ‚äó K ‚ü∂ M ‚äó (N ‚äó K)) ((m ‚äó‚Çú n) ‚äó‚Çú k) = (m ‚äó‚Çú (n ‚äó‚Çú k)) := rfl

@[simp]
lemma associator_inv_apply {M N K : Module.{u} R} (m : M) (n : N) (k : K) :
  ((Œ±_ M N K).inv : M ‚äó (N ‚äó K) ‚ü∂ (M ‚äó N) ‚äó K) (m ‚äó‚Çú (n ‚äó‚Çú k)) = ((m ‚äó‚Çú n) ‚äó‚Çú k) := rfl

end monoidal_category

open opposite

instance : monoidal_preadditive (Module.{u} R) :=
by refine ‚ü®_, _, _, _‚ü©; dsimp only [auto_param]; intros;
  refine tensor_product.ext (linear_map.ext $ Œª x, linear_map.ext $ Œª y, _);
  simp only [linear_map.compr‚ÇÇ_apply, tensor_product.mk_apply, monoidal_category.hom_apply,
    linear_map.zero_apply, tensor_product.tmul_zero, tensor_product.zero_tmul,
    linear_map.add_apply, tensor_product.tmul_add, tensor_product.add_tmul]

instance : monoidal_linear R (Module.{u} R) :=
by refine ‚ü®_, _‚ü©; dsimp only [auto_param]; intros;
  refine tensor_product.ext (linear_map.ext $ Œª x, linear_map.ext $ Œª y, _);
  simp only [linear_map.compr‚ÇÇ_apply, tensor_product.mk_apply, monoidal_category.hom_apply,
    linear_map.smul_apply, tensor_product.tmul_smul, tensor_product.smul_tmul]

end Module
