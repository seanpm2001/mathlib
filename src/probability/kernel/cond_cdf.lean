/-
Copyright (c) 2023 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne
-/
import measure_theory.measure.stieltjes
import probability.kernel.composition
import measure_theory.decomposition.radon_nikodym

/-!
# Conditional cumulative distribution function

Given `œÅ : measure (Œ± √ó ‚Ñù)`, we define the conditional cumulative distribution function
(conditional cdf) of `œÅ`. It is a function `cond_cdf œÅ : Œ± ‚Üí ‚Ñù ‚Üí ‚Ñù` such that if `œÅ` is a finite
measure, then for all `a : Œ±` `cond_cdf œÅ a` is monotone and right-continuous with limit 0 at -‚àû
and limit 1 at +‚àû, and such that for all `x : ‚Ñù`, `a ‚Ü¶ cond_cdf œÅ a x` is measurable. For all
`x : ‚Ñù` and measurable set `s`, that function satisfies
`‚à´‚Åª a in s, ennreal.of_real (cond_cdf œÅ a x) ‚àÇœÅ.fst = œÅ (s √óÀ¢ Iic x)`.

## Main definitions

* `probability_theory.cond_cdf œÅ : Œ± ‚Üí stieltjes_function`: the conditional cdf of
  `œÅ : measure (Œ± √ó ‚Ñù)`. A `stieltjes_function` is a function `‚Ñù ‚Üí ‚Ñù` which is monotone and
  right-continuous.

## Main statements

* `probability_theory.set_lintegral_cond_cdf`: for all `a : Œ±` and `x : ‚Ñù`, all measurable set `s`,
  `‚à´‚Åª a in s, ennreal.of_real (cond_cdf œÅ a x) ‚àÇœÅ.fst = œÅ (s √óÀ¢ Iic x)`.

## References

The construction of the conditional cdf in this file follows the proof of Theorem 3.4 in
[O. Kallenberg, Foundations of modern probability][kallenberg2021].

## TODO

* The conditional cdf can be used to define the cdf of a real measure by using the
  conditional cdf of `(measure.dirac unit.star).prod Œº : measure (unit √ó ‚Ñù)`.

-/

open measure_theory set filter topological_space

open_locale nnreal ennreal measure_theory topology probability_theory

section aux_lemmas_to_be_moved

variables {Œ± Œ≤ Œπ : Type*}

namespace directed
-- todo after the port: move this to logic.encodable.basic near sequence_mono
variables [encodable Œ±] [inhabited Œ±] [preorder Œ≤] {f : Œ± ‚Üí Œ≤} (hf : directed (‚â•) f)

lemma sequence_anti : antitone (f ‚àò (hf.sequence f)) :=
antitone_nat_of_succ_le $ hf.sequence_mono_nat

lemma sequence_le (a : Œ±) : f (hf.sequence f (encodable.encode a + 1)) ‚â§ f a :=
hf.rel_sequence a

end directed

-- todo: move to data/set/lattice next to prod_Union or prod_sInter
lemma prod_Inter {s : set Œ±} {t : Œπ ‚Üí set Œ≤} [hŒπ : nonempty Œπ] :
  s √óÀ¢ (‚ãÇ i, t i) = ‚ãÇ i, s √óÀ¢ (t i) :=
begin
  ext x,
  simp only [mem_prod, mem_Inter],
  exact ‚ü®Œª h i, ‚ü®h.1, h.2 i‚ü©, Œª h, ‚ü®(h hŒπ.some).1, Œª i, (h i).2‚ü©‚ü©,
end

lemma real.Union_Iic_rat : (‚ãÉ r : ‚Ñö, Iic (r : ‚Ñù)) = univ :=
begin
  ext1,
  simp only [mem_Union, mem_Iic, mem_univ, iff_true],
  obtain ‚ü®r, hr‚ü© := exists_rat_gt x,
  exact ‚ü®r, hr.le‚ü©,
end

lemma real.Inter_Iic_rat : (‚ãÇ r : ‚Ñö, Iic (r : ‚Ñù)) = ‚àÖ :=
begin
  ext1,
  simp only [mem_Inter, mem_Iic, mem_empty_iff_false, iff_false, not_forall, not_le],
  exact exists_rat_lt x,
end

-- todo after the port: move to order/filter/at_top_bot
lemma at_bot_le_nhds_bot {Œ± : Type*} [topological_space Œ±] [linear_order Œ±] [order_bot Œ±]
  [order_topology Œ±] :
  (at_bot : filter Œ±) ‚â§ ùìù ‚ä• :=
begin
  casesI subsingleton_or_nontrivial Œ±,
  { simp only [nhds_discrete, le_pure_iff, mem_at_bot_sets, mem_singleton_iff,
      eq_iff_true_of_subsingleton, implies_true_iff, exists_const], },
  have h : at_bot.has_basis (Œª _ : Œ±, true) Iic := @at_bot_basis Œ± _ _,
  have h_nhds : (ùìù ‚ä•).has_basis (Œª a : Œ±, ‚ä• < a) (Œª a, Iio a) := @nhds_bot_basis Œ± _ _ _ _ _,
  intro s,
  rw [h.mem_iff, h_nhds.mem_iff],
  rintros ‚ü®a, ha_bot_lt, h_Iio_a_subset_s‚ü©,
  refine ‚ü®‚ä•, trivial, subset_trans _ h_Iio_a_subset_s‚ü©,
  simpa only [Iic_bot, singleton_subset_iff, mem_Iio],
end

-- todo after the port: move to order/filter/at_top_bot
lemma at_top_le_nhds_top {Œ± : Type*} [topological_space Œ±] [linear_order Œ±] [order_top Œ±]
  [order_topology Œ±] :
  (at_top : filter Œ±) ‚â§ ùìù ‚ä§ :=
@at_bot_le_nhds_bot Œ±·µí·µà _ _ _ _

-- todo: move to topology/algebra/order/monotone_convergence
lemma tendsto_of_antitone {Œπ Œ± : Type*} [preorder Œπ] [topological_space Œ±]
  [conditionally_complete_linear_order Œ±] [order_topology Œ±] {f : Œπ ‚Üí Œ±} (h_mono : antitone f) :
  tendsto f at_top at_bot ‚à® (‚àÉ l, tendsto f at_top (ùìù l)) :=
@tendsto_of_monotone Œπ Œ±·µí·µà _ _ _ _ _ h_mono

-- todo: move to data/real/ennreal
lemma ennreal.of_real_cinfi (f : Œ± ‚Üí ‚Ñù) [nonempty Œ±] :
  ennreal.of_real (‚®Ö i, f i) = ‚®Ö i, ennreal.of_real (f i) :=
begin
  by_cases hf : bdd_below (range f),
  { exact monotone.map_cinfi_of_continuous_at ennreal.continuous_of_real.continuous_at
      (Œª i j hij, ennreal.of_real_le_of_real hij) hf, },
  { symmetry,
    rw [real.infi_of_not_bdd_below hf, ennreal.of_real_zero, ‚Üê ennreal.bot_eq_zero, infi_eq_bot],
    obtain ‚ü®y, hy_mem, hy_neg‚ü© := not_bdd_below_iff.mp hf 0,
    obtain ‚ü®i, rfl‚ü© := mem_range.mpr hy_mem,
    refine Œª x hx, ‚ü®i, _‚ü©,
    rwa ennreal.of_real_of_nonpos hy_neg.le, },
end

-- todo: move to measure_theory/measurable_space
/-- Monotone convergence for an infimum over a directed family and indexed by a countable type -/
theorem lintegral_infi_directed_of_measurable {mŒ± : measurable_space Œ±} [countable Œ≤]
  {f : Œ≤ ‚Üí Œ± ‚Üí ‚Ñù‚â•0‚àû} {Œº : measure Œ±} (hŒº : Œº ‚â† 0)
  (hf : ‚àÄ b, measurable (f b)) (hf_int : ‚àÄ b, ‚à´‚Åª a, f b a ‚àÇŒº ‚â† ‚àû) (h_directed : directed (‚â•) f) :
  ‚à´‚Åª a, ‚®Ö b, f b a ‚àÇŒº = ‚®Ö b, ‚à´‚Åª a, f b a ‚àÇŒº :=
begin
  casesI nonempty_encodable Œ≤,
  casesI is_empty_or_nonempty Œ≤,
  { simp only [with_top.cinfi_empty, lintegral_const],
    rw [ennreal.top_mul, if_neg],
    simp only [measure.measure_univ_eq_zero, hŒº, not_false_iff], },
  inhabit Œ≤,
  have : ‚àÄ a, (‚®Ö b, f b a) = (‚®Ö n, f (h_directed.sequence f n) a),
  { refine Œª a, le_antisymm (le_infi (Œª n, infi_le _ _))
      (le_infi (Œª b, infi_le_of_le (encodable.encode b + 1) _)),
    exact (h_directed.sequence_le b a), },
  calc ‚à´‚Åª a, ‚®Ö b, f b a ‚àÇŒº
        = ‚à´‚Åª a, ‚®Ö n, f (h_directed.sequence f n) a ‚àÇŒº : by simp only [this]
    ... = ‚®Ö n, ‚à´‚Åª a, f (h_directed.sequence f n) a ‚àÇŒº :
      by { rw lintegral_infi (Œª n, _) h_directed.sequence_anti,
        { exact hf_int _, },
        { exact hf _, }, }
    ... = ‚®Ö b, ‚à´‚Åª a, f b a ‚àÇŒº :
    begin
      refine le_antisymm (le_infi (Œª b, _)) (le_infi (Œª n, _)),
      { exact infi_le_of_le (encodable.encode b + 1) (lintegral_mono $ h_directed.sequence_le b) },
      { exact infi_le (Œªb, ‚à´‚Åª a, f b a ‚àÇŒº) _ },
    end
end

-- todo: move to measure_theory/pi_system
lemma is_pi_system_Iic [semilattice_inf Œ±] : @is_pi_system Œ± (range Iic) :=
by { rintros s ‚ü®us, rfl‚ü© t ‚ü®ut, rfl‚ü© _, rw [Iic_inter_Iic], exact ‚ü®us ‚äì ut, rfl‚ü©, }

-- todo: move to measure_theory/pi_system
lemma is_pi_system_Ici [semilattice_sup Œ±] : @is_pi_system Œ± (range Ici) :=
by { rintros s ‚ü®us, rfl‚ü© t ‚ü®ut, rfl‚ü© _, rw [Ici_inter_Ici], exact ‚ü®us ‚äî ut, rfl‚ü©, }


end aux_lemmas_to_be_moved

namespace measure_theory.measure

variables {Œ± Œ≤ : Type*} {mŒ± : measurable_space Œ±} (œÅ : measure (Œ± √ó ‚Ñù))

include mŒ±

/-- Measure on `Œ±` such that for a measurable set `s`, `œÅ.Iic_snd r s = œÅ (s √óÀ¢ Iic r)`. -/
noncomputable
def Iic_snd (r : ‚Ñù) : measure Œ± := (œÅ.restrict (univ √óÀ¢ Iic r)).fst

lemma Iic_snd_apply (r : ‚Ñù) {s : set Œ±} (hs : measurable_set s) :
  œÅ.Iic_snd r s = œÅ (s √óÀ¢ Iic r) :=
by rw [Iic_snd, fst_apply hs,
  restrict_apply' (measurable_set.univ.prod (measurable_set_Iic : measurable_set (Iic r))),
  ‚Üê prod_univ, prod_inter_prod, inter_univ, univ_inter]

lemma Iic_snd_univ (r : ‚Ñù) : œÅ.Iic_snd r univ = œÅ (univ √óÀ¢ Iic r) :=
Iic_snd_apply œÅ r measurable_set.univ

lemma Iic_snd_mono {r r' : ‚Ñù} (h_le : r ‚â§ r') : œÅ.Iic_snd r ‚â§ œÅ.Iic_snd r' :=
begin
  intros s hs,
  simp_rw Iic_snd_apply œÅ _ hs,
  refine measure_mono (prod_subset_prod_iff.mpr (or.inl ‚ü®subset_rfl, Iic_subset_Iic.mpr _‚ü©)),
  exact_mod_cast h_le,
end

lemma Iic_snd_le_fst (r : ‚Ñù) : œÅ.Iic_snd r ‚â§ œÅ.fst :=
begin
  intros s hs,
  simp_rw [fst_apply hs, Iic_snd_apply œÅ r hs],
  exact measure_mono (prod_subset_preimage_fst _ _),
end

lemma Iic_snd_ac_fst (r : ‚Ñù) : œÅ.Iic_snd r ‚â™ œÅ.fst :=
measure.absolutely_continuous_of_le (Iic_snd_le_fst œÅ r)

lemma is_finite_measure.Iic_snd {œÅ : measure (Œ± √ó ‚Ñù)} [is_finite_measure œÅ] (r : ‚Ñù) :
  is_finite_measure (œÅ.Iic_snd r) :=
is_finite_measure_of_le _ (Iic_snd_le_fst œÅ _)

lemma infi_Iic_snd_gt (t : ‚Ñö) {s : set Œ±} (hs : measurable_set s) [is_finite_measure œÅ] :
  (‚®Ö r : {r' : ‚Ñö // t < r'}, œÅ.Iic_snd r s) = œÅ.Iic_snd t s :=
begin
  simp_rw [œÅ.Iic_snd_apply _ hs],
  rw ‚Üê measure_Inter_eq_infi,
  { rw ‚Üê prod_Inter,
    congr' with x : 1,
    simp only [mem_Inter, mem_Iic, subtype.forall, subtype.coe_mk],
    refine ‚ü®Œª h, _, Œª h a hta, h.trans _‚ü©,
    { refine le_of_forall_lt_rat_imp_le (Œª q htq, h q _),
      exact_mod_cast htq, },
    { exact_mod_cast hta.le, }, },
  { exact Œª _, hs.prod measurable_set_Iic, },
  { refine monotone.directed_ge (Œª r r' hrr', prod_subset_prod_iff.mpr (or.inl ‚ü®subset_rfl, _‚ü©)),
    refine Iic_subset_Iic.mpr _,
    simp_rw coe_coe,
    exact_mod_cast hrr', },
  { exact ‚ü®‚ü®t+1, lt_add_one _‚ü©, measure_ne_top œÅ _‚ü©, },
end

lemma tendsto_Iic_snd_at_top {s : set Œ±} (hs : measurable_set s) :
  tendsto (Œª r : ‚Ñö, œÅ.Iic_snd r s) at_top (ùìù (œÅ.fst s)) :=
begin
  simp_rw [œÅ.Iic_snd_apply _ hs, fst_apply hs, ‚Üê prod_univ],
  rw [‚Üê real.Union_Iic_rat, prod_Union],
  refine tendsto_measure_Union (Œª r q hr_le_q x, _),
  simp only [mem_prod, mem_Iic, and_imp],
  refine Œª hxs hxr, ‚ü®hxs, hxr.trans _‚ü©,
  exact_mod_cast hr_le_q,
end

lemma tendsto_Iic_snd_at_bot [is_finite_measure œÅ] {s : set Œ±} (hs : measurable_set s) :
  tendsto (Œª r : ‚Ñö, œÅ.Iic_snd r s) at_bot (ùìù 0) :=
begin
  simp_rw [œÅ.Iic_snd_apply _ hs],
  have h_empty : œÅ (s √óÀ¢ ‚àÖ) = 0, by simp only [prod_empty, measure_empty],
  rw [‚Üê h_empty, ‚Üê real.Inter_Iic_rat, prod_Inter],
  suffices h_neg : tendsto (Œª r : ‚Ñö, œÅ (s √óÀ¢ Iic (‚Üë-r))) at_top (ùìù (œÅ (‚ãÇ r : ‚Ñö, s √óÀ¢ Iic (‚Üë-r)))),
  { have h_inter_eq : (‚ãÇ r : ‚Ñö, s √óÀ¢ Iic (‚Üë-r)) = (‚ãÇ r : ‚Ñö, s √óÀ¢ Iic (r : ‚Ñù)),
    { ext1 x,
      simp only [rat.cast_eq_id, id.def, mem_Inter, mem_prod, mem_Iic],
      refine ‚ü®Œª h i, ‚ü®(h i).1, _‚ü©, Œª h i, ‚ü®(h i).1, _‚ü©‚ü©; have h' := h (-i),
      { rw neg_neg at h', exact h'.2, },
      { exact h'.2, }, },
    rw h_inter_eq at h_neg,
    have h_fun_eq : (Œª (r : ‚Ñö), œÅ (s √óÀ¢ Iic (r : ‚Ñù))) = (Œª r, œÅ (s √óÀ¢ Iic ‚Üë(- -r))),
    { simp_rw neg_neg, },
    rw h_fun_eq,
    exact h_neg.comp tendsto_neg_at_bot_at_top, },
  refine tendsto_measure_Inter (Œª q, hs.prod measurable_set_Iic) _ ‚ü®0, measure_ne_top œÅ _‚ü©,
  refine Œª q r hqr, prod_subset_prod_iff.mpr (or.inl ‚ü®subset_rfl, Œª x hx, _‚ü©),
  simp only [rat.cast_neg, mem_Iic] at hx ‚ä¢,
  refine hx.trans (neg_le_neg _),
  exact_mod_cast hqr,
end

end measure_theory.measure

open measure_theory

namespace probability_theory

variables {Œ± Œ≤ Œπ : Type*} {mŒ± : measurable_space Œ±}

include mŒ±

local attribute [instance] measure_theory.measure.is_finite_measure.Iic_snd

/-! ### Auxiliary definitions

We build towards the definition of `probability_theory.cond_cdf`. We first define
`probability_theory.pre_cdf`, a function defined on `Œ± √ó ‚Ñö` with the properties of a cdf almost
everywhere. We then introduce `probability_theory.cond_cdf_rat`, a function on `Œ± √ó ‚Ñö` which has
the properties of a cdf for all `a : Œ±`. We finally extend to `‚Ñù`. -/

/-- `pre_cdf` is the Radon-Nikodym derivative of `œÅ.Iic_snd` with respect to `œÅ.fst` at each
`r : ‚Ñö`. This function `‚Ñö ‚Üí Œ± ‚Üí ‚Ñù‚â•0‚àû` is such that for almost all `a : Œ±`, the function `‚Ñö ‚Üí ‚Ñù‚â•0‚àû`
satisfies the properties of a cdf (monotone with limit 0 at -‚àû and 1 at +‚àû, right-continuous).

We define this function on `‚Ñö` and not `‚Ñù` because `‚Ñö` is countable, which allows us to prove
properties of the form `‚àÄ·µê a ‚àÇœÅ.fst, ‚àÄ q, P (pre_cdf q a)`, instead of the weaker
`‚àÄ q, ‚àÄ·µê a ‚àÇœÅ.fst, P (pre_cdf q a)`. -/
noncomputable
def pre_cdf (œÅ : measure (Œ± √ó ‚Ñù)) (r : ‚Ñö) : Œ± ‚Üí ‚Ñù‚â•0‚àû := measure.rn_deriv (œÅ.Iic_snd r) œÅ.fst

lemma measurable_pre_cdf {œÅ : measure (Œ± √ó ‚Ñù)} {r : ‚Ñö} : measurable (pre_cdf œÅ r) :=
measure.measurable_rn_deriv _ _

lemma with_density_pre_cdf (œÅ : measure (Œ± √ó ‚Ñù)) (r : ‚Ñö) [is_finite_measure œÅ] :
  œÅ.fst.with_density (pre_cdf œÅ r) = œÅ.Iic_snd r :=
measure.absolutely_continuous_iff_with_density_rn_deriv_eq.mp (measure.Iic_snd_ac_fst œÅ r)

lemma set_lintegral_pre_cdf_fst (œÅ : measure (Œ± √ó ‚Ñù)) (r : ‚Ñö) {s : set Œ±}
  (hs : measurable_set s) [is_finite_measure œÅ] :
  ‚à´‚Åª x in s, pre_cdf œÅ r x ‚àÇœÅ.fst = œÅ.Iic_snd r s :=
begin
  have : ‚àÄ r, ‚à´‚Åª x in s, pre_cdf œÅ r x ‚àÇœÅ.fst = ‚à´‚Åª x in s, (pre_cdf œÅ r * 1) x ‚àÇœÅ.fst,
  { simp only [mul_one, eq_self_iff_true, forall_const], },
  rw [this, ‚Üê set_lintegral_with_density_eq_set_lintegral_mul _ measurable_pre_cdf _ hs],
  { simp only [with_density_pre_cdf œÅ r, pi.one_apply, lintegral_one, measure.restrict_apply,
      measurable_set.univ, univ_inter], },
  { rw (_ : (1 : Œ± ‚Üí ‚Ñù‚â•0‚àû) = (Œª _, 1)),
    exacts [measurable_const, rfl], },
end

lemma monotone_pre_cdf (œÅ : measure (Œ± √ó ‚Ñù)) [is_finite_measure œÅ] :
  ‚àÄ·µê a ‚àÇœÅ.fst, monotone (Œª r, pre_cdf œÅ r a) :=
begin
  simp_rw [monotone, ae_all_iff],
  refine Œª r r' hrr', ae_le_of_forall_set_lintegral_le_of_sigma_finite
    measurable_pre_cdf measurable_pre_cdf (Œª s hs hs_fin, _),
  rw [set_lintegral_pre_cdf_fst œÅ r hs, set_lintegral_pre_cdf_fst œÅ r' hs],
  refine measure.Iic_snd_mono œÅ _ s hs,
  exact_mod_cast hrr',
end

lemma set_lintegral_infi_gt_pre_cdf (œÅ : measure (Œ± √ó ‚Ñù)) [is_finite_measure œÅ] (t : ‚Ñö)
  {s : set Œ±} (hs : measurable_set s) :
  ‚à´‚Åª x in s, ‚®Ö r : Ioi t, pre_cdf œÅ r x ‚àÇœÅ.fst = œÅ.Iic_snd t s :=
begin
  refine le_antisymm _ _,
  { have h : ‚àÄ q : Ioi t, ‚à´‚Åª x in s, ‚®Ö r : Ioi t, pre_cdf œÅ r x ‚àÇœÅ.fst ‚â§ œÅ.Iic_snd q s,
    { intros q,
      rw [coe_coe, ‚Üê set_lintegral_pre_cdf_fst œÅ _ hs],
      refine set_lintegral_mono_ae _ measurable_pre_cdf _,
      { exact measurable_infi (Œª _, measurable_pre_cdf), },
      { filter_upwards [monotone_pre_cdf] with a ha_mono,
        exact Œª _, infi_le _ q, }, },
    calc ‚à´‚Åª x in s, (‚®Ö (r : Ioi t), pre_cdf œÅ r x) ‚àÇœÅ.fst
        ‚â§ ‚®Ö q : Ioi t, œÅ.Iic_snd q s : le_infi h
    ... = œÅ.Iic_snd t s : measure.infi_Iic_snd_gt œÅ t hs, },
  { rw (set_lintegral_pre_cdf_fst œÅ t hs).symm,
    refine set_lintegral_mono_ae measurable_pre_cdf _ _,
    { exact measurable_infi (Œª _, measurable_pre_cdf), },
    { filter_upwards [monotone_pre_cdf] with a ha_mono,
      exact Œª _, le_infi (Œª r, ha_mono (le_of_lt r.prop)), }, },
end

lemma pre_cdf_le_one (œÅ : measure (Œ± √ó ‚Ñù)) [is_finite_measure œÅ] :
  ‚àÄ·µê a ‚àÇœÅ.fst, ‚àÄ r, pre_cdf œÅ r a ‚â§ 1 :=
begin
  rw ae_all_iff,
  refine Œª r, ae_le_of_forall_set_lintegral_le_of_sigma_finite measurable_pre_cdf
    measurable_const (Œª s hs hs_fin, _),
  rw set_lintegral_pre_cdf_fst œÅ r hs,
  simp only [pi.one_apply, lintegral_one, measure.restrict_apply, measurable_set.univ, univ_inter],
  exact measure.Iic_snd_le_fst œÅ r s hs,
end

lemma tendsto_lintegral_pre_cdf_at_top (œÅ : measure (Œ± √ó ‚Ñù)) [is_finite_measure œÅ] :
  tendsto (Œª r, ‚à´‚Åª a, pre_cdf œÅ r a ‚àÇœÅ.fst) at_top (ùìù (œÅ univ)) :=
begin
  convert œÅ.tendsto_Iic_snd_at_top measurable_set.univ,
  { ext1 r,
    rw [‚Üê set_lintegral_univ, set_lintegral_pre_cdf_fst œÅ _ measurable_set.univ], },
  { exact measure.fst_univ.symm, },
end

lemma tendsto_lintegral_pre_cdf_at_bot (œÅ : measure (Œ± √ó ‚Ñù)) [is_finite_measure œÅ] :
  tendsto (Œª r, ‚à´‚Åª a, pre_cdf œÅ r a ‚àÇœÅ.fst) at_bot (ùìù 0) :=
begin
  convert œÅ.tendsto_Iic_snd_at_bot measurable_set.univ,
  ext1 r,
  rw [‚Üê set_lintegral_univ, set_lintegral_pre_cdf_fst œÅ _ measurable_set.univ],
end

lemma tendsto_pre_cdf_at_top_one (œÅ : measure (Œ± √ó ‚Ñù)) [is_finite_measure œÅ] :
  ‚àÄ·µê a ‚àÇœÅ.fst, tendsto (Œª r, pre_cdf œÅ r a) at_top (ùìù 1) :=
begin
  -- We show first that `pre_cdf` has a limit almost everywhere. That limit has to be at most 1.
  -- We then show that the integral of `pre_cdf` tends to the integral of 1, and that it also tends
  -- to the integral of the limit. Since the limit is at most 1 and has same integral as 1, it is
  -- equal to 1 a.e.
  have h_mono := monotone_pre_cdf œÅ,
  have h_le_one := pre_cdf_le_one œÅ,
  -- `pre_cdf` has a limit a.e.
  have h_exists : ‚àÄ·µê a ‚àÇœÅ.fst, ‚àÉ l, tendsto (Œª r, pre_cdf œÅ r a) at_top (ùìù l),
  { filter_upwards [h_mono, h_le_one] with a ha_mono ha_le_one,
    have h_tendsto : tendsto (Œª r, pre_cdf œÅ r a) at_top at_top
      ‚à® ‚àÉ l, tendsto (Œª r, pre_cdf œÅ r a) at_top (ùìù l) := tendsto_of_monotone ha_mono,
    cases h_tendsto with h_absurd h_tendsto,
    { rw monotone.tendsto_at_top_at_top_iff ha_mono at h_absurd,
      obtain ‚ü®r, hr‚ü© := h_absurd 2,
      exact absurd (hr.trans (ha_le_one r)) ennreal.one_lt_two.not_le, },
    { exact h_tendsto, }, },
  classical,
  -- let `F` be the pointwise limit of `pre_cdf` where it exists, and 0 elsewhere.
  let F : Œ± ‚Üí ‚Ñù‚â•0‚àû := Œª a,
    if h : ‚àÉ l, tendsto (Œª r, pre_cdf œÅ r a) at_top (ùìù l) then h.some else 0,
  have h_tendsto_‚Ñö : ‚àÄ·µê a ‚àÇœÅ.fst, tendsto (Œª r, pre_cdf œÅ r a) at_top (ùìù (F a)),
  { filter_upwards [h_exists] with a ha,
    simp_rw [F, dif_pos ha],
    exact ha.some_spec },
  have h_tendsto_‚Ñï : ‚àÄ·µê a ‚àÇœÅ.fst, tendsto (Œª n : ‚Ñï, pre_cdf œÅ n a) at_top (ùìù (F a)),
  { filter_upwards [h_tendsto_‚Ñö] with a ha using ha.comp tendsto_coe_nat_at_top_at_top, },
  have hF_ae_meas : ae_measurable F œÅ.fst,
  { refine ae_measurable_of_tendsto_metrizable_ae _ (Œª n, _) h_tendsto_‚Ñö,
    exact measurable_pre_cdf.ae_measurable, },
  have hF_le_one : ‚àÄ·µê a ‚àÇœÅ.fst, F a ‚â§ 1,
  { filter_upwards [h_tendsto_‚Ñö, h_le_one] with a ha ha_le using le_of_tendsto' ha ha_le, },
  -- it suffices to show that the limit `F` is 1 a.e.
  suffices : ‚àÄ·µê a ‚àÇœÅ.fst, F a = 1,
  { filter_upwards [h_tendsto_‚Ñö, this] with a ha_tendsto ha_eq,
    rwa ha_eq at ha_tendsto, },
  -- since `F` is at most 1, proving that its integral is the same as the integral of 1 will tell
  -- us that `F` is 1 a.e.
  have h_lintegral_eq : ‚à´‚Åª a, F a ‚àÇœÅ.fst = ‚à´‚Åª a, 1 ‚àÇœÅ.fst,
  { have h_lintegral : tendsto (Œª r : ‚Ñï, ‚à´‚Åª a, pre_cdf œÅ r a ‚àÇœÅ.fst) at_top
      (ùìù (‚à´‚Åª a, F a ‚àÇœÅ.fst)),
    { refine lintegral_tendsto_of_tendsto_of_monotone  -- does this exist only for ‚Ñï?
        (Œª _, measurable_pre_cdf.ae_measurable) _ h_tendsto_‚Ñï,
      filter_upwards [h_mono] with a ha,
      refine Œª n m hnm, ha _,
      exact_mod_cast hnm, },
    have h_lintegral' : tendsto (Œª r : ‚Ñï, ‚à´‚Åª a, pre_cdf œÅ r a ‚àÇœÅ.fst) at_top
      (ùìù (‚à´‚Åª a, 1 ‚àÇœÅ.fst)),
    { rw [lintegral_one, measure.fst_univ],
      exact (tendsto_lintegral_pre_cdf_at_top œÅ).comp tendsto_coe_nat_at_top_at_top, },
    exact tendsto_nhds_unique h_lintegral h_lintegral', },
  have : ‚à´‚Åª a, (1 - F a) ‚àÇœÅ.fst = 0,
  { rw [lintegral_sub' hF_ae_meas _ hF_le_one, h_lintegral_eq, tsub_self],
    calc ‚à´‚Åª a, F a ‚àÇœÅ.fst = ‚à´‚Åª a, 1 ‚àÇœÅ.fst : h_lintegral_eq
    ... = œÅ.fst univ : lintegral_one
    ... = œÅ univ : measure.fst_univ
    ... ‚â† ‚àû : measure_ne_top œÅ _, },
  rw lintegral_eq_zero_iff' (ae_measurable_const.sub hF_ae_meas) at this,
  filter_upwards [this, hF_le_one] with ha h_one_sub_eq_zero h_le_one,
  rw [pi.zero_apply, tsub_eq_zero_iff_le] at h_one_sub_eq_zero,
  exact le_antisymm h_le_one h_one_sub_eq_zero,
end

lemma tendsto_pre_cdf_at_bot_zero (œÅ : measure (Œ± √ó ‚Ñù)) [is_finite_measure œÅ] :
  ‚àÄ·µê a ‚àÇœÅ.fst, tendsto (Œª r, pre_cdf œÅ r a) at_bot (ùìù 0) :=
begin
  -- We show first that `pre_cdf` has a limit in ‚Ñù‚â•0‚àû almost everywhere.
  -- We then show that the integral of `pre_cdf` tends to 0, and that it also tends
  -- to the integral of the limit. Since the limit is has integral 0, it is equal to 0 a.e.
  suffices : ‚àÄ·µê a ‚àÇœÅ.fst, tendsto (Œª r, pre_cdf œÅ (-r) a) at_top (ùìù 0),
  { filter_upwards [this] with a ha,
    have h_eq_neg : (Œª (r : ‚Ñö), pre_cdf œÅ r a) = (Œª (r : ‚Ñö), pre_cdf œÅ (- -r) a),
    { simp_rw neg_neg, },
    rw h_eq_neg,
    exact ha.comp tendsto_neg_at_bot_at_top, },
  have h_exists : ‚àÄ·µê a ‚àÇœÅ.fst, ‚àÉ l, tendsto (Œª r, pre_cdf œÅ (-r) a) at_top (ùìù l),
  { filter_upwards [monotone_pre_cdf œÅ] with a ha,
    have h_anti : antitone (Œª r, pre_cdf œÅ (-r) a) := Œª p q hpq, ha (neg_le_neg hpq),
    have h_tendsto : tendsto (Œª r, pre_cdf œÅ (-r) a) at_top at_bot
      ‚à® ‚àÉ l, tendsto (Œª r, pre_cdf œÅ (-r) a) at_top (ùìù l) := tendsto_of_antitone h_anti,
    cases h_tendsto with h_bot h_tendsto,
    { exact ‚ü®0, tendsto.mono_right h_bot at_bot_le_nhds_bot‚ü©, },
    { exact h_tendsto, }, },
  classical,
  let F : Œ± ‚Üí ‚Ñù‚â•0‚àû := Œª a,
    if h : ‚àÉ l, tendsto (Œª r, pre_cdf œÅ (-r) a) at_top (ùìù l) then h.some else 0,
  have h_tendsto : ‚àÄ·µê a ‚àÇœÅ.fst, tendsto (Œª r, pre_cdf œÅ (-r) a) at_top (ùìù (F a)),
  { filter_upwards [h_exists] with a ha,
    simp_rw [F, dif_pos ha],
    exact ha.some_spec, },
  suffices h_lintegral_eq : ‚à´‚Åª a, F a ‚àÇœÅ.fst = 0,
  { have hF_ae_meas : ae_measurable F œÅ.fst,
    { refine ae_measurable_of_tendsto_metrizable_ae _ (Œª n, _) h_tendsto,
      exact measurable_pre_cdf.ae_measurable, },
    rw [lintegral_eq_zero_iff' hF_ae_meas] at h_lintegral_eq,
    filter_upwards [h_tendsto, h_lintegral_eq] with a ha_tendsto ha_eq,
    rwa ha_eq at ha_tendsto, },
  have h_lintegral : tendsto (Œª r, ‚à´‚Åª a, pre_cdf œÅ (-r) a ‚àÇœÅ.fst) at_top (ùìù (‚à´‚Åª a, F a ‚àÇœÅ.fst)),
  { refine tendsto_lintegral_filter_of_dominated_convergence (Œª _, 1)
      (eventually_of_forall (Œª _, measurable_pre_cdf)) (eventually_of_forall (Œª _, _))
      _ h_tendsto,
    { filter_upwards [pre_cdf_le_one œÅ] with a ha using ha _, },
    { rw lintegral_one,
      exact measure_ne_top _ _, }, },
  have h_lintegral' : tendsto (Œª r, ‚à´‚Åª a, pre_cdf œÅ (-r) a ‚àÇœÅ.fst) at_top (ùìù 0),
  { have h_lintegral_eq : (Œª r, ‚à´‚Åª a, pre_cdf œÅ (-r) a ‚àÇœÅ.fst) = Œª r, œÅ (univ √óÀ¢ Iic (-r)),
    { ext1 n,
      rw [‚Üê set_lintegral_univ, set_lintegral_pre_cdf_fst œÅ _ measurable_set.univ,
        measure.Iic_snd_univ],
      norm_cast, },
    rw h_lintegral_eq,
    have h_zero_eq_measure_Inter : (0 : ‚Ñù‚â•0‚àû) = œÅ (‚ãÇ r : ‚Ñö, univ √óÀ¢ Iic (-r)),
    { suffices : (‚ãÇ r : ‚Ñö, Iic (-(r : ‚Ñù))) = ‚àÖ,
      { rwa [‚Üê prod_Inter, this, prod_empty, measure_empty], },
      ext1 x,
      simp only [mem_Inter, mem_Iic, mem_empty_iff_false, iff_false, not_forall, not_le],
      simp_rw neg_lt,
      exact exists_rat_gt _, },
    rw h_zero_eq_measure_Inter,
    refine tendsto_measure_Inter (Œª n, measurable_set.univ.prod measurable_set_Iic)
      (Œª i j hij x, _) ‚ü®0, measure_ne_top œÅ _‚ü©,
    simp only [mem_prod, mem_univ, mem_Iic, true_and],
    refine Œª hxj, hxj.trans (neg_le_neg _),
    exact_mod_cast hij, },
  exact tendsto_nhds_unique h_lintegral h_lintegral',
end

lemma inf_gt_pre_cdf (œÅ : measure (Œ± √ó ‚Ñù)) [is_finite_measure œÅ] :
  ‚àÄ·µê a ‚àÇœÅ.fst, ‚àÄ t : ‚Ñö, (‚®Ö r : Ioi t, pre_cdf œÅ r a) = pre_cdf œÅ t a :=
begin
  rw ae_all_iff,
  refine Œª t, ae_eq_of_forall_set_lintegral_eq_of_sigma_finite _ measurable_pre_cdf _,
  { exact measurable_infi (Œª i, measurable_pre_cdf), },
  intros s hs hs_fin,
  rw [set_lintegral_infi_gt_pre_cdf œÅ t hs, set_lintegral_pre_cdf_fst œÅ t hs],
end


section has_cond_cdf

/-- A product measure on `Œ± √ó ‚Ñù` is said to have a conditional cdf at `a : Œ±` if `pre_cdf` is
monotone with limit 0 at -‚àû and 1 at +‚àû, and is right continuous.
This property holds almost everywhere (see `has_cond_cdf_ae`). -/
structure has_cond_cdf (œÅ : measure (Œ± √ó ‚Ñù)) (a : Œ±) : Prop :=
(mono : monotone (Œª r, pre_cdf œÅ r a))
(le_one : ‚àÄ r, pre_cdf œÅ r a ‚â§ 1)
(tendsto_at_top_one : tendsto (Œª r, pre_cdf œÅ r a) at_top (ùìù 1))
(tendsto_at_bot_zero : tendsto (Œª r, pre_cdf œÅ r a) at_bot (ùìù 0))
(infi_rat_gt_eq : ‚àÄ t : ‚Ñö, (‚®Ö r : Ioi t, pre_cdf œÅ r a) = pre_cdf œÅ t a)

lemma has_cond_cdf_ae (œÅ : measure (Œ± √ó ‚Ñù)) [is_finite_measure œÅ] :
  ‚àÄ·µê a ‚àÇœÅ.fst, has_cond_cdf œÅ a :=
begin
  filter_upwards [monotone_pre_cdf œÅ, pre_cdf_le_one œÅ, tendsto_pre_cdf_at_top_one œÅ,
    tendsto_pre_cdf_at_bot_zero œÅ, inf_gt_pre_cdf œÅ] with a h1 h2 h3 h4 h5,
  exact ‚ü®h1, h2, h3, h4, h5‚ü©,
end

/-- A measurable set of elements of `Œ±` such that `œÅ` has a conditional cdf at all
`a ‚àà cond_cdf_set`. -/
def cond_cdf_set (œÅ : measure (Œ± √ó ‚Ñù)) : set Œ± := (to_measurable œÅ.fst {b | ¬¨ has_cond_cdf œÅ b})·∂ú

lemma measurable_set_cond_cdf_set (œÅ : measure (Œ± √ó ‚Ñù)) : measurable_set (cond_cdf_set œÅ) :=
(measurable_set_to_measurable _ _).compl

lemma has_cond_cdf_of_mem_cond_cdf_set {œÅ : measure (Œ± √ó ‚Ñù)} {a : Œ±} (h : a ‚àà cond_cdf_set œÅ) :
  has_cond_cdf œÅ a :=
begin
  rw [cond_cdf_set, mem_compl_iff] at h,
  have h_ss := subset_to_measurable œÅ.fst {b | ¬¨ has_cond_cdf œÅ b},
  by_contra ha,
  exact h (h_ss ha),
end

lemma mem_cond_cdf_set_ae (œÅ : measure (Œ± √ó ‚Ñù)) [is_finite_measure œÅ] :
  ‚àÄ·µê a ‚àÇœÅ.fst, a ‚àà cond_cdf_set œÅ :=
begin
  simp_rw [ae_iff, cond_cdf_set, not_mem_compl_iff, set_of_mem_eq, measure_to_measurable],
  exact has_cond_cdf_ae œÅ,
end

end has_cond_cdf


open_locale classical

/-- Conditional cdf of the measure given the value on `Œ±`, restricted to the rationals.
It is defined to be `pre_cdf` if `a ‚àà cond_cdf_set`, and a default cdf-like function
otherwise. This is an auxiliary definition used to define `cond_cdf`. -/
noncomputable
def cond_cdf_rat (œÅ : measure (Œ± √ó ‚Ñù)) : Œ± ‚Üí ‚Ñö ‚Üí ‚Ñù :=
Œª a, if a ‚àà cond_cdf_set œÅ then (Œª r, (pre_cdf œÅ r a).to_real) else (Œª r, if r < 0 then 0 else 1)

lemma cond_cdf_rat_of_not_mem (œÅ : measure (Œ± √ó ‚Ñù)) (a : Œ±) (h : a ‚àâ cond_cdf_set œÅ) {r : ‚Ñö} :
  cond_cdf_rat œÅ a r = if r < 0 then 0 else 1 :=
by simp only [cond_cdf_rat, h, if_false]

lemma cond_cdf_rat_of_mem (œÅ : measure (Œ± √ó ‚Ñù)) (a : Œ±) (h : a ‚àà cond_cdf_set œÅ) (r : ‚Ñö) :
  cond_cdf_rat œÅ a r = (pre_cdf œÅ r a).to_real :=
by simp only [cond_cdf_rat, h, if_true]

lemma monotone_cond_cdf_rat (œÅ : measure (Œ± √ó ‚Ñù)) (a : Œ±) :
  monotone (cond_cdf_rat œÅ a) :=
begin
  by_cases h : a ‚àà cond_cdf_set œÅ,
  { simp only [cond_cdf_rat, h, if_true, forall_const, and_self],
    intros r r' hrr',
    have h' := has_cond_cdf_of_mem_cond_cdf_set h,
    have h_ne_top : ‚àÄ r, pre_cdf œÅ r a ‚â† ‚àû := Œª r, ((h'.le_one r).trans_lt ennreal.one_lt_top).ne,
    rw ennreal.to_real_le_to_real (h_ne_top _) (h_ne_top _),
    exact h'.1 hrr', },
  { simp only [cond_cdf_rat, h, if_false],
    intros x y hxy,
    dsimp only,
    split_ifs,
    exacts [le_rfl, zero_le_one, absurd (hxy.trans_lt h_2) h_1, le_rfl], },
end

lemma measurable_cond_cdf_rat (œÅ : measure (Œ± √ó ‚Ñù)) (q : ‚Ñö) :
  measurable (Œª a, cond_cdf_rat œÅ a q) :=
begin
  simp_rw [cond_cdf_rat, ite_apply],
  exact measurable.ite (measurable_set_cond_cdf_set œÅ) measurable_pre_cdf.ennreal_to_real
    measurable_const,
end

lemma cond_cdf_rat_nonneg (œÅ : measure (Œ± √ó ‚Ñù)) (a : Œ±) (r : ‚Ñö) :
  0 ‚â§ cond_cdf_rat œÅ a r :=
by { unfold cond_cdf_rat, split_ifs, exacts [ennreal.to_real_nonneg, le_rfl, zero_le_one], }

lemma cond_cdf_rat_le_one (œÅ : measure (Œ± √ó ‚Ñù)) (a : Œ±) (r : ‚Ñö) :
  cond_cdf_rat œÅ a r ‚â§ 1 :=
begin
  unfold cond_cdf_rat,
  split_ifs with h,
  { refine ennreal.to_real_le_of_le_of_real zero_le_one _,
    rw ennreal.of_real_one,
    exact (has_cond_cdf_of_mem_cond_cdf_set h).le_one r, },
  exacts [zero_le_one, le_rfl],
end

lemma tendsto_cond_cdf_rat_at_bot (œÅ : measure (Œ± √ó ‚Ñù)) (a : Œ±) :
  tendsto (cond_cdf_rat œÅ a) at_bot (ùìù 0) :=
begin
  unfold cond_cdf_rat,
  split_ifs with h,
  { rw [‚Üê ennreal.zero_to_real, ennreal.tendsto_to_real_iff],
    { exact (has_cond_cdf_of_mem_cond_cdf_set h).tendsto_at_bot_zero, },
    { have h' := has_cond_cdf_of_mem_cond_cdf_set h,
      exact Œª r, ((h'.le_one r).trans_lt ennreal.one_lt_top).ne, },
    { exact ennreal.zero_ne_top, }, },
  { refine (tendsto_congr' _).mp tendsto_const_nhds,
    rw [eventually_eq, eventually_at_bot],
    refine ‚ü®-1, Œª q hq, (if_pos (hq.trans_lt _)).symm‚ü©,
    linarith, },
end

lemma tendsto_cond_cdf_rat_at_top (œÅ : measure (Œ± √ó ‚Ñù)) (a : Œ±) :
  tendsto (cond_cdf_rat œÅ a) at_top (ùìù 1) :=
begin
  unfold cond_cdf_rat,
  split_ifs with h,
  { have h' := has_cond_cdf_of_mem_cond_cdf_set h,
    rw [‚Üê ennreal.one_to_real, ennreal.tendsto_to_real_iff],
    { exact h'.tendsto_at_top_one, },
    { exact Œª r, ((h'.le_one r).trans_lt ennreal.one_lt_top).ne, },
    { exact ennreal.one_ne_top, }, },
  { refine (tendsto_congr' _).mp tendsto_const_nhds,
    rw [eventually_eq, eventually_at_top],
    exact ‚ü®0, Œª q hq, (if_neg (not_lt.mpr hq)).symm‚ü©, },
end

lemma cond_cdf_rat_ae_eq (œÅ : measure (Œ± √ó ‚Ñù)) [is_finite_measure œÅ] (r : ‚Ñö) :
  (Œª a, cond_cdf_rat œÅ a r) =·µê[œÅ.fst] Œª a, (pre_cdf œÅ r a).to_real :=
by filter_upwards [mem_cond_cdf_set_ae œÅ] with a ha using cond_cdf_rat_of_mem œÅ a ha r

lemma of_real_cond_cdf_rat_ae_eq (œÅ : measure (Œ± √ó ‚Ñù)) [is_finite_measure œÅ] (r : ‚Ñö) :
  (Œª a, ennreal.of_real (cond_cdf_rat œÅ a r)) =·µê[œÅ.fst] pre_cdf œÅ r :=
begin
  filter_upwards [cond_cdf_rat_ae_eq œÅ r, pre_cdf_le_one œÅ] with a ha ha_le_one,
  rw [ha, ennreal.of_real_to_real],
  exact ((ha_le_one r).trans_lt ennreal.one_lt_top).ne,
end

lemma inf_gt_cond_cdf_rat (œÅ : measure (Œ± √ó ‚Ñù)) (a : Œ±) (t : ‚Ñö) :
  (‚®Ö r : Ioi t, cond_cdf_rat œÅ a r) = cond_cdf_rat œÅ a t :=
begin
  by_cases ha : a ‚àà cond_cdf_set œÅ,
  { simp_rw cond_cdf_rat_of_mem œÅ a ha,
    have ha' := has_cond_cdf_of_mem_cond_cdf_set ha,
    rw ‚Üê ennreal.to_real_infi,
    { suffices : (‚®Ö (i : ‚Ü•(Ioi t)), pre_cdf œÅ ‚Üëi a) = pre_cdf œÅ t a, by rw this,
      rw ‚Üê ha'.infi_rat_gt_eq, },
    { exact Œª r, ((ha'.le_one r).trans_lt ennreal.one_lt_top).ne, }, },
  { simp_rw cond_cdf_rat_of_not_mem œÅ a ha,
    have h_bdd : bdd_below (range (Œª (r : ‚Ü•(Ioi t)), ite ((r : ‚Ñö) < 0) (0 : ‚Ñù) 1)),
    { refine ‚ü®0, Œª x hx, _‚ü©,
      obtain ‚ü®y, rfl‚ü© := mem_range.mpr hx,
      dsimp only,
      split_ifs,
      exacts [le_rfl, zero_le_one], },
    split_ifs with h h,
    { refine le_antisymm _ (le_cinfi (Œª x, _)),
      { obtain ‚ü®q, htq, hq_neg‚ü© : ‚àÉ q, t < q ‚àß q < 0,
        { refine ‚ü®t/2, _, _‚ü©,
          { linarith, },
          { linarith, }, },
        refine (cinfi_le h_bdd ‚ü®q, htq‚ü©).trans _,
        rw if_pos,
        rwa subtype.coe_mk, },
      { split_ifs,
        exacts [le_rfl, zero_le_one], }, },
    { refine le_antisymm _ _,
      { refine (cinfi_le h_bdd ‚ü®t+1, lt_add_one t‚ü©).trans _,
        split_ifs,
        exacts [zero_le_one, le_rfl], },
      { refine le_cinfi (Œª x, _),
        rw if_neg,
        rw not_lt at h ‚ä¢,
        exact h.trans (mem_Ioi.mp x.prop).le, }, }, },
end

/-- Conditional cdf of the measure given the value on `Œ±`, as a plain function. This is an auxiliary
definition used to define `cond_cdf`. -/
@[irreducible] noncomputable
def cond_cdf' (œÅ : measure (Œ± √ó ‚Ñù)) : Œ± ‚Üí ‚Ñù ‚Üí ‚Ñù :=
Œª a t, ‚®Ö r : {r' : ‚Ñö // t < r'}, cond_cdf_rat œÅ a r

lemma cond_cdf'_def {œÅ : measure (Œ± √ó ‚Ñù)} {a : Œ±} {x : ‚Ñù} :
  cond_cdf' œÅ a x = ‚®Ö r : {r : ‚Ñö // x < r}, cond_cdf_rat œÅ a r :=
by rw cond_cdf'

lemma cond_cdf'_eq_cond_cdf_rat (œÅ : measure (Œ± √ó ‚Ñù)) (a : Œ±) (r : ‚Ñö) :
  cond_cdf' œÅ a r = cond_cdf_rat œÅ a r :=
begin
  rw [‚Üê inf_gt_cond_cdf_rat œÅ a r, cond_cdf'],
  refine equiv.infi_congr _ _,
  { exact
    { to_fun := Œª t, ‚ü®t.1, by exact_mod_cast t.2‚ü©,
      inv_fun := Œª t, ‚ü®t.1, by exact_mod_cast t.2‚ü©,
      left_inv := Œª t, by simp only [subtype.val_eq_coe, subtype.coe_eta],
      right_inv := Œª t, by simp only [subtype.val_eq_coe, subtype.coe_eta], }, },
  { intro t,
    simp only [subtype.val_eq_coe, equiv.coe_fn_mk, subtype.coe_mk], },
end

lemma cond_cdf'_nonneg (œÅ : measure (Œ± √ó ‚Ñù)) (a : Œ±) (r : ‚Ñù) :
  0 ‚â§ cond_cdf' œÅ a r :=
begin
  haveI : nonempty {r' : ‚Ñö // r < ‚Üër'},
  { obtain ‚ü®r, hrx‚ü© := exists_rat_gt r,
    exact ‚ü®‚ü®r, hrx‚ü©‚ü©, },
  rw cond_cdf'_def,
  exact le_cinfi (Œª r', cond_cdf_rat_nonneg œÅ a _),
end

lemma bdd_below_range_cond_cdf_rat_gt (œÅ : measure (Œ± √ó ‚Ñù)) (a : Œ±) (x : ‚Ñù) :
  bdd_below (range (Œª (r : {r' : ‚Ñö // x < ‚Üër'}), cond_cdf_rat œÅ a r)) :=
by { refine ‚ü®0, Œª z, _‚ü©, rintros ‚ü®u, rfl‚ü©, exact cond_cdf_rat_nonneg œÅ a _, }

lemma monotone_cond_cdf' (œÅ : measure (Œ± √ó ‚Ñù)) (a : Œ±) : monotone (cond_cdf' œÅ a) :=
begin
  intros x y hxy,
  haveI : nonempty {r' : ‚Ñö // y < ‚Üër'},
  { obtain ‚ü®r, hrx‚ü© := exists_rat_gt y,
    exact ‚ü®‚ü®r, hrx‚ü©‚ü©, },
  simp_rw cond_cdf'_def,
  refine le_cinfi (Œª r, (cinfi_le _ _).trans_eq _),
  { exact ‚ü®r.1, hxy.trans_lt r.prop‚ü©, },
  { exact bdd_below_range_cond_cdf_rat_gt œÅ a x, },
  { refl, },
end

lemma continuous_within_at_cond_cdf'_Ici (œÅ : measure (Œ± √ó ‚Ñù)) (a : Œ±) (x : ‚Ñù) :
  continuous_within_at (cond_cdf' œÅ a) (Ici x) x :=
begin
  rw ‚Üê continuous_within_at_Ioi_iff_Ici,
  convert monotone.tendsto_nhds_within_Ioi (monotone_cond_cdf' œÅ a) x,
  rw Inf_image',
  have h' : (‚®Ö r : Ioi x, cond_cdf' œÅ a r) = ‚®Ö r : {r' : ‚Ñö // x < r'}, cond_cdf' œÅ a r,
  { refine infi_Ioi_eq_infi_rat_gt x _ (monotone_cond_cdf' œÅ a),
    refine ‚ü®0, Œª z, _‚ü©,
    rintros ‚ü®u, hux, rfl‚ü©,
    exact cond_cdf'_nonneg œÅ a u, },
  have h'' : (‚®Ö r : {r' : ‚Ñö // x < r'}, cond_cdf' œÅ a r)
    = ‚®Ö r : {r' : ‚Ñö // x < r'}, cond_cdf_rat œÅ a r,
  { congr' with r,
    exact cond_cdf'_eq_cond_cdf_rat œÅ a r, },
  rw [h', h'', continuous_within_at],
  congr,
  exact cond_cdf'_def,
end

/-! ### Conditional cdf -/

/-- Conditional cdf of the measure given the value on `Œ±`, as a Stieltjes function. -/
noncomputable
def cond_cdf (œÅ : measure (Œ± √ó ‚Ñù)) (a : Œ±) : stieltjes_function :=
{ to_fun := cond_cdf' œÅ a,
  mono' := monotone_cond_cdf' œÅ a,
  right_continuous' := Œª x, continuous_within_at_cond_cdf'_Ici œÅ a x, }

lemma cond_cdf_eq_cond_cdf_rat (œÅ : measure (Œ± √ó ‚Ñù)) (a : Œ±) (r : ‚Ñö) :
  cond_cdf œÅ a r = cond_cdf_rat œÅ a r :=
cond_cdf'_eq_cond_cdf_rat œÅ a r

/-- The conditional cdf is non-negative for all `a : Œ±`. -/
lemma cond_cdf_nonneg (œÅ : measure (Œ± √ó ‚Ñù)) (a : Œ±) (r : ‚Ñù) :
  0 ‚â§ cond_cdf œÅ a r :=
cond_cdf'_nonneg œÅ a r

/-- The conditional cdf is lower or equal to 1 for all `a : Œ±`. -/
lemma cond_cdf_le_one (œÅ : measure (Œ± √ó ‚Ñù)) (a : Œ±) (x : ‚Ñù) :
  cond_cdf œÅ a x ‚â§ 1 :=
begin
  obtain ‚ü®r, hrx‚ü© := exists_rat_gt x,
  rw ‚Üê stieltjes_function.infi_rat_gt_eq,
  simp_rw [coe_coe, cond_cdf_eq_cond_cdf_rat],
  refine cinfi_le_of_le (bdd_below_range_cond_cdf_rat_gt œÅ a x) _ (cond_cdf_rat_le_one _ _ _),
  exact ‚ü®r, hrx‚ü©,
end

/-- The conditional cdf tends to 0 at -‚àû for all `a : Œ±`. -/
lemma tendsto_cond_cdf_at_bot (œÅ : measure (Œ± √ó ‚Ñù)) (a : Œ±) :
  tendsto (cond_cdf œÅ a) at_bot (ùìù 0) :=
begin
  have h_exists : ‚àÄ x : ‚Ñù, ‚àÉ q : ‚Ñö, x < q ‚àß ‚Üëq < x + 1 := Œª x, exists_rat_btwn (lt_add_one x),
  let qs : ‚Ñù ‚Üí ‚Ñö := Œª x, (h_exists x).some,
  have hqs_tendsto : tendsto qs at_bot at_bot,
  { rw tendsto_at_bot_at_bot,
    refine Œª q, ‚ü®q - 1, Œª y hy, _‚ü©,
    have h_le : ‚Üë(qs y) ‚â§ (q : ‚Ñù) - 1 + 1 :=
      ((h_exists y).some_spec.2.le).trans (add_le_add hy le_rfl),
    rw sub_add_cancel at h_le,
    exact_mod_cast h_le, },
  refine tendsto_of_tendsto_of_tendsto_of_le_of_le tendsto_const_nhds
    ((tendsto_cond_cdf_rat_at_bot œÅ a).comp hqs_tendsto) (cond_cdf_nonneg œÅ a) (Œª x, _),
  rw [function.comp_apply, ‚Üê cond_cdf_eq_cond_cdf_rat],
  exact (cond_cdf œÅ a).mono (h_exists x).some_spec.1.le,
end

/-- The conditional cdf tends to 1 at +‚àû for all `a : Œ±`. -/
lemma tendsto_cond_cdf_at_top (œÅ : measure (Œ± √ó ‚Ñù)) (a : Œ±) :
  tendsto (cond_cdf œÅ a) at_top (ùìù 1) :=
begin
  have h_exists : ‚àÄ x : ‚Ñù, ‚àÉ q : ‚Ñö, x-1 < q ‚àß ‚Üëq < x := Œª x, exists_rat_btwn (sub_one_lt x),
  let qs : ‚Ñù ‚Üí ‚Ñö := Œª x, (h_exists x).some,
  have hqs_tendsto : tendsto qs at_top at_top,
  { rw tendsto_at_top_at_top,
    refine Œª q, ‚ü®q + 1, Œª y hy, _‚ü©,
    have h_le : y - 1 ‚â§ qs y := (h_exists y).some_spec.1.le,
    rw sub_le_iff_le_add at h_le,
    exact_mod_cast le_of_add_le_add_right (hy.trans h_le),},
  refine tendsto_of_tendsto_of_tendsto_of_le_of_le
    ((tendsto_cond_cdf_rat_at_top œÅ a).comp hqs_tendsto) tendsto_const_nhds _ (cond_cdf_le_one œÅ a),
  intro x,
  rw [function.comp_apply, ‚Üê cond_cdf_eq_cond_cdf_rat],
  exact (cond_cdf œÅ a).mono (le_of_lt (h_exists x).some_spec.2),
end

lemma cond_cdf_ae_eq (œÅ : measure (Œ± √ó ‚Ñù)) [is_finite_measure œÅ] (r : ‚Ñö) :
  (Œª a, cond_cdf œÅ a r) =·µê[œÅ.fst] Œª a, (pre_cdf œÅ r a).to_real :=
by filter_upwards [mem_cond_cdf_set_ae œÅ] with a ha
  using (cond_cdf_eq_cond_cdf_rat œÅ a r).trans (cond_cdf_rat_of_mem œÅ a ha r)

lemma of_real_cond_cdf_ae_eq (œÅ : measure (Œ± √ó ‚Ñù)) [is_finite_measure œÅ] (r : ‚Ñö) :
  (Œª a, ennreal.of_real (cond_cdf œÅ a r)) =·µê[œÅ.fst] pre_cdf œÅ r :=
begin
  filter_upwards [cond_cdf_ae_eq œÅ r, pre_cdf_le_one œÅ] with a ha ha_le_one,
  rw [ha, ennreal.of_real_to_real],
  exact ((ha_le_one r).trans_lt ennreal.one_lt_top).ne,
end

/-- The conditional cdf is a measurable function of `a : Œ±` for all `x : ‚Ñù`. -/
lemma measurable_cond_cdf (œÅ : measure (Œ± √ó ‚Ñù)) (x : ‚Ñù) :
  measurable (Œª a, cond_cdf œÅ a x) :=
begin
  have : (Œª a, cond_cdf œÅ a x) = Œª a, (‚®Ö (r : {r' // x < ‚Üër'}), cond_cdf_rat œÅ a ‚Üër),
  { ext1 a,
    rw ‚Üê stieltjes_function.infi_rat_gt_eq,
    congr' with q,
    rw [coe_coe, cond_cdf_eq_cond_cdf_rat], },
  rw this,
  exact measurable_cinfi (Œª q, measurable_cond_cdf_rat œÅ q)
    (Œª a, bdd_below_range_cond_cdf_rat_gt œÅ a _),
end

/-- Auxiliary lemma for `set_lintegral_cond_cdf`. -/
lemma set_lintegral_cond_cdf_rat (œÅ : measure (Œ± √ó ‚Ñù)) [is_finite_measure œÅ] (r : ‚Ñö)
  {s : set Œ±} (hs : measurable_set s) :
  ‚à´‚Åª a in s, ennreal.of_real (cond_cdf œÅ a r) ‚àÇœÅ.fst = œÅ (s √óÀ¢ Iic r) :=
begin
  have : ‚àÄ·µê a ‚àÇœÅ.fst, a ‚àà s ‚Üí ennreal.of_real (cond_cdf œÅ a r) = pre_cdf œÅ r a,
  { filter_upwards [of_real_cond_cdf_ae_eq œÅ r] with a ha using Œª _, ha, },
  rw [set_lintegral_congr_fun hs this, set_lintegral_pre_cdf_fst œÅ r hs],
  exact œÅ.Iic_snd_apply r hs,
end

lemma set_lintegral_cond_cdf (œÅ : measure (Œ± √ó ‚Ñù)) [is_finite_measure œÅ] (x : ‚Ñù)
  {s : set Œ±} (hs : measurable_set s) :
  ‚à´‚Åª a in s, ennreal.of_real (cond_cdf œÅ a x) ‚àÇœÅ.fst = œÅ (s √óÀ¢ Iic x) :=
begin
  -- We have the result for `x : ‚Ñö` thanks to `set_lintegral_cond_cdf_rat`. We use the equality
  -- `cond_cdf œÅ a x = ‚®Ö r : {r' : ‚Ñö // x < r'}, cond_cdf œÅ a r` and a monotone convergence
  -- argument to extend it to the reals.
  by_cases hœÅ_zero : œÅ.fst.restrict s = 0,
  { rw [hœÅ_zero, lintegral_zero_measure],
    refine le_antisymm (zero_le _) _,
    calc œÅ (s √óÀ¢ Iic x)
        ‚â§ œÅ (prod.fst ‚Åª¬π' s) : measure_mono (prod_subset_preimage_fst s (Iic x))
    ... = œÅ.fst s : by rw [measure.fst_apply hs]
    ... = œÅ.fst.restrict s univ : by rw measure.restrict_apply_univ
    ... = 0 : by simp only [hœÅ_zero, measure.coe_zero, pi.zero_apply], },
  have h : ‚à´‚Åª a in s, ennreal.of_real (cond_cdf œÅ a x) ‚àÇœÅ.fst
    = ‚à´‚Åª a in s, ennreal.of_real (‚®Ö r : {r' : ‚Ñö // x < r'}, cond_cdf œÅ a r) ‚àÇœÅ.fst,
  { congr' with a : 1,
    rw ‚Üê (cond_cdf œÅ a).infi_rat_gt_eq x, },
  haveI h_nonempty : nonempty {r' : ‚Ñö // x < ‚Üër'},
  { obtain ‚ü®r, hrx‚ü© := exists_rat_gt x,
    exact ‚ü®‚ü®r, hrx‚ü©‚ü©, },
  rw h,
  simp_rw ennreal.of_real_cinfi,
  have h_coe : ‚àÄ b : {r' : ‚Ñö // x < ‚Üër'}, (b : ‚Ñù) = ((b : ‚Ñö) : ‚Ñù) := Œª _, by congr,
  rw lintegral_infi_directed_of_measurable hœÅ_zero
    (Œª q : {r' : ‚Ñö // x < ‚Üër'}, (measurable_cond_cdf œÅ q).ennreal_of_real),
  rotate,
  { intro b,
    simp_rw h_coe,
    rw [set_lintegral_cond_cdf_rat œÅ _ hs],
    exact measure_ne_top œÅ _, },
  { refine monotone.directed_ge (Œª i j hij a, ennreal.of_real_le_of_real ((cond_cdf œÅ a).mono _)),
    rw [h_coe, h_coe],
    exact_mod_cast hij, },
  simp_rw [h_coe, set_lintegral_cond_cdf_rat œÅ _ hs],
  rw ‚Üê measure_Inter_eq_infi,
  { rw ‚Üê prod_Inter,
    congr' with y,
    simp only [mem_Inter, mem_Iic, subtype.forall, subtype.coe_mk],
    exact ‚ü®le_of_forall_lt_rat_imp_le, Œª hyx q hq, hyx.trans hq.le‚ü©, },
  { exact Œª i, hs.prod measurable_set_Iic, },
  { refine monotone.directed_ge (Œª i j hij, _),
    refine prod_subset_prod_iff.mpr (or.inl ‚ü®subset_rfl, Iic_subset_Iic.mpr _‚ü©),
    exact_mod_cast hij, },
  { exact ‚ü®h_nonempty.some, measure_ne_top _ _‚ü©, },
end

lemma lintegral_cond_cdf (œÅ : measure (Œ± √ó ‚Ñù)) [is_finite_measure œÅ] (x : ‚Ñù) :
  ‚à´‚Åª a, ennreal.of_real (cond_cdf œÅ a x) ‚àÇœÅ.fst = œÅ (univ √óÀ¢ Iic x) :=
by rw [‚Üê set_lintegral_univ, set_lintegral_cond_cdf œÅ _ measurable_set.univ]

/-- The conditional cdf is a strongly measurable function of `a : Œ±` for all `x : ‚Ñù`. -/
lemma strongly_measurable_cond_cdf (œÅ : measure (Œ± √ó ‚Ñù)) (x : ‚Ñù) :
  strongly_measurable (Œª a, cond_cdf œÅ a x) :=
(measurable_cond_cdf œÅ x).strongly_measurable

lemma integrable_cond_cdf (œÅ : measure (Œ± √ó ‚Ñù)) [is_finite_measure œÅ] (x : ‚Ñù) :
  integrable (Œª a, cond_cdf œÅ a x) œÅ.fst :=
begin
  refine integrable_of_forall_fin_meas_le _ (measure_lt_top œÅ.fst univ) _ (Œª t ht hœÅt, _),
  { exact (strongly_measurable_cond_cdf œÅ _).ae_strongly_measurable, },
  { have : ‚àÄ y, (‚Äñcond_cdf œÅ y x‚Äñ‚Çä : ‚Ñù‚â•0‚àû) ‚â§ 1,
    { intro y,
      rw real.nnnorm_of_nonneg (cond_cdf_nonneg _ _ _),
      exact_mod_cast cond_cdf_le_one _ _ _, },
    refine (set_lintegral_mono (measurable_cond_cdf _ _).ennnorm
      measurable_one (Œª y _, this y)).trans _,
    simp only [pi.one_apply, lintegral_one, measure.restrict_apply, measurable_set.univ,
      univ_inter],
    exact measure_mono (subset_univ _), },
end

lemma set_integral_cond_cdf (œÅ : measure (Œ± √ó ‚Ñù)) [is_finite_measure œÅ] (x : ‚Ñù)
  {s : set Œ±} (hs : measurable_set s) :
  ‚à´ a in s, cond_cdf œÅ a x ‚àÇœÅ.fst = (œÅ (s √óÀ¢ Iic x)).to_real :=
begin
  have h := set_lintegral_cond_cdf œÅ x hs,
  rw ‚Üê of_real_integral_eq_lintegral_of_real at h,
  { rw [‚Üê h, ennreal.to_real_of_real],
    exact integral_nonneg (Œª _, cond_cdf_nonneg _ _ _), },
  { exact (integrable_cond_cdf _ _).integrable_on, },
  { exact eventually_of_forall (Œª _, cond_cdf_nonneg _ _ _), },
end

lemma integral_cond_cdf (œÅ : measure (Œ± √ó ‚Ñù)) [is_finite_measure œÅ] (x : ‚Ñù) :
  ‚à´ a, cond_cdf œÅ a x ‚àÇœÅ.fst = (œÅ (univ √óÀ¢ Iic x)).to_real :=
by rw [‚Üê set_integral_cond_cdf œÅ _ measurable_set.univ, measure.restrict_univ]

section measure

lemma measure_cond_cdf_Iic (œÅ : measure (Œ± √ó ‚Ñù)) (a : Œ±) (x : ‚Ñù) :
  (cond_cdf œÅ a).measure (Iic x) = ennreal.of_real (cond_cdf œÅ a x) :=
begin
  rw [‚Üê sub_zero (cond_cdf œÅ a x)],
  exact (cond_cdf œÅ a).measure_Iic (tendsto_cond_cdf_at_bot œÅ a) _,
end

lemma measure_cond_cdf_univ (œÅ : measure (Œ± √ó ‚Ñù)) (a : Œ±) :
  (cond_cdf œÅ a).measure univ = 1 :=
begin
  rw [‚Üê ennreal.of_real_one, ‚Üê sub_zero (1 : ‚Ñù)],
  exact stieltjes_function.measure_univ _ (tendsto_cond_cdf_at_bot œÅ a)
    (tendsto_cond_cdf_at_top œÅ a),
end

instance (œÅ : measure (Œ± √ó ‚Ñù)) (a : Œ±) : is_probability_measure ((cond_cdf œÅ a).measure) :=
‚ü®measure_cond_cdf_univ œÅ a‚ü©

/-- The function `a ‚Ü¶ (cond_cdf œÅ a).measure` is measurable. -/
lemma measurable_measure_cond_cdf (œÅ : measure (Œ± √ó ‚Ñù)) :
  measurable (Œª a, (cond_cdf œÅ a).measure) :=
begin
  rw measure.measurable_measure,
  refine Œª s hs, measurable_space.induction_on_inter
    (borel_eq_generate_from_Iic ‚Ñù) is_pi_system_Iic _ _ _ _ hs,
  { simp only [measure_empty, measurable_const], },
  { rintros S ‚ü®u, rfl‚ü©,
    simp_rw measure_cond_cdf_Iic œÅ _ u,
    exact (measurable_cond_cdf œÅ u).ennreal_of_real, },
  { intros t ht ht_cd_meas,
    have : (Œª a, (cond_cdf œÅ a).measure t·∂ú)
      = (Œª a, (cond_cdf œÅ a).measure univ) - (Œª a, (cond_cdf œÅ a).measure t),
    { ext1 a,
      rw [measure_compl ht (measure_ne_top (cond_cdf œÅ a).measure _), pi.sub_apply], },
    simp_rw [this, measure_cond_cdf_univ œÅ],
    exact measurable.sub measurable_const ht_cd_meas, },
  { intros f hf_disj hf_meas hf_cd_meas,
    simp_rw measure_Union hf_disj hf_meas,
    exact measurable.ennreal_tsum hf_cd_meas, },
end

end measure

end probability_theory
