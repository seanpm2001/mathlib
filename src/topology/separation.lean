/-
Copyright (c) 2017 Johannes H√∂lzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes H√∂lzl, Mario Carneiro
-/
import topology.subset_properties
import topology.connected
import topology.nhds_set
import topology.inseparable

/-!
# Separation properties of topological spaces.

> THIS FILE IS SYNCHRONIZED WITH MATHLIB4.
> Any changes to this file require a corresponding PR to mathlib4.

This file defines the predicate `separated_nhds`, and common separation axioms
(under the Kolmogorov classification).

## Main definitions

* `separated_nhds`: Two `set`s are separated by neighbourhoods if they are contained in disjoint
  open sets.
* `t0_space`: A T‚ÇÄ/Kolmogorov space is a space where, for every two points `x ‚â† y`,
  there is an open set that contains one, but not the other.
* `t1_space`: A T‚ÇÅ/Fr√©chet space is a space where every singleton set is closed.
  This is equivalent to, for every pair `x ‚â† y`, there existing an open set containing `x`
  but not `y` (`t1_space_iff_exists_open` shows that these conditions are equivalent.)
* `t2_space`: A T‚ÇÇ/Hausdorff space is a space where, for every two points `x ‚â† y`,
  there is two disjoint open sets, one containing `x`, and the other `y`.
* `t2_5_space`: A T‚ÇÇ.‚ÇÖ/Urysohn space is a space where, for every two points `x ‚â† y`,
  there is two open sets, one containing `x`, and the other `y`, whose closures are disjoint.
* `t3_space`: A T‚ÇÉ space, is one where given any closed `C` and `x ‚àâ C`,
  there is disjoint open sets containing `x` and `C` respectively. In `mathlib`, T‚ÇÉ implies T‚ÇÇ.‚ÇÖ.
* `normal_space`: A T‚ÇÑ space (sometimes referred to as normal, but authors vary on
  whether this includes T‚ÇÇ; `mathlib` does), is one where given two disjoint closed sets,
  we can find two open sets that separate them. In `mathlib`, T‚ÇÑ implies T‚ÇÉ.
* `t5_space`: A T‚ÇÖ space, also known as a *completely normal Hausdorff space*

## Main results

### T‚ÇÄ spaces

* `is_closed.exists_closed_singleton` Given a closed set `S` in a compact T‚ÇÄ space,
  there is some `x ‚àà S` such that `{x}` is closed.
* `exists_open_singleton_of_open_finset` Given an open `finset` `S` in a T‚ÇÄ space,
  there is some `x ‚àà S` such that `{x}` is open.

### T‚ÇÅ spaces

* `is_closed_map_const`: The constant map is a closed map.
* `discrete_of_t1_of_finite`: A finite T‚ÇÅ space must have the discrete topology.

### T‚ÇÇ spaces

* `t2_iff_nhds`: A space is T‚ÇÇ iff the neighbourhoods of distinct points generate the bottom filter.
* `t2_iff_is_closed_diagonal`: A space is T‚ÇÇ iff the `diagonal` of `Œ±` (that is, the set of all
  points of the form `(a, a) : Œ± √ó Œ±`) is closed under the product topology.
* `finset_disjoint_finset_opens_of_t2`: Any two disjoint finsets are `separated_nhds`.
* Most topological constructions preserve Hausdorffness;
  these results are part of the typeclass inference system (e.g. `embedding.t2_space`)
* `set.eq_on.closure`: If two functions are equal on some set `s`, they are equal on its closure.
* `is_compact.is_closed`: All compact sets are closed.
* `locally_compact_of_compact_nhds`: If every point has a compact neighbourhood,
  then the space is locally compact.
* `totally_separated_space_of_t1_of_basis_clopen`: If `Œ±` has a clopen basis, then
  it is a `totally_separated_space`.
* `loc_compact_t2_tot_disc_iff_tot_sep`: A locally compact T‚ÇÇ space is totally disconnected iff
  it is totally separated.

If the space is also compact:

* `normal_of_compact_t2`: A compact T‚ÇÇ space is a `normal_space`.
* `connected_components_eq_Inter_clopen`: The connected component of a point
  is the intersection of all its clopen neighbourhoods.
* `compact_t2_tot_disc_iff_tot_sep`: Being a `totally_disconnected_space`
  is equivalent to being a `totally_separated_space`.
* `connected_components.t2`: `connected_components Œ±` is T‚ÇÇ for `Œ±` T‚ÇÇ and compact.

### T‚ÇÉ spaces

* `disjoint_nested_nhds`: Given two points `x ‚â† y`, we can find neighbourhoods `x ‚àà V‚ÇÅ ‚äÜ U‚ÇÅ` and
  `y ‚àà V‚ÇÇ ‚äÜ U‚ÇÇ`, with the `V‚Çñ` closed and the `U‚Çñ` open, such that the `U‚Çñ` are disjoint.

## References

https://en.wikipedia.org/wiki/Separation_axiom
-/

open function set filter topological_space
open_locale topology filter classical

universes u v
variables {Œ± : Type u} {Œ≤ : Type v} [topological_space Œ±]

section separation

/--
`separated_nhds` is a predicate on pairs of sub`set`s of a topological space.  It holds if the two
sub`set`s are contained in disjoint open sets.
-/
def separated_nhds : set Œ± ‚Üí set Œ± ‚Üí Prop :=
  Œª (s t : set Œ±), ‚àÉ U V : (set Œ±), (is_open U) ‚àß is_open V ‚àß
  (s ‚äÜ U) ‚àß (t ‚äÜ V) ‚àß disjoint U V

lemma separated_nhds_iff_disjoint {s t : set Œ±} :
  separated_nhds s t ‚Üî disjoint (ùìùÀ¢ s) (ùìùÀ¢ t) :=
by simp only [(has_basis_nhds_set s).disjoint_iff (has_basis_nhds_set t), separated_nhds,
  exists_prop, ‚Üê exists_and_distrib_left, and.assoc, and.comm, and.left_comm]

namespace separated_nhds

variables {s s‚ÇÅ s‚ÇÇ t t‚ÇÅ t‚ÇÇ u : set Œ±}

@[symm] lemma symm : separated_nhds s t ‚Üí separated_nhds t s :=
Œª ‚ü®U, V, oU, oV, aU, bV, UV‚ü©, ‚ü®V, U, oV, oU, bV, aU, disjoint.symm UV‚ü©

lemma comm (s t : set Œ±) : separated_nhds s t ‚Üî separated_nhds t s := ‚ü®symm, symm‚ü©

lemma preimage [topological_space Œ≤] {f : Œ± ‚Üí Œ≤} {s t : set Œ≤} (h : separated_nhds s t)
  (hf : continuous f) : separated_nhds (f ‚Åª¬π' s) (f ‚Åª¬π' t) :=
let ‚ü®U, V, oU, oV, sU, tV, UV‚ü© := h in
‚ü®f ‚Åª¬π' U, f ‚Åª¬π' V, oU.preimage hf, oV.preimage hf, preimage_mono sU, preimage_mono tV,
  UV.preimage f‚ü©

protected lemma disjoint (h : separated_nhds s t) : disjoint s t :=
let ‚ü®U, V, hU, hV, hsU, htV, hd‚ü© := h in hd.mono hsU htV

lemma disjoint_closure_left (h : separated_nhds s t) : disjoint (closure s) t :=
let ‚ü®U, V, hU, hV, hsU, htV, hd‚ü© := h
in (hd.closure_left hV).mono (closure_mono hsU) htV

lemma disjoint_closure_right (h : separated_nhds s t) : disjoint s (closure t) :=
h.symm.disjoint_closure_left.symm

lemma empty_right (s : set Œ±) : separated_nhds s ‚àÖ :=
‚ü®_, _, is_open_univ, is_open_empty, Œª a h, mem_univ a, Œª a h, by cases h, disjoint_empty _‚ü©

lemma empty_left (s : set Œ±) : separated_nhds ‚àÖ s :=
(empty_right _).symm

lemma mono (h : separated_nhds s‚ÇÇ t‚ÇÇ) (hs : s‚ÇÅ ‚äÜ s‚ÇÇ) (ht : t‚ÇÅ ‚äÜ t‚ÇÇ) : separated_nhds s‚ÇÅ t‚ÇÅ :=
let ‚ü®U, V, hU, hV, hsU, htV, hd‚ü© := h in ‚ü®U, V, hU, hV, hs.trans hsU, ht.trans htV, hd‚ü©

lemma union_left : separated_nhds s u ‚Üí separated_nhds t u ‚Üí separated_nhds (s ‚à™ t) u :=
by simpa only [separated_nhds_iff_disjoint, nhds_set_union, disjoint_sup_left] using and.intro

lemma union_right (ht : separated_nhds s t) (hu : separated_nhds s u) :
  separated_nhds s (t ‚à™ u) :=
(ht.symm.union_left hu.symm).symm

end separated_nhds

/-- A T‚ÇÄ space, also known as a Kolmogorov space, is a topological space such that for every pair
`x ‚â† y`, there is an open set containing one but not the other. We formulate the definition in terms
of the `inseparable` relation.  -/
class t0_space (Œ± : Type u) [topological_space Œ±] : Prop :=
(t0 : ‚àÄ ‚¶Éx y : Œ±‚¶Ñ, inseparable x y ‚Üí x = y)

lemma t0_space_iff_inseparable (Œ± : Type u) [topological_space Œ±] :
  t0_space Œ± ‚Üî ‚àÄ (x y : Œ±), inseparable x y ‚Üí x = y :=
‚ü®Œª ‚ü®h‚ü©, h, Œª h, ‚ü®h‚ü©‚ü©

lemma t0_space_iff_not_inseparable (Œ± : Type u) [topological_space Œ±] :
  t0_space Œ± ‚Üî ‚àÄ (x y : Œ±), x ‚â† y ‚Üí ¬¨inseparable x y :=
by simp only [t0_space_iff_inseparable, ne.def, not_imp_not]

lemma inseparable.eq [t0_space Œ±] {x y : Œ±} (h : inseparable x y) : x = y :=
t0_space.t0 h

protected lemma inducing.injective [topological_space Œ≤] [t0_space Œ±] {f : Œ± ‚Üí Œ≤}
  (hf : inducing f) : injective f :=
Œª x y h, inseparable.eq $ hf.inseparable_iff.1 $ h ‚ñ∏ inseparable.refl _

protected lemma inducing.embedding [topological_space Œ≤] [t0_space Œ±] {f : Œ± ‚Üí Œ≤}
  (hf : inducing f) : embedding f :=
‚ü®hf, hf.injective‚ü©

lemma embedding_iff_inducing [topological_space Œ≤] [t0_space Œ±] {f : Œ± ‚Üí Œ≤} :
  embedding f ‚Üî inducing f :=
‚ü®embedding.to_inducing, inducing.embedding‚ü©

lemma t0_space_iff_nhds_injective (Œ± : Type u) [topological_space Œ±] :
  t0_space Œ± ‚Üî injective (ùìù : Œ± ‚Üí filter Œ±) :=
t0_space_iff_inseparable Œ±

lemma nhds_injective [t0_space Œ±] : injective (ùìù : Œ± ‚Üí filter Œ±) :=
(t0_space_iff_nhds_injective Œ±).1 ‚Äπ_‚Ä∫

lemma inseparable_iff_eq [t0_space Œ±] {x y : Œ±} : inseparable x y ‚Üî x = y :=
nhds_injective.eq_iff

@[simp] lemma nhds_eq_nhds_iff [t0_space Œ±] {a b : Œ±} : ùìù a = ùìù b ‚Üî a = b :=
nhds_injective.eq_iff

@[simp] lemma inseparable_eq_eq [t0_space Œ±] : inseparable = @eq Œ± :=
funext‚ÇÇ $ Œª x y, propext inseparable_iff_eq

lemma t0_space_iff_exists_is_open_xor_mem (Œ± : Type u) [topological_space Œ±] :
  t0_space Œ± ‚Üî ‚àÄ x y, x ‚â† y ‚Üí ‚àÉ U:set Œ±, is_open U ‚àß (xor (x ‚àà U) (y ‚àà U)) :=
by simp only [t0_space_iff_not_inseparable, xor_iff_not_iff, not_forall, exists_prop,
  inseparable_iff_forall_open]

lemma exists_is_open_xor_mem [t0_space Œ±] {x y : Œ±} (h : x ‚â† y) :
  ‚àÉ U : set Œ±, is_open U ‚àß xor (x ‚àà U) (y ‚àà U) :=
(t0_space_iff_exists_is_open_xor_mem Œ±).1 ‚Äπ_‚Ä∫ x y h

/-- Specialization forms a partial order on a t0 topological space. -/
def specialization_order (Œ± : Type*) [topological_space Œ±] [t0_space Œ±] : partial_order Œ± :=
{ .. specialization_preorder Œ±,
  .. partial_order.lift (order_dual.to_dual ‚àò ùìù) nhds_injective }

instance : t0_space (separation_quotient Œ±) :=
‚ü®Œª x' y', quotient.induction_on‚ÇÇ' x' y' $
  Œª x y h, separation_quotient.mk_eq_mk.2 $ separation_quotient.inducing_mk.inseparable_iff.1 h‚ü©

theorem minimal_nonempty_closed_subsingleton [t0_space Œ±] {s : set Œ±} (hs : is_closed s)
  (hmin : ‚àÄ t ‚äÜ s, t.nonempty ‚Üí is_closed t ‚Üí t = s) :
  s.subsingleton :=
begin
  refine Œª x hx y hy, of_not_not (Œª hxy, _),
  rcases exists_is_open_xor_mem hxy with ‚ü®U, hUo, hU‚ü©,
  wlog h : x ‚àà U ‚àß y ‚àâ U,
  { exact this hmin y hy x hx (ne.symm hxy) U hUo hU.symm (hU.resolve_left h), },
  cases h with hxU hyU,
  have : s \ U = s := hmin (s \ U) (diff_subset _ _) ‚ü®y, hy, hyU‚ü© (hs.sdiff hUo),
  exact (this.symm.subset hx).2 hxU
end

theorem minimal_nonempty_closed_eq_singleton [t0_space Œ±] {s : set Œ±} (hs : is_closed s)
  (hne : s.nonempty) (hmin : ‚àÄ t ‚äÜ s, t.nonempty ‚Üí is_closed t ‚Üí t = s) :
  ‚àÉ x, s = {x} :=
exists_eq_singleton_iff_nonempty_subsingleton.2 ‚ü®hne, minimal_nonempty_closed_subsingleton hs hmin‚ü©

/-- Given a closed set `S` in a compact T‚ÇÄ space,
there is some `x ‚àà S` such that `{x}` is closed. -/
theorem is_closed.exists_closed_singleton {Œ± : Type*} [topological_space Œ±]
  [t0_space Œ±] [compact_space Œ±] {S : set Œ±} (hS : is_closed S) (hne : S.nonempty) :
  ‚àÉ (x : Œ±), x ‚àà S ‚àß is_closed ({x} : set Œ±) :=
begin
  obtain ‚ü®V, Vsub, Vne, Vcls, hV‚ü© := hS.exists_minimal_nonempty_closed_subset hne,
  rcases minimal_nonempty_closed_eq_singleton Vcls Vne hV with ‚ü®x, rfl‚ü©,
  exact ‚ü®x, Vsub (mem_singleton x), Vcls‚ü©
end

theorem minimal_nonempty_open_subsingleton [t0_space Œ±] {s : set Œ±} (hs : is_open s)
  (hmin : ‚àÄ t ‚äÜ s, t.nonempty ‚Üí is_open t ‚Üí t = s) :
  s.subsingleton :=
begin
  refine Œª x hx y hy, of_not_not (Œª hxy, _),
  rcases exists_is_open_xor_mem hxy with ‚ü®U, hUo, hU‚ü©,
  wlog h : x ‚àà U ‚àß y ‚àâ U,
  { exact this hs hmin y hy x hx (ne.symm hxy) U hUo hU.symm (hU.resolve_left h), },
  cases h with hxU hyU,
  have : s ‚à© U = s := hmin (s ‚à© U) (inter_subset_left _ _) ‚ü®x, hx, hxU‚ü© (hs.inter hUo),
  exact hyU (this.symm.subset hy).2
end

theorem minimal_nonempty_open_eq_singleton [t0_space Œ±] {s : set Œ±} (hs : is_open s)
  (hne : s.nonempty) (hmin : ‚àÄ t ‚äÜ s, t.nonempty ‚Üí is_open t ‚Üí t = s) :
  ‚àÉ x, s = {x} :=
exists_eq_singleton_iff_nonempty_subsingleton.2 ‚ü®hne, minimal_nonempty_open_subsingleton hs hmin‚ü©

/-- Given an open finite set `S` in a T‚ÇÄ space, there is some `x ‚àà S` such that `{x}` is open. -/
theorem exists_open_singleton_of_open_finite [t0_space Œ±] {s : set Œ±} (hfin : s.finite)
  (hne : s.nonempty) (ho : is_open s) :
  ‚àÉ x ‚àà s, is_open ({x} : set Œ±) :=
begin
  lift s to finset Œ± using hfin,
  induction s using finset.strong_induction_on with s ihs,
  rcases em (‚àÉ t ‚äÇ s, t.nonempty ‚àß is_open (t : set Œ±)) with ‚ü®t, hts, htne, hto‚ü©|ht,
  { rcases ihs t hts htne hto with ‚ü®x, hxt, hxo‚ü©,
    exact ‚ü®x, hts.1 hxt, hxo‚ü© },
  { rcases minimal_nonempty_open_eq_singleton ho hne _ with ‚ü®x, hx‚ü©,
    { exact ‚ü®x, hx.symm ‚ñ∏ rfl, hx ‚ñ∏ ho‚ü© },
    refine Œª t hts htne hto, of_not_not (Œª hts', ht _),
    lift t to finset Œ± using s.finite_to_set.subset hts,
    exact ‚ü®t, ssubset_iff_subset_ne.2 ‚ü®hts, mt finset.coe_inj.2 hts'‚ü©, htne, hto‚ü© }
end

theorem exists_open_singleton_of_fintype [t0_space Œ±] [finite Œ±] [nonempty Œ±] :
  ‚àÉ x : Œ±, is_open ({x} : set Œ±) :=
let ‚ü®x, _, h‚ü© := exists_open_singleton_of_open_finite (set.to_finite _) univ_nonempty
  is_open_univ in ‚ü®x, h‚ü©

lemma t0_space_of_injective_of_continuous [topological_space Œ≤] {f : Œ± ‚Üí Œ≤}
  (hf : function.injective f) (hf' : continuous f) [t0_space Œ≤] : t0_space Œ± :=
‚ü®Œª x y h, hf $ (h.map hf').eq‚ü©

protected lemma embedding.t0_space [topological_space Œ≤] [t0_space Œ≤] {f : Œ± ‚Üí Œ≤}
  (hf : embedding f) : t0_space Œ± :=
t0_space_of_injective_of_continuous hf.inj hf.continuous

instance subtype.t0_space [t0_space Œ±] {p : Œ± ‚Üí Prop} : t0_space (subtype p) :=
embedding_subtype_coe.t0_space

theorem t0_space_iff_or_not_mem_closure (Œ± : Type u) [topological_space Œ±] :
  t0_space Œ± ‚Üî (‚àÄ a b : Œ±, a ‚â† b ‚Üí (a ‚àâ closure ({b} : set Œ±) ‚à® b ‚àâ closure ({a} : set Œ±))) :=
by simp only [t0_space_iff_not_inseparable, inseparable_iff_mem_closure, not_and_distrib]

instance [topological_space Œ≤] [t0_space Œ±] [t0_space Œ≤] : t0_space (Œ± √ó Œ≤) :=
‚ü®Œª x y h, prod.ext (h.map continuous_fst).eq (h.map continuous_snd).eq‚ü©

instance {Œπ : Type*} {œÄ : Œπ ‚Üí Type*} [Œ† i, topological_space (œÄ i)] [Œ† i, t0_space (œÄ i)] :
  t0_space (Œ† i, œÄ i) :=
‚ü®Œª x y h, funext $ Œª i, (h.map (continuous_apply i)).eq‚ü©

lemma t0_space.of_cover (h : ‚àÄ x y, inseparable x y ‚Üí ‚àÉ s : set Œ±, x ‚àà s ‚àß y ‚àà s ‚àß t0_space s) :
  t0_space Œ± :=
begin
  refine ‚ü®Œª x y hxy, _‚ü©,
  rcases h x y hxy with ‚ü®s, hxs, hys, hs‚ü©, resetI,
  lift x to s using hxs, lift y to s using hys,
  rw ‚Üê subtype_inseparable_iff at hxy,
  exact congr_arg coe hxy.eq
end

lemma t0_space.of_open_cover (h : ‚àÄ x, ‚àÉ s : set Œ±, x ‚àà s ‚àß is_open s ‚àß t0_space s) : t0_space Œ± :=
t0_space.of_cover $ Œª x y hxy,
  let ‚ü®s, hxs, hso, hs‚ü© := h x in ‚ü®s, hxs, (hxy.mem_open_iff hso).1 hxs, hs‚ü©

/-- A T‚ÇÅ space, also known as a Fr√©chet space, is a topological space
  where every singleton set is closed. Equivalently, for every pair
  `x ‚â† y`, there is an open set containing `x` and not `y`. -/
class t1_space (Œ± : Type u) [topological_space Œ±] : Prop :=
(t1 : ‚àÄx, is_closed ({x} : set Œ±))

lemma is_closed_singleton [t1_space Œ±] {x : Œ±} : is_closed ({x} : set Œ±) :=
t1_space.t1 x

lemma is_open_compl_singleton [t1_space Œ±] {x : Œ±} : is_open ({x}·∂ú : set Œ±) :=
is_closed_singleton.is_open_compl

lemma is_open_ne [t1_space Œ±] {x : Œ±} : is_open {y | y ‚â† x} :=
is_open_compl_singleton

@[to_additive]
lemma continuous.is_open_mul_support [t1_space Œ±] [has_one Œ±] [topological_space Œ≤]
  {f : Œ≤ ‚Üí Œ±} (hf : continuous f) : is_open (mul_support f) :=
is_open_ne.preimage hf

lemma ne.nhds_within_compl_singleton [t1_space Œ±] {x y : Œ±} (h : x ‚â† y) :
  ùìù[{y}·∂ú] x = ùìù x :=
is_open_ne.nhds_within_eq h

lemma ne.nhds_within_diff_singleton [t1_space Œ±] {x y : Œ±} (h : x ‚â† y) (s : set Œ±) :
  ùìù[s \ {y}] x = ùìù[s] x :=
begin
  rw [diff_eq, inter_comm, nhds_within_inter_of_mem],
  exact mem_nhds_within_of_mem_nhds (is_open_ne.mem_nhds h)
end

lemma is_open_set_of_eventually_nhds_within [t1_space Œ±] {p : Œ± ‚Üí Prop} :
  is_open {x | ‚àÄ·∂† y in ùìù[‚â†] x, p y} :=
begin
  refine is_open_iff_mem_nhds.mpr (Œª a ha, _),
  filter_upwards [eventually_nhds_nhds_within.mpr ha] with b hb,
  by_cases a = b,
  { subst h, exact hb },
  { rw (ne.symm h).nhds_within_compl_singleton at hb,
    exact hb.filter_mono nhds_within_le_nhds }
end

protected lemma set.finite.is_closed [t1_space Œ±] {s : set Œ±} (hs : set.finite s) :
  is_closed s :=
begin
  rw ‚Üê bUnion_of_singleton s,
  exact is_closed_bUnion hs (Œª i hi, is_closed_singleton)
end

lemma topological_space.is_topological_basis.exists_mem_of_ne
  [t1_space Œ±] {b : set (set Œ±)} (hb : is_topological_basis b) {x y : Œ±} (h : x ‚â† y) :
  ‚àÉ a ‚àà b, x ‚àà a ‚àß y ‚àâ a :=
begin
  rcases hb.is_open_iff.1 is_open_ne x h with ‚ü®a, ab, xa, ha‚ü©,
  exact ‚ü®a, ab, xa, Œª h, ha h rfl‚ü©,
end

lemma filter.coclosed_compact_le_cofinite [t1_space Œ±] :
  filter.coclosed_compact Œ± ‚â§ filter.cofinite :=
Œª s hs, compl_compl s ‚ñ∏ hs.is_compact.compl_mem_coclosed_compact_of_is_closed hs.is_closed

variable (Œ±)

/-- In a `t1_space`, relatively compact sets form a bornology. Its cobounded filter is
`filter.coclosed_compact`. See also `bornology.in_compact` the bornology of sets contained
in a compact set. -/
def bornology.relatively_compact [t1_space Œ±] : bornology Œ± :=
{ cobounded := filter.coclosed_compact Œ±,
  le_cofinite := filter.coclosed_compact_le_cofinite }

variable {Œ±}

lemma bornology.relatively_compact.is_bounded_iff [t1_space Œ±] {s : set Œ±} :
  @bornology.is_bounded _ (bornology.relatively_compact Œ±) s ‚Üî is_compact (closure s) :=
begin
  change s·∂ú ‚àà filter.coclosed_compact Œ± ‚Üî _,
  rw filter.mem_coclosed_compact,
  split,
  { rintros ‚ü®t, ht‚ÇÅ, ht‚ÇÇ, hst‚ü©,
    rw compl_subset_compl at hst,
    exact is_compact_of_is_closed_subset ht‚ÇÇ is_closed_closure (closure_minimal hst ht‚ÇÅ) },
  { intros h,
    exact ‚ü®closure s, is_closed_closure, h, compl_subset_compl.mpr subset_closure‚ü© }
end

protected lemma finset.is_closed [t1_space Œ±] (s : finset Œ±) : is_closed (s : set Œ±) :=
s.finite_to_set.is_closed

lemma t1_space_tfae (Œ± : Type u) [topological_space Œ±] :
  tfae [t1_space Œ±,
    ‚àÄ x, is_closed ({x} : set Œ±),
    ‚àÄ x, is_open ({x}·∂ú : set Œ±),
    continuous (@cofinite_topology.of Œ±),
    ‚àÄ ‚¶Éx y : Œ±‚¶Ñ, x ‚â† y ‚Üí {y}·∂ú ‚àà ùìù x,
    ‚àÄ ‚¶Éx y : Œ±‚¶Ñ, x ‚â† y ‚Üí ‚àÉ s ‚àà ùìù x, y ‚àâ s,
    ‚àÄ ‚¶Éx y : Œ±‚¶Ñ, x ‚â† y ‚Üí ‚àÉ (U : set Œ±) (hU : is_open U), x ‚àà U ‚àß y ‚àâ U,
    ‚àÄ ‚¶Éx y : Œ±‚¶Ñ, x ‚â† y ‚Üí disjoint (ùìù x) (pure y),
    ‚àÄ ‚¶Éx y : Œ±‚¶Ñ, x ‚â† y ‚Üí disjoint (pure x) (ùìù y),
    ‚àÄ ‚¶Éx y : Œ±‚¶Ñ, x ‚§≥ y ‚Üí x = y] :=
begin
  tfae_have : 1 ‚Üî 2, from ‚ü®Œª h, h.1, Œª h, ‚ü®h‚ü©‚ü©,
  tfae_have : 2 ‚Üî 3, by simp only [is_open_compl_iff],
  tfae_have : 5 ‚Üî 3,
  { refine forall_swap.trans _,
    simp only [is_open_iff_mem_nhds, mem_compl_iff, mem_singleton_iff] },
  tfae_have : 5 ‚Üî 6,
    by simp only [‚Üê subset_compl_singleton_iff, exists_mem_subset_iff],
  tfae_have : 5 ‚Üî 7,
    by simp only [(nhds_basis_opens _).mem_iff, subset_compl_singleton_iff, exists_prop, and.assoc,
      and.left_comm],
  tfae_have : 5 ‚Üî 8,
    by simp only [‚Üê principal_singleton, disjoint_principal_right],
  tfae_have : 8 ‚Üî 9, from forall_swap.trans (by simp only [disjoint.comm, ne_comm]),
  tfae_have : 1 ‚Üí 4,
  { simp only [continuous_def, cofinite_topology.is_open_iff'],
    rintro H s (rfl|hs),
    exacts [is_open_empty, compl_compl s ‚ñ∏ (@set.finite.is_closed _ _ H _ hs).is_open_compl] },
  tfae_have : 4 ‚Üí 2,
    from Œª h x, (cofinite_topology.is_closed_iff.2 $ or.inr (finite_singleton _)).preimage h,
  tfae_have : 2 ‚Üî 10,
  { simp only [‚Üê closure_subset_iff_is_closed, specializes_iff_mem_closure, subset_def,
      mem_singleton_iff, eq_comm] },
  tfae_finish
end

lemma t1_space_iff_continuous_cofinite_of {Œ± : Type*} [topological_space Œ±] :
  t1_space Œ± ‚Üî continuous (@cofinite_topology.of Œ±) :=
(t1_space_tfae Œ±).out 0 3

lemma cofinite_topology.continuous_of [t1_space Œ±] : continuous (@cofinite_topology.of Œ±) :=
t1_space_iff_continuous_cofinite_of.mp ‚Äπ_‚Ä∫

lemma t1_space_iff_exists_open : t1_space Œ± ‚Üî
  ‚àÄ (x y), x ‚â† y ‚Üí (‚àÉ (U : set Œ±) (hU : is_open U), x ‚àà U ‚àß y ‚àâ U) :=
(t1_space_tfae Œ±).out 0 6

lemma t1_space_iff_disjoint_pure_nhds : t1_space Œ± ‚Üî ‚àÄ ‚¶Éx y : Œ±‚¶Ñ, x ‚â† y ‚Üí disjoint (pure x) (ùìù y) :=
(t1_space_tfae Œ±).out 0 8

lemma t1_space_iff_disjoint_nhds_pure : t1_space Œ± ‚Üî ‚àÄ ‚¶Éx y : Œ±‚¶Ñ, x ‚â† y ‚Üí disjoint (ùìù x) (pure y) :=
(t1_space_tfae Œ±).out 0 7

lemma t1_space_iff_specializes_imp_eq : t1_space Œ± ‚Üî ‚àÄ ‚¶Éx y : Œ±‚¶Ñ, x ‚§≥ y ‚Üí x = y :=
(t1_space_tfae Œ±).out 0 9

lemma disjoint_pure_nhds [t1_space Œ±] {x y : Œ±} (h : x ‚â† y) : disjoint (pure x) (ùìù y) :=
t1_space_iff_disjoint_pure_nhds.mp ‚Äπ_‚Ä∫ h

lemma disjoint_nhds_pure [t1_space Œ±] {x y : Œ±} (h : x ‚â† y) : disjoint (ùìù x) (pure y) :=
t1_space_iff_disjoint_nhds_pure.mp ‚Äπ_‚Ä∫ h

lemma specializes.eq [t1_space Œ±] {x y : Œ±} (h : x ‚§≥ y) : x = y :=
t1_space_iff_specializes_imp_eq.1 ‚Äπ_‚Ä∫ h

lemma specializes_iff_eq [t1_space Œ±] {x y : Œ±} : x ‚§≥ y ‚Üî x = y :=
‚ü®specializes.eq, Œª h, h ‚ñ∏ specializes_rfl‚ü©

@[simp] lemma specializes_eq_eq [t1_space Œ±] : (‚§≥) = @eq Œ± :=
funext‚ÇÇ $ Œª x y, propext specializes_iff_eq

@[simp] lemma pure_le_nhds_iff [t1_space Œ±] {a b : Œ±} : pure a ‚â§ ùìù b ‚Üî a = b :=
specializes_iff_pure.symm.trans specializes_iff_eq

@[simp] lemma nhds_le_nhds_iff [t1_space Œ±] {a b : Œ±} : ùìù a ‚â§ ùìù b ‚Üî a = b :=
specializes_iff_eq

instance {Œ± : Type*} : t1_space (cofinite_topology Œ±) :=
t1_space_iff_continuous_cofinite_of.mpr continuous_id

lemma t1_space_antitone {Œ± : Type*} : antitone (@t1_space Œ±) :=
begin
  simp only [antitone, t1_space_iff_continuous_cofinite_of, continuous_iff_le_induced],
  exact Œª t‚ÇÅ t‚ÇÇ h, h.trans
end

lemma continuous_within_at_update_of_ne [t1_space Œ±] [decidable_eq Œ±] [topological_space Œ≤]
  {f : Œ± ‚Üí Œ≤} {s : set Œ±} {x y : Œ±} {z : Œ≤} (hne : y ‚â† x) :
  continuous_within_at (function.update f x z) s y ‚Üî continuous_within_at f s y :=
eventually_eq.congr_continuous_within_at
  (mem_nhds_within_of_mem_nhds $ mem_of_superset (is_open_ne.mem_nhds hne) $
    Œª y' hy', function.update_noteq hy' _ _)
  (function.update_noteq hne _ _)

lemma continuous_at_update_of_ne [t1_space Œ±] [decidable_eq Œ±] [topological_space Œ≤]
  {f : Œ± ‚Üí Œ≤} {x y : Œ±} {z : Œ≤} (hne : y ‚â† x) :
  continuous_at (function.update f x z) y ‚Üî continuous_at f y :=
by simp only [‚Üê continuous_within_at_univ, continuous_within_at_update_of_ne hne]

lemma continuous_on_update_iff [t1_space Œ±] [decidable_eq Œ±] [topological_space Œ≤]
  {f : Œ± ‚Üí Œ≤} {s : set Œ±} {x : Œ±} {y : Œ≤} :
  continuous_on (function.update f x y) s ‚Üî
    continuous_on f (s \ {x}) ‚àß (x ‚àà s ‚Üí tendsto f (ùìù[s \ {x}] x) (ùìù y)) :=
begin
  rw [continuous_on, ‚Üê and_forall_ne x, and_comm],
  refine and_congr ‚ü®Œª H z hz, _, Œª H z hzx hzs, _‚ü© (forall_congr $ Œª hxs, _),
  { specialize H z hz.2 hz.1,
    rw continuous_within_at_update_of_ne hz.2 at H,
    exact H.mono (diff_subset _ _) },
  { rw continuous_within_at_update_of_ne hzx,
    refine (H z ‚ü®hzs, hzx‚ü©).mono_of_mem (inter_mem_nhds_within _ _),
    exact is_open_ne.mem_nhds hzx },
  { exact continuous_within_at_update_same }
end

lemma t1_space_of_injective_of_continuous [topological_space Œ≤] {f : Œ± ‚Üí Œ≤}
  (hf : function.injective f) (hf' : continuous f) [t1_space Œ≤] : t1_space Œ± :=
t1_space_iff_specializes_imp_eq.2 $ Œª x y h, hf (h.map hf').eq

protected lemma embedding.t1_space [topological_space Œ≤] [t1_space Œ≤] {f : Œ± ‚Üí Œ≤}
  (hf : embedding f) : t1_space Œ± :=
t1_space_of_injective_of_continuous hf.inj hf.continuous

instance subtype.t1_space {Œ± : Type u} [topological_space Œ±] [t1_space Œ±] {p : Œ± ‚Üí Prop} :
  t1_space (subtype p) :=
embedding_subtype_coe.t1_space

instance [topological_space Œ≤] [t1_space Œ±] [t1_space Œ≤] : t1_space (Œ± √ó Œ≤) :=
‚ü®Œª ‚ü®a, b‚ü©, @singleton_prod_singleton _ _ a b ‚ñ∏ is_closed_singleton.prod is_closed_singleton‚ü©

instance {Œπ : Type*} {œÄ : Œπ ‚Üí Type*} [Œ† i, topological_space (œÄ i)] [Œ† i, t1_space (œÄ i)] :
  t1_space (Œ† i, œÄ i) :=
‚ü®Œª f, univ_pi_singleton f ‚ñ∏ is_closed_set_pi (Œª i hi, is_closed_singleton)‚ü©

@[priority 100] -- see Note [lower instance priority]
instance t1_space.t0_space [t1_space Œ±] : t0_space Œ± := ‚ü®Œª x y h, h.specializes.eq‚ü©

@[simp] lemma compl_singleton_mem_nhds_iff [t1_space Œ±] {x y : Œ±} : {x}·∂ú ‚àà ùìù y ‚Üî y ‚â† x :=
is_open_compl_singleton.mem_nhds_iff

lemma compl_singleton_mem_nhds [t1_space Œ±] {x y : Œ±} (h : y ‚â† x) : {x}·∂ú ‚àà ùìù y :=
compl_singleton_mem_nhds_iff.mpr h

@[simp] lemma closure_singleton [t1_space Œ±] {a : Œ±} :
  closure ({a} : set Œ±) = {a} :=
is_closed_singleton.closure_eq

lemma set.subsingleton.closure [t1_space Œ±] {s : set Œ±} (hs : s.subsingleton) :
  (closure s).subsingleton :=
hs.induction_on (by simp) $ Œª x, by simp

@[simp] lemma subsingleton_closure [t1_space Œ±] {s : set Œ±} :
  (closure s).subsingleton ‚Üî s.subsingleton :=
‚ü®Œª h, h.anti subset_closure, Œª h, h.closure‚ü©

lemma is_closed_map_const {Œ± Œ≤} [topological_space Œ±] [topological_space Œ≤] [t1_space Œ≤] {y : Œ≤} :
  is_closed_map (function.const Œ± y) :=
is_closed_map.of_nonempty $ Œª s hs h2s, by simp_rw [h2s.image_const, is_closed_singleton]

lemma nhds_within_insert_of_ne [t1_space Œ±] {x y : Œ±} {s : set Œ±} (hxy : x ‚â† y) :
  ùìù[insert y s] x = ùìù[s] x :=
begin
  refine le_antisymm (Œª t ht, _) (nhds_within_mono x $ subset_insert y s),
  obtain ‚ü®o, ho, hxo, host‚ü© := mem_nhds_within.mp ht,
  refine mem_nhds_within.mpr ‚ü®o \ {y}, ho.sdiff is_closed_singleton, ‚ü®hxo, hxy‚ü©, _‚ü©,
  rw [inter_insert_of_not_mem $ not_mem_diff_of_mem (mem_singleton y)],
  exact (inter_subset_inter (diff_subset _ _) subset.rfl).trans host
end

/-- If `t` is a subset of `s`, except for one point,
then `insert x s` is a neighborhood of `x` within `t`. -/
lemma insert_mem_nhds_within_of_subset_insert [t1_space Œ±] {x y : Œ±} {s t : set Œ±}
  (hu : t ‚äÜ insert y s) :
  insert x s ‚àà ùìù[t] x :=
begin
  rcases eq_or_ne x y with rfl|h,
  { exact mem_of_superset self_mem_nhds_within hu },
  refine nhds_within_mono x hu _,
  rw [nhds_within_insert_of_ne h],
  exact mem_of_superset self_mem_nhds_within (subset_insert x s)
end

lemma bInter_basis_nhds [t1_space Œ±] {Œπ : Sort*} {p : Œπ ‚Üí Prop} {s : Œπ ‚Üí set Œ±} {x : Œ±}
  (h : (ùìù x).has_basis p s) : (‚ãÇ i (h : p i), s i) = {x} :=
begin
  simp only [eq_singleton_iff_unique_mem, mem_Inter],
  refine ‚ü®Œª i hi, mem_of_mem_nhds $ h.mem_of_mem hi, Œª y hy, _‚ü©,
  contrapose! hy,
  rcases h.mem_iff.1 (compl_singleton_mem_nhds hy.symm) with ‚ü®i, hi, hsub‚ü©,
  exact ‚ü®i, hi, Œª h, hsub h rfl‚ü©
end

@[simp] lemma compl_singleton_mem_nhds_set_iff [t1_space Œ±] {x : Œ±} {s : set Œ±} :
  {x}·∂ú ‚àà ùìùÀ¢ s ‚Üî x ‚àâ s :=
by rwa [is_open_compl_singleton.mem_nhds_set, subset_compl_singleton_iff]

@[simp] lemma nhds_set_le_iff [t1_space Œ±] {s t : set Œ±} : ùìùÀ¢ s ‚â§ ùìùÀ¢ t ‚Üî s ‚äÜ t :=
begin
  refine ‚ü®_, Œª h, monotone_nhds_set h‚ü©,
  simp_rw [filter.le_def], intros h x hx,
  specialize h {x}·∂ú,
  simp_rw [compl_singleton_mem_nhds_set_iff] at h,
  by_contra hxt,
  exact h hxt hx,
end

@[simp] lemma nhds_set_inj_iff [t1_space Œ±] {s t : set Œ±} : ùìùÀ¢ s = ùìùÀ¢ t ‚Üî s = t :=
by { simp_rw [le_antisymm_iff], exact and_congr nhds_set_le_iff nhds_set_le_iff }

lemma injective_nhds_set [t1_space Œ±] : function.injective (ùìùÀ¢ : set Œ± ‚Üí filter Œ±) :=
Œª s t hst, nhds_set_inj_iff.mp hst

lemma strict_mono_nhds_set [t1_space Œ±] : strict_mono (ùìùÀ¢ : set Œ± ‚Üí filter Œ±) :=
monotone_nhds_set.strict_mono_of_injective injective_nhds_set

@[simp] lemma nhds_le_nhds_set_iff [t1_space Œ±] {s : set Œ±} {x : Œ±} : ùìù x ‚â§ ùìùÀ¢ s ‚Üî x ‚àà s :=
by rw [‚Üê nhds_set_singleton, nhds_set_le_iff, singleton_subset_iff]

/-- Removing a non-isolated point from a dense set, one still obtains a dense set. -/
lemma dense.diff_singleton [t1_space Œ±] {s : set Œ±} (hs : dense s) (x : Œ±) [ne_bot (ùìù[‚â†] x)] :
  dense (s \ {x}) :=
hs.inter_of_open_right (dense_compl_singleton x) is_open_compl_singleton

/-- Removing a finset from a dense set in a space without isolated points, one still
obtains a dense set. -/
lemma dense.diff_finset [t1_space Œ±] [‚àÄ (x : Œ±), ne_bot (ùìù[‚â†] x)]
  {s : set Œ±} (hs : dense s) (t : finset Œ±) :
  dense (s \ t) :=
begin
  induction t using finset.induction_on with x s hxs ih hd,
  { simpa using hs },
  { rw [finset.coe_insert, ‚Üê union_singleton, ‚Üê diff_diff],
    exact ih.diff_singleton _, }
end

/-- Removing a finite set from a dense set in a space without isolated points, one still
obtains a dense set. -/
lemma dense.diff_finite [t1_space Œ±] [‚àÄ (x : Œ±), ne_bot (ùìù[‚â†] x)]
  {s : set Œ±} (hs : dense s) {t : set Œ±} (ht : t.finite) :
  dense (s \ t) :=
begin
  convert hs.diff_finset ht.to_finset,
  exact (finite.coe_to_finset _).symm,
end

/-- If a function to a `t1_space` tends to some limit `b` at some point `a`, then necessarily
`b = f a`. -/
lemma eq_of_tendsto_nhds [topological_space Œ≤] [t1_space Œ≤] {f : Œ± ‚Üí Œ≤} {a : Œ±} {b : Œ≤}
  (h : tendsto f (ùìù a) (ùìù b)) : f a = b :=
by_contra $ assume (hfa : f a ‚â† b),
have fact‚ÇÅ : {f a}·∂ú ‚àà ùìù b := compl_singleton_mem_nhds hfa.symm,
have fact‚ÇÇ : tendsto f (pure a) (ùìù b) := h.comp (tendsto_id'.2 $ pure_le_nhds a),
fact‚ÇÇ fact‚ÇÅ (eq.refl $ f a)

lemma filter.tendsto.eventually_ne [topological_space Œ≤] [t1_space Œ≤] {Œ± : Type*} {g : Œ± ‚Üí Œ≤}
  {l : filter Œ±} {b‚ÇÅ b‚ÇÇ : Œ≤} (hg : tendsto g l (ùìù b‚ÇÅ)) (hb : b‚ÇÅ ‚â† b‚ÇÇ) :
  ‚àÄ·∂† z in l, g z ‚â† b‚ÇÇ :=
hg.eventually (is_open_compl_singleton.eventually_mem hb)

lemma continuous_at.eventually_ne [topological_space Œ≤] [t1_space Œ≤] {g : Œ± ‚Üí Œ≤}
  {a : Œ±} {b : Œ≤} (hg1 : continuous_at g a) (hg2 : g a ‚â† b) :
  ‚àÄ·∂† z in ùìù a, g z ‚â† b :=
hg1.tendsto.eventually_ne hg2

/-- To prove a function to a `t1_space` is continuous at some point `a`, it suffices to prove that
`f` admits *some* limit at `a`. -/
lemma continuous_at_of_tendsto_nhds [topological_space Œ≤] [t1_space Œ≤] {f : Œ± ‚Üí Œ≤} {a : Œ±} {b : Œ≤}
  (h : tendsto f (ùìù a) (ùìù b)) : continuous_at f a :=
show tendsto f (ùìù a) (ùìù $ f a), by rwa eq_of_tendsto_nhds h

@[simp] lemma tendsto_const_nhds_iff [t1_space Œ±] {l : filter Œ≤} [ne_bot l] {c d : Œ±} :
  tendsto (Œª x, c) l (ùìù d) ‚Üî c = d :=
by simp_rw [tendsto, filter.map_const, pure_le_nhds_iff]

/-- A point with a finite neighborhood has to be isolated. -/
lemma is_open_singleton_of_finite_mem_nhds {Œ± : Type*} [topological_space Œ±] [t1_space Œ±]
  (x : Œ±) {s : set Œ±} (hs : s ‚àà ùìù x) (hsf : s.finite) : is_open ({x} : set Œ±) :=
begin
  have A : {x} ‚äÜ s, by simp only [singleton_subset_iff, mem_of_mem_nhds hs],
  have B : is_closed (s \ {x}) := (hsf.subset (diff_subset _ _)).is_closed,
  have C : (s \ {x})·∂ú ‚àà ùìù x, from B.is_open_compl.mem_nhds (Œª h, h.2 rfl),
  have D : {x} ‚àà ùìù x, by simpa only [‚Üê diff_eq, diff_diff_cancel_left A] using inter_mem hs C,
  rwa [‚Üê mem_interior_iff_mem_nhds, ‚Üê singleton_subset_iff, subset_interior_iff_is_open] at D
end

/-- If the punctured neighborhoods of a point form a nontrivial filter, then any neighborhood is
infinite. -/
lemma infinite_of_mem_nhds {Œ±} [topological_space Œ±] [t1_space Œ±] (x : Œ±) [hx : ne_bot (ùìù[‚â†] x)]
  {s : set Œ±} (hs : s ‚àà ùìù x) : set.infinite s :=
begin
  refine Œª hsf, hx.1 _,
  rw [‚Üê is_open_singleton_iff_punctured_nhds],
  exact is_open_singleton_of_finite_mem_nhds x hs hsf
end

lemma discrete_of_t1_of_finite {X : Type*} [topological_space X] [t1_space X] [finite X] :
  discrete_topology X :=
begin
  apply singletons_open_iff_discrete.mp,
  intros x,
  rw [‚Üê is_closed_compl_iff],
  exact (set.to_finite _).is_closed
end

lemma preconnected_space.trivial_of_discrete [preconnected_space Œ±] [discrete_topology Œ±] :
  subsingleton Œ± :=
begin
  rw ‚Üênot_nontrivial_iff_subsingleton,
  rintro ‚ü®x, y, hxy‚ü©,
  rw [ne.def, ‚Üêmem_singleton_iff, (is_clopen_discrete _).eq_univ $ singleton_nonempty y] at hxy,
  exact hxy (mem_univ x)
end

lemma is_preconnected.infinite_of_nontrivial [t1_space Œ±] {s : set Œ±} (h : is_preconnected s)
  (hs : s.nontrivial) : s.infinite :=
begin
  refine mt (Œª hf, (subsingleton_coe s).mp _) (not_subsingleton_iff.mpr hs),
  haveI := @discrete_of_t1_of_finite s _ _ hf.to_subtype,
  exact @preconnected_space.trivial_of_discrete _ _ (subtype.preconnected_space h) _
end

lemma connected_space.infinite [connected_space Œ±] [nontrivial Œ±] [t1_space Œ±] : infinite Œ± :=
infinite_univ_iff.mp $ is_preconnected_univ.infinite_of_nontrivial nontrivial_univ

lemma singleton_mem_nhds_within_of_mem_discrete {s : set Œ±} [discrete_topology s]
  {x : Œ±} (hx : x ‚àà s) :
  {x} ‚àà ùìù[s] x :=
begin
  have : ({‚ü®x, hx‚ü©} : set s) ‚àà ùìù (‚ü®x, hx‚ü© : s), by simp [nhds_discrete],
  simpa only [nhds_within_eq_map_subtype_coe hx, image_singleton]
    using @image_mem_map _ _ _ (coe : s ‚Üí Œ±) _ this
end

/-- The neighbourhoods filter of `x` within `s`, under the discrete topology, is equal to
the pure `x` filter (which is the principal filter at the singleton `{x}`.) -/
lemma nhds_within_of_mem_discrete {s : set Œ±} [discrete_topology s] {x : Œ±} (hx : x ‚àà s) :
  ùìù[s] x = pure x :=
le_antisymm (le_pure_iff.2 $ singleton_mem_nhds_within_of_mem_discrete hx) (pure_le_nhds_within hx)

lemma filter.has_basis.exists_inter_eq_singleton_of_mem_discrete
  {Œπ : Type*} {p : Œπ ‚Üí Prop} {t : Œπ ‚Üí set Œ±} {s : set Œ±} [discrete_topology s] {x : Œ±}
  (hb : (ùìù x).has_basis p t) (hx : x ‚àà s) :
  ‚àÉ i (hi : p i), t i ‚à© s = {x} :=
begin
  rcases (nhds_within_has_basis hb s).mem_iff.1 (singleton_mem_nhds_within_of_mem_discrete hx)
    with ‚ü®i, hi, hix‚ü©,
  exact ‚ü®i, hi, subset.antisymm hix $ singleton_subset_iff.2
    ‚ü®mem_of_mem_nhds $ hb.mem_of_mem hi, hx‚ü©‚ü©
end

/-- A point `x` in a discrete subset `s` of a topological space admits a neighbourhood
that only meets `s` at `x`.  -/
lemma nhds_inter_eq_singleton_of_mem_discrete {s : set Œ±} [discrete_topology s]
  {x : Œ±} (hx : x ‚àà s) :
  ‚àÉ U ‚àà ùìù x, U ‚à© s = {x} :=
by simpa using (ùìù x).basis_sets.exists_inter_eq_singleton_of_mem_discrete hx

/-- For point `x` in a discrete subset `s` of a topological space, there is a set `U`
such that
1. `U` is a punctured neighborhood of `x` (ie. `U ‚à™ {x}` is a neighbourhood of `x`),
2. `U` is disjoint from `s`.
-/
lemma disjoint_nhds_within_of_mem_discrete {s : set Œ±} [discrete_topology s] {x : Œ±} (hx : x ‚àà s) :
  ‚àÉ U ‚àà ùìù[‚â†] x, disjoint U s :=
let ‚ü®V, h, h'‚ü© := nhds_inter_eq_singleton_of_mem_discrete hx in
  ‚ü®{x}·∂ú ‚à© V, inter_mem_nhds_within _ h,
    (disjoint_iff_inter_eq_empty.mpr (by { rw [inter_assoc, h', compl_inter_self] }))‚ü©

/-- Let `X` be a topological space and let `s, t ‚äÜ X` be two subsets.  If there is an inclusion
`t ‚äÜ s`, then the topological space structure on `t` induced by `X` is the same as the one
obtained by the induced topological space structure on `s`. -/
lemma topological_space.subset_trans {X : Type*} [tX : topological_space X]
  {s t : set X} (ts : t ‚äÜ s) :
  (subtype.topological_space : topological_space t) =
    (subtype.topological_space : topological_space s).induced (set.inclusion ts) :=
begin
  change tX.induced ((coe : s ‚Üí X) ‚àò (set.inclusion ts)) =
    topological_space.induced (set.inclusion ts) (tX.induced _),
  rw ‚Üê induced_compose,
end

/-- A T‚ÇÇ space, also known as a Hausdorff space, is one in which for every
  `x ‚â† y` there exists disjoint open sets around `x` and `y`. This is
  the most widely used of the separation axioms. -/
@[mk_iff] class t2_space (Œ± : Type u) [topological_space Œ±] : Prop :=
(t2 : ‚àÄ x y, x ‚â† y ‚Üí ‚àÉ u v : set Œ±, is_open u ‚àß is_open v ‚àß x ‚àà u ‚àß y ‚àà v ‚àß disjoint u v)

/-- Two different points can be separated by open sets. -/
lemma t2_separation [t2_space Œ±] {x y : Œ±} (h : x ‚â† y) :
  ‚àÉ u v : set Œ±, is_open u ‚àß is_open v ‚àß x ‚àà u ‚àß y ‚àà v ‚àß disjoint u v :=
t2_space.t2 x y h

lemma t2_space_iff_disjoint_nhds : t2_space Œ± ‚Üî ‚àÄ x y : Œ±, x ‚â† y ‚Üí disjoint (ùìù x) (ùìù y) :=
begin
  refine (t2_space_iff Œ±).trans (forall‚ÇÉ_congr $ Œª x y hne, _),
  simp only [(nhds_basis_opens x).disjoint_iff (nhds_basis_opens y), exists_prop,
    ‚Üê exists_and_distrib_left, and.assoc, and_comm, and.left_comm]
end

@[simp] lemma disjoint_nhds_nhds [t2_space Œ±] {x y : Œ±} : disjoint (ùìù x) (ùìù y) ‚Üî x ‚â† y :=
‚ü®Œª hd he, by simpa [he, nhds_ne_bot.ne] using hd, t2_space_iff_disjoint_nhds.mp ‚Äπ_‚Ä∫ x y‚ü©

lemma pairwise_disjoint_nhds [t2_space Œ±] : pairwise (disjoint on (ùìù : Œ± ‚Üí filter Œ±)) :=
Œª x y, disjoint_nhds_nhds.2

protected lemma set.pairwise_disjoint_nhds [t2_space Œ±] (s : set Œ±) : s.pairwise_disjoint ùìù :=
pairwise_disjoint_nhds.set_pairwise s

/-- Points of a finite set can be separated by open sets from each other. -/
lemma set.finite.t2_separation [t2_space Œ±] {s : set Œ±} (hs : s.finite) :
  ‚àÉ U : Œ± ‚Üí set Œ±, (‚àÄ x, x ‚àà U x ‚àß is_open (U x)) ‚àß s.pairwise_disjoint U :=
s.pairwise_disjoint_nhds.exists_mem_filter_basis hs nhds_basis_opens

lemma is_open_set_of_disjoint_nhds_nhds :
  is_open {p : Œ± √ó Œ± | disjoint (ùìù p.1) (ùìù p.2)} :=
begin
  simp only [is_open_iff_mem_nhds, prod.forall, mem_set_of_eq],
  intros x y h,
  obtain ‚ü®U, hU, V, hV, hd‚ü© := ((nhds_basis_opens x).disjoint_iff (nhds_basis_opens y)).mp h,
  exact mem_nhds_prod_iff.mpr ‚ü®U, hU.2.mem_nhds hU.1, V, hV.2.mem_nhds hV.1,
    Œª ‚ü®x', y'‚ü© ‚ü®hx', hy'‚ü©, disjoint_of_disjoint_of_mem hd (hU.2.mem_nhds hx') (hV.2.mem_nhds hy')‚ü©
end

@[priority 100] -- see Note [lower instance priority]
instance t2_space.t1_space [t2_space Œ±] : t1_space Œ± :=
t1_space_iff_disjoint_pure_nhds.mpr $ Œª x y hne, (disjoint_nhds_nhds.2 hne).mono_left $
  pure_le_nhds _

/-- A space is T‚ÇÇ iff the neighbourhoods of distinct points generate the bottom filter. -/
lemma t2_iff_nhds : t2_space Œ± ‚Üî ‚àÄ {x y : Œ±}, ne_bot (ùìù x ‚äì ùìù y) ‚Üí x = y :=
by simp only [t2_space_iff_disjoint_nhds, disjoint_iff, ne_bot_iff, ne.def, not_imp_comm]

lemma eq_of_nhds_ne_bot [t2_space Œ±] {x y : Œ±} (h : ne_bot (ùìù x ‚äì ùìù y)) : x = y :=
t2_iff_nhds.mp ‚Äπ_‚Ä∫ h

lemma t2_space_iff_nhds : t2_space Œ± ‚Üî ‚àÄ {x y : Œ±}, x ‚â† y ‚Üí ‚àÉ (U ‚àà ùìù x) (V ‚àà ùìù y), disjoint U V :=
by simp only [t2_space_iff_disjoint_nhds, filter.disjoint_iff]

lemma t2_separation_nhds [t2_space Œ±] {x y : Œ±} (h : x ‚â† y) :
  ‚àÉ u v, u ‚àà ùìù x ‚àß v ‚àà ùìù y ‚àß disjoint u v :=
let ‚ü®u, v, open_u, open_v, x_in, y_in, huv‚ü© := t2_separation h in
‚ü®u, v, open_u.mem_nhds x_in, open_v.mem_nhds y_in, huv‚ü©

lemma t2_separation_compact_nhds [locally_compact_space Œ±] [t2_space Œ±] {x y : Œ±} (h : x ‚â† y) :
  ‚àÉ u v, u ‚àà ùìù x ‚àß v ‚àà ùìù y ‚àß is_compact u ‚àß is_compact v ‚àß disjoint u v :=
by simpa only [exists_prop, ‚Üê exists_and_distrib_left, and_comm, and.assoc, and.left_comm]
  using ((compact_basis_nhds x).disjoint_iff (compact_basis_nhds y)).1 (disjoint_nhds_nhds.2 h)

lemma t2_iff_ultrafilter :
  t2_space Œ± ‚Üî ‚àÄ {x y : Œ±} (f : ultrafilter Œ±), ‚Üëf ‚â§ ùìù x ‚Üí ‚Üëf ‚â§ ùìù y ‚Üí x = y :=
t2_iff_nhds.trans $ by simp only [‚Üêexists_ultrafilter_iff, and_imp, le_inf_iff, exists_imp_distrib]

lemma t2_iff_is_closed_diagonal : t2_space Œ± ‚Üî is_closed (diagonal Œ±) :=
by simp only [t2_space_iff_disjoint_nhds, ‚Üê is_open_compl_iff, is_open_iff_mem_nhds, prod.forall,
  nhds_prod_eq, compl_diagonal_mem_prod, mem_compl_iff, mem_diagonal_iff]

lemma is_closed_diagonal [t2_space Œ±] : is_closed (diagonal Œ±) :=
t2_iff_is_closed_diagonal.mp ‚Äπ_‚Ä∫

section separated

open separated_nhds finset

lemma finset_disjoint_finset_opens_of_t2 [t2_space Œ±] :
  ‚àÄ (s t : finset Œ±), disjoint s t ‚Üí separated_nhds (s : set Œ±) t :=
begin
  refine induction_on_union _ (Œª a b hi d, (hi d.symm).symm) (Œª a d, empty_right a) (Œª a b ab, _) _,
  { obtain ‚ü®U, V, oU, oV, aU, bV, UV‚ü© := t2_separation (finset.disjoint_singleton.1 ab),
    refine ‚ü®U, V, oU, oV, _, _, UV‚ü©;
    exact singleton_subset_set_iff.mpr ‚Äπ_‚Ä∫ },
  { intros a b c ac bc d,
    apply_mod_cast union_left (ac (disjoint_of_subset_left (a.subset_union_left b) d)) (bc _),
    exact disjoint_of_subset_left (a.subset_union_right b) d },
end

lemma point_disjoint_finset_opens_of_t2 [t2_space Œ±] {x : Œ±} {s : finset Œ±} (h : x ‚àâ s) :
  separated_nhds ({x} : set Œ±) s :=
by exact_mod_cast finset_disjoint_finset_opens_of_t2 {x} s (finset.disjoint_singleton_left.mpr h)

end separated

lemma tendsto_nhds_unique [t2_space Œ±] {f : Œ≤ ‚Üí Œ±} {l : filter Œ≤} {a b : Œ±}
  [ne_bot l] (ha : tendsto f l (ùìù a)) (hb : tendsto f l (ùìù b)) : a = b :=
eq_of_nhds_ne_bot $ ne_bot_of_le $ le_inf ha hb

lemma tendsto_nhds_unique' [t2_space Œ±] {f : Œ≤ ‚Üí Œ±} {l : filter Œ≤} {a b : Œ±}
  (hl : ne_bot l) (ha : tendsto f l (ùìù a)) (hb : tendsto f l (ùìù b)) : a = b :=
eq_of_nhds_ne_bot $ ne_bot_of_le $ le_inf ha hb

lemma tendsto_nhds_unique_of_eventually_eq [t2_space Œ±] {f g : Œ≤ ‚Üí Œ±} {l : filter Œ≤} {a b : Œ±}
  [ne_bot l] (ha : tendsto f l (ùìù a)) (hb : tendsto g l (ùìù b)) (hfg : f =·∂†[l] g) :
  a = b :=
tendsto_nhds_unique (ha.congr' hfg) hb

lemma tendsto_nhds_unique_of_frequently_eq [t2_space Œ±] {f g : Œ≤ ‚Üí Œ±} {l : filter Œ≤} {a b : Œ±}
  (ha : tendsto f l (ùìù a)) (hb : tendsto g l (ùìù b)) (hfg : ‚àÉ·∂† x in l, f x = g x) :
  a = b :=
have ‚àÉ·∂† z : Œ± √ó Œ± in ùìù (a, b), z.1 = z.2 := (ha.prod_mk_nhds hb).frequently hfg,
not_not.1 $ Œª hne, this (is_closed_diagonal.is_open_compl.mem_nhds hne)

/-- A T‚ÇÇ.‚ÇÖ space, also known as a Urysohn space, is a topological space
  where for every pair `x ‚â† y`, there are two open sets, with the intersection of closures
  empty, one containing `x` and the other `y` . -/
class t2_5_space (Œ± : Type u) [topological_space Œ±]: Prop :=
(t2_5 : ‚àÄ ‚¶Éx y : Œ±‚¶Ñ  (h : x ‚â† y), disjoint ((ùìù x).lift' closure) ((ùìù y).lift' closure))

@[simp] lemma disjoint_lift'_closure_nhds [t2_5_space Œ±] {x y : Œ±} :
  disjoint ((ùìù x).lift' closure) ((ùìù y).lift' closure) ‚Üî x ‚â† y :=
‚ü®Œª h hxy, by simpa [hxy, nhds_ne_bot.ne] using h, Œª h, t2_5_space.t2_5 h‚ü©

@[priority 100] -- see Note [lower instance priority]
instance t2_5_space.t2_space [t2_5_space Œ±] : t2_space Œ± :=
t2_space_iff_disjoint_nhds.2 $
  Œª x y hne, (disjoint_lift'_closure_nhds.2 hne).mono (le_lift'_closure _) (le_lift'_closure _)

lemma exists_nhds_disjoint_closure [t2_5_space Œ±] {x y : Œ±} (h : x ‚â† y) :
  ‚àÉ (s ‚àà ùìù x) (t ‚àà ùìù y), disjoint (closure s) (closure t) :=
((ùìù x).basis_sets.lift'_closure.disjoint_iff (ùìù y).basis_sets.lift'_closure).1 $
  disjoint_lift'_closure_nhds.2 h

lemma exists_open_nhds_disjoint_closure [t2_5_space Œ±] {x y : Œ±} (h : x ‚â† y) :
  ‚àÉ u : set Œ±, x ‚àà u ‚àß is_open u ‚àß ‚àÉ v : set Œ±, y ‚àà v ‚àß is_open v ‚àß
    disjoint (closure u) (closure v) :=
by simpa only [exists_prop, and.assoc] using ((nhds_basis_opens x).lift'_closure.disjoint_iff
  (nhds_basis_opens y).lift'_closure).1 (disjoint_lift'_closure_nhds.2 h)

section lim
variables [t2_space Œ±] {f : filter Œ±}

/-!
### Properties of `Lim` and `lim`

In this section we use explicit `nonempty Œ±` instances for `Lim` and `lim`. This way the lemmas
are useful without a `nonempty Œ±` instance.
-/

lemma Lim_eq {a : Œ±} [ne_bot f] (h : f ‚â§ ùìù a) :
  @Lim _ _ ‚ü®a‚ü© f = a :=
tendsto_nhds_unique (le_nhds_Lim ‚ü®a, h‚ü©) h

lemma Lim_eq_iff [ne_bot f] (h : ‚àÉ (a : Œ±), f ‚â§ nhds a) {a} : @Lim _ _ ‚ü®a‚ü© f = a ‚Üî f ‚â§ ùìù a :=
‚ü®Œª c, c ‚ñ∏ le_nhds_Lim h, Lim_eq‚ü©

lemma ultrafilter.Lim_eq_iff_le_nhds [compact_space Œ±] {x : Œ±} {F : ultrafilter Œ±} :
  F.Lim = x ‚Üî ‚ÜëF ‚â§ ùìù x :=
‚ü®Œª h, h ‚ñ∏ F.le_nhds_Lim, Lim_eq‚ü©

lemma is_open_iff_ultrafilter' [compact_space Œ±] (U : set Œ±) :
  is_open U ‚Üî (‚àÄ F : ultrafilter Œ±, F.Lim ‚àà U ‚Üí U ‚àà F.1) :=
begin
  rw is_open_iff_ultrafilter,
  refine ‚ü®Œª h F hF, h F.Lim hF F F.le_nhds_Lim, _‚ü©,
  intros cond x hx f h,
  rw [‚Üê (ultrafilter.Lim_eq_iff_le_nhds.2 h)] at hx,
  exact cond _ hx
end

lemma filter.tendsto.lim_eq {a : Œ±} {f : filter Œ≤} [ne_bot f] {g : Œ≤ ‚Üí Œ±} (h : tendsto g f (ùìù a)) :
  @lim _ _ _ ‚ü®a‚ü© f g = a :=
Lim_eq h

lemma filter.lim_eq_iff {f : filter Œ≤} [ne_bot f] {g : Œ≤ ‚Üí Œ±} (h : ‚àÉ a, tendsto g f (ùìù a)) {a} :
  @lim _ _ _ ‚ü®a‚ü© f g = a ‚Üî tendsto g f (ùìù a) :=
‚ü®Œª c, c ‚ñ∏ tendsto_nhds_lim h, filter.tendsto.lim_eq‚ü©

lemma continuous.lim_eq [topological_space Œ≤] {f : Œ≤ ‚Üí Œ±} (h : continuous f) (a : Œ≤) :
  @lim _ _ _ ‚ü®f a‚ü© (ùìù a) f = f a :=
(h.tendsto a).lim_eq

@[simp] lemma Lim_nhds (a : Œ±) : @Lim _ _ ‚ü®a‚ü© (ùìù a) = a :=
Lim_eq le_rfl

@[simp] lemma lim_nhds_id (a : Œ±) : @lim _ _ _ ‚ü®a‚ü© (ùìù a) id = a :=
Lim_nhds a

@[simp] lemma Lim_nhds_within {a : Œ±} {s : set Œ±} (h : a ‚àà closure s) :
  @Lim _ _ ‚ü®a‚ü© (ùìù[s] a) = a :=
by haveI : ne_bot (ùìù[s] a) := mem_closure_iff_cluster_pt.1 h;
exact Lim_eq inf_le_left

@[simp] lemma lim_nhds_within_id {a : Œ±} {s : set Œ±} (h : a ‚àà closure s) :
  @lim _ _ _ ‚ü®a‚ü© (ùìù[s] a) id = a :=
Lim_nhds_within h

end lim

/-!
### `t2_space` constructions

We use two lemmas to prove that various standard constructions generate Hausdorff spaces from
Hausdorff spaces:

* `separated_by_continuous` says that two points `x y : Œ±` can be separated by open neighborhoods
  provided that there exists a continuous map `f : Œ± ‚Üí Œ≤` with a Hausdorff codomain such that
  `f x ‚â† f y`. We use this lemma to prove that topological spaces defined using `induced` are
  Hausdorff spaces.

* `separated_by_open_embedding` says that for an open embedding `f : Œ± ‚Üí Œ≤` of a Hausdorff space
  `Œ±`, the images of two distinct points `x y : Œ±`, `x ‚â† y` can be separated by open neighborhoods.
  We use this lemma to prove that topological spaces defined using `coinduced` are Hausdorff spaces.
-/

@[priority 100] -- see Note [lower instance priority]
instance discrete_topology.to_t2_space {Œ± : Type*} [topological_space Œ±] [discrete_topology Œ±] :
  t2_space Œ± :=
‚ü®Œª x y h, ‚ü®{x}, {y}, is_open_discrete _, is_open_discrete _, rfl, rfl, disjoint_singleton.2 h‚ü©‚ü©

lemma separated_by_continuous {Œ± : Type*} {Œ≤ : Type*}
  [topological_space Œ±] [topological_space Œ≤] [t2_space Œ≤]
  {f : Œ± ‚Üí Œ≤} (hf : continuous f) {x y : Œ±} (h : f x ‚â† f y) :
  ‚àÉu v : set Œ±, is_open u ‚àß is_open v ‚àß x ‚àà u ‚àß y ‚àà v ‚àß disjoint u v :=
let ‚ü®u, v, uo, vo, xu, yv, uv‚ü© := t2_separation h in
‚ü®f ‚Åª¬π' u, f ‚Åª¬π' v, uo.preimage hf, vo.preimage hf, xu, yv, uv.preimage _‚ü©

lemma separated_by_open_embedding {Œ± Œ≤ : Type*} [topological_space Œ±] [topological_space Œ≤]
  [t2_space Œ±] {f : Œ± ‚Üí Œ≤} (hf : open_embedding f) {x y : Œ±} (h : x ‚â† y) :
  ‚àÉ u v : set Œ≤, is_open u ‚àß is_open v ‚àß f x ‚àà u ‚àß f y ‚àà v ‚àß disjoint u v :=
let ‚ü®u, v, uo, vo, xu, yv, uv‚ü© := t2_separation h in
‚ü®f '' u, f '' v, hf.is_open_map _ uo, hf.is_open_map _ vo,
  mem_image_of_mem _ xu, mem_image_of_mem _ yv, disjoint_image_of_injective hf.inj uv‚ü©

instance {Œ± : Type*} {p : Œ± ‚Üí Prop} [t : topological_space Œ±] [t2_space Œ±] : t2_space (subtype p) :=
‚ü®assume x y h, separated_by_continuous continuous_subtype_val (mt subtype.eq h)‚ü©

instance {Œ± : Type*} {Œ≤ : Type*} [t‚ÇÅ : topological_space Œ±] [t2_space Œ±]
  [t‚ÇÇ : topological_space Œ≤] [t2_space Œ≤] : t2_space (Œ± √ó Œ≤) :=
‚ü®assume ‚ü®x‚ÇÅ,x‚ÇÇ‚ü© ‚ü®y‚ÇÅ,y‚ÇÇ‚ü© h,
  or.elim (not_and_distrib.mp (mt prod.ext_iff.mpr h))
    (Œª h‚ÇÅ, separated_by_continuous continuous_fst h‚ÇÅ)
    (Œª h‚ÇÇ, separated_by_continuous continuous_snd h‚ÇÇ)‚ü©

lemma embedding.t2_space [topological_space Œ≤] [t2_space Œ≤] {f : Œ± ‚Üí Œ≤} (hf : embedding f) :
  t2_space Œ± :=
‚ü®Œª x y h, separated_by_continuous hf.continuous (hf.inj.ne h)‚ü©

instance {Œ± : Type*} {Œ≤ : Type*} [t‚ÇÅ : topological_space Œ±] [t2_space Œ±]
  [t‚ÇÇ : topological_space Œ≤] [t2_space Œ≤] : t2_space (Œ± ‚äï Œ≤) :=
begin
  constructor,
  rintros (x|x) (y|y) h,
  { replace h : x ‚â† y := Œª c, (c.subst h) rfl,
    exact separated_by_open_embedding open_embedding_inl h },
  { exact ‚ü®_, _, is_open_range_inl, is_open_range_inr, ‚ü®x, rfl‚ü©, ‚ü®y, rfl‚ü©,
      is_compl_range_inl_range_inr.disjoint‚ü© },
  { exact ‚ü®_, _, is_open_range_inr, is_open_range_inl, ‚ü®x, rfl‚ü©, ‚ü®y, rfl‚ü©,
      is_compl_range_inl_range_inr.disjoint.symm‚ü© },
  { replace h : x ‚â† y := Œª c, (c.subst h) rfl,
    exact separated_by_open_embedding open_embedding_inr h }
end

instance Pi.t2_space {Œ± : Type*} {Œ≤ : Œ± ‚Üí Type v} [t‚ÇÇ : Œ†a, topological_space (Œ≤ a)]
  [‚àÄa, t2_space (Œ≤ a)] :
  t2_space (Œ†a, Œ≤ a) :=
‚ü®assume x y h,
  let ‚ü®i, hi‚ü© := not_forall.mp (mt funext h) in
  separated_by_continuous (continuous_apply i) hi‚ü©

instance sigma.t2_space {Œπ : Type*} {Œ± : Œπ ‚Üí Type*} [Œ†i, topological_space (Œ± i)]
  [‚àÄa, t2_space (Œ± a)] :
  t2_space (Œ£i, Œ± i) :=
begin
  constructor,
  rintros ‚ü®i, x‚ü© ‚ü®j, y‚ü© neq,
  rcases em (i = j) with (rfl|h),
  { replace neq : x ‚â† y := Œª c, (c.subst neq) rfl,
    exact separated_by_open_embedding open_embedding_sigma_mk neq },
  { exact ‚ü®_, _, is_open_range_sigma_mk, is_open_range_sigma_mk, ‚ü®x, rfl‚ü©, ‚ü®y, rfl‚ü©,
      set.disjoint_left.mpr $ by tidy‚ü© }
end

variables {Œ≥ : Type*} [topological_space Œ≤] [topological_space Œ≥]

lemma is_closed_eq [t2_space Œ±] {f g : Œ≤ ‚Üí Œ±}
  (hf : continuous f) (hg : continuous g) : is_closed {x:Œ≤ | f x = g x} :=
continuous_iff_is_closed.mp (hf.prod_mk hg) _ is_closed_diagonal

lemma is_open_ne_fun [t2_space Œ±] {f g : Œ≤ ‚Üí Œ±}
  (hf : continuous f) (hg : continuous g) : is_open {x:Œ≤ | f x ‚â† g x} :=
is_open_compl_iff.mpr $ is_closed_eq hf hg

/-- If two continuous maps are equal on `s`, then they are equal on the closure of `s`. See also
`set.eq_on.of_subset_closure` for a more general version. -/
lemma set.eq_on.closure [t2_space Œ±] {s : set Œ≤} {f g : Œ≤ ‚Üí Œ±} (h : eq_on f g s)
  (hf : continuous f) (hg : continuous g) :
  eq_on f g (closure s) :=
closure_minimal h (is_closed_eq hf hg)

/-- If two continuous functions are equal on a dense set, then they are equal. -/
lemma continuous.ext_on [t2_space Œ±] {s : set Œ≤} (hs : dense s) {f g : Œ≤ ‚Üí Œ±}
  (hf : continuous f) (hg : continuous g) (h : eq_on f g s) :
  f = g :=
funext $ Œª x, h.closure hf hg (hs x)

lemma eq_on_closure‚ÇÇ' [t2_space Œ±] {s : set Œ≤} {t : set Œ≥} {f g : Œ≤ ‚Üí Œ≥ ‚Üí Œ±}
  (h : ‚àÄ (x ‚àà s) (y ‚àà t), f x y = g x y)
  (hf‚ÇÅ : ‚àÄ x, continuous (f x)) (hf‚ÇÇ : ‚àÄ y, continuous (Œª x, f x y))
  (hg‚ÇÅ : ‚àÄ x, continuous (g x)) (hg‚ÇÇ : ‚àÄ y, continuous (Œª x, g x y)) :
  ‚àÄ (x ‚àà closure s) (y ‚àà closure t), f x y = g x y :=
suffices closure s ‚äÜ ‚ãÇ y ‚àà closure t, {x | f x y = g x y}, by simpa only [subset_def, mem_Inter],
closure_minimal (Œª x hx, mem_Inter‚ÇÇ.2 $ set.eq_on.closure (h x hx) (hf‚ÇÅ _) (hg‚ÇÅ _)) $
  is_closed_bInter $ Œª y hy, is_closed_eq (hf‚ÇÇ _) (hg‚ÇÇ _)

lemma eq_on_closure‚ÇÇ [t2_space Œ±] {s : set Œ≤} {t : set Œ≥} {f g : Œ≤ ‚Üí Œ≥ ‚Üí Œ±}
  (h : ‚àÄ (x ‚àà s) (y ‚àà t), f x y = g x y)
  (hf : continuous (uncurry f)) (hg : continuous (uncurry g)) :
  ‚àÄ (x ‚àà closure s) (y ‚àà closure t), f x y = g x y :=
eq_on_closure‚ÇÇ' h (Œª x, continuous_uncurry_left x hf) (Œª x, continuous_uncurry_right x hf)
  (Œª y, continuous_uncurry_left y hg) (Œª y, continuous_uncurry_right y hg)

/-- If `f x = g x` for all `x ‚àà s` and `f`, `g` are continuous on `t`, `s ‚äÜ t ‚äÜ closure s`, then
`f x = g x` for all `x ‚àà t`. See also `set.eq_on.closure`. -/
lemma set.eq_on.of_subset_closure [t2_space Œ±] {s t : set Œ≤} {f g : Œ≤ ‚Üí Œ±} (h : eq_on f g s)
  (hf : continuous_on f t) (hg : continuous_on g t) (hst : s ‚äÜ t) (hts : t ‚äÜ closure s) :
  eq_on f g t :=
begin
  intros x hx,
  haveI : (ùìù[s] x).ne_bot, from mem_closure_iff_cluster_pt.mp (hts hx),
  exact tendsto_nhds_unique_of_eventually_eq ((hf x hx).mono_left $ nhds_within_mono _ hst)
    ((hg x hx).mono_left $ nhds_within_mono _ hst) (h.eventually_eq_of_mem self_mem_nhds_within)
end

lemma function.left_inverse.closed_range [t2_space Œ±] {f : Œ± ‚Üí Œ≤} {g : Œ≤ ‚Üí Œ±}
  (h : function.left_inverse f g) (hf : continuous f) (hg : continuous g) :
  is_closed (range g) :=
have eq_on (g ‚àò f) id (closure $ range g),
  from h.right_inv_on_range.eq_on.closure (hg.comp hf) continuous_id,
is_closed_of_closure_subset $ Œª x hx,
calc x = g (f x) : (this hx).symm
   ... ‚àà _ : mem_range_self _

lemma function.left_inverse.closed_embedding [t2_space Œ±] {f : Œ± ‚Üí Œ≤} {g : Œ≤ ‚Üí Œ±}
  (h : function.left_inverse f g) (hf : continuous f) (hg : continuous g) :
  closed_embedding g :=
‚ü®h.embedding hf hg, h.closed_range hf hg‚ü©

lemma is_compact_is_compact_separated [t2_space Œ±] {s t : set Œ±}
  (hs : is_compact s) (ht : is_compact t) (hst : disjoint s t) :
  separated_nhds s t :=
by simp only [separated_nhds, prod_subset_compl_diagonal_iff_disjoint.symm] at ‚ä¢ hst;
   exact generalized_tube_lemma hs ht is_closed_diagonal.is_open_compl hst

/-- In a `t2_space`, every compact set is closed. -/
lemma is_compact.is_closed [t2_space Œ±] {s : set Œ±} (hs : is_compact s) : is_closed s :=
is_open_compl_iff.1 $ is_open_iff_forall_mem_open.mpr $ assume x hx,
  let ‚ü®u, v, uo, vo, su, xv, uv‚ü© :=
    is_compact_is_compact_separated hs is_compact_singleton (disjoint_singleton_right.2 hx) in
‚ü®v, (uv.mono_left $ show s ‚â§ u, from su).subset_compl_left, vo, by simpa using xv‚ü©

@[simp] lemma filter.coclosed_compact_eq_cocompact [t2_space Œ±] :
  coclosed_compact Œ± = cocompact Œ± :=
by simp [coclosed_compact, cocompact, infi_and', and_iff_right_of_imp is_compact.is_closed]

@[simp] lemma bornology.relatively_compact_eq_in_compact [t2_space Œ±] :
  bornology.relatively_compact Œ± = bornology.in_compact Œ± :=
by rw bornology.ext_iff; exact filter.coclosed_compact_eq_cocompact

/-- If `V : Œπ ‚Üí set Œ±` is a decreasing family of compact sets then any neighborhood of
`‚ãÇ i, V i` contains some `V i`. This is a version of `exists_subset_nhd_of_compact'` where we
don't need to assume each `V i` closed because it follows from compactness since `Œ±` is
assumed to be Hausdorff. -/
lemma exists_subset_nhds_of_is_compact [t2_space Œ±] {Œπ : Type*} [nonempty Œπ] {V : Œπ ‚Üí set Œ±}
  (hV : directed (‚äá) V) (hV_cpct : ‚àÄ i, is_compact (V i)) {U : set Œ±}
  (hU : ‚àÄ x ‚àà ‚ãÇ i, V i, U ‚àà ùìù x) : ‚àÉ i, V i ‚äÜ U :=
exists_subset_nhds_of_is_compact' hV hV_cpct (Œª i, (hV_cpct i).is_closed) hU

lemma compact_exhaustion.is_closed [t2_space Œ±] (K : compact_exhaustion Œ±) (n : ‚Ñï) :
  is_closed (K n) :=
(K.is_compact n).is_closed

lemma is_compact.inter [t2_space Œ±] {s t : set Œ±} (hs : is_compact s) (ht : is_compact t) :
  is_compact (s ‚à© t) :=
hs.inter_right $ ht.is_closed

lemma is_compact_closure_of_subset_compact [t2_space Œ±] {s t : set Œ±}
  (ht : is_compact t) (h : s ‚äÜ t) : is_compact (closure s) :=
is_compact_of_is_closed_subset ht is_closed_closure (closure_minimal h ht.is_closed)

@[simp]
lemma exists_compact_superset_iff [t2_space Œ±] {s : set Œ±} :
  (‚àÉ K, is_compact K ‚àß s ‚äÜ K) ‚Üî is_compact (closure s) :=
‚ü®Œª ‚ü®K, hK, hsK‚ü©, is_compact_closure_of_subset_compact hK hsK, Œª h, ‚ü®closure s, h, subset_closure‚ü©‚ü©

lemma image_closure_of_is_compact [t2_space Œ≤]
  {s : set Œ±} (hs : is_compact (closure s)) {f : Œ± ‚Üí Œ≤} (hf : continuous_on f (closure s)) :
  f '' closure s = closure (f '' s) :=
subset.antisymm hf.image_closure $ closure_minimal (image_subset f subset_closure)
  (hs.image_of_continuous_on hf).is_closed

/-- If a compact set is covered by two open sets, then we can cover it by two compact subsets. -/
lemma is_compact.binary_compact_cover [t2_space Œ±] {K U V : set Œ±} (hK : is_compact K)
  (hU : is_open U) (hV : is_open V) (h2K : K ‚äÜ U ‚à™ V) :
  ‚àÉ K‚ÇÅ K‚ÇÇ : set Œ±, is_compact K‚ÇÅ ‚àß is_compact K‚ÇÇ ‚àß K‚ÇÅ ‚äÜ U ‚àß K‚ÇÇ ‚äÜ V ‚àß K = K‚ÇÅ ‚à™ K‚ÇÇ :=
begin
  obtain ‚ü®O‚ÇÅ, O‚ÇÇ, h1O‚ÇÅ, h1O‚ÇÇ, h2O‚ÇÅ, h2O‚ÇÇ, hO‚ü© :=
    is_compact_is_compact_separated (hK.diff hU) (hK.diff hV)
    (by rwa [disjoint_iff_inter_eq_empty, diff_inter_diff, diff_eq_empty]),
  exact ‚ü®_, _, hK.diff h1O‚ÇÅ, hK.diff h1O‚ÇÇ, by rwa [diff_subset_comm], by rwa [diff_subset_comm],
    by rw [‚Üê diff_inter, hO.inter_eq, diff_empty]‚ü©
end

/-- A continuous map from a compact space to a Hausdorff space is a closed map. -/
protected lemma continuous.is_closed_map [compact_space Œ±] [t2_space Œ≤] {f : Œ± ‚Üí Œ≤}
  (h : continuous f) : is_closed_map f :=
Œª s hs, (hs.is_compact.image h).is_closed

/-- An injective continuous map from a compact space to a Hausdorff space is a closed embedding. -/
lemma continuous.closed_embedding [compact_space Œ±] [t2_space Œ≤] {f : Œ± ‚Üí Œ≤} (h : continuous f)
  (hf : function.injective f) : closed_embedding f :=
closed_embedding_of_continuous_injective_closed h hf h.is_closed_map

/-- A surjective continuous map from a compact space to a Hausdorff space is a quotient map. -/
lemma quotient_map.of_surjective_continuous [compact_space Œ±] [t2_space Œ≤] {f : Œ± ‚Üí Œ≤}
  (hsurj : surjective f) (hcont : continuous f) : quotient_map f :=
hcont.is_closed_map.to_quotient_map hcont hsurj

section
open finset function
/-- For every finite open cover `U·µ¢` of a compact set, there exists a compact cover `K·µ¢ ‚äÜ U·µ¢`. -/
lemma is_compact.finite_compact_cover [t2_space Œ±] {s : set Œ±} (hs : is_compact s)
  {Œπ} (t : finset Œπ) (U : Œπ ‚Üí set Œ±) (hU : ‚àÄ i ‚àà t, is_open (U i)) (hsC : s ‚äÜ ‚ãÉ i ‚àà t, U i) :
  ‚àÉ K : Œπ ‚Üí set Œ±, (‚àÄ i, is_compact (K i)) ‚àß (‚àÄi, K i ‚äÜ U i) ‚àß s = ‚ãÉ i ‚àà t, K i :=
begin
  classical,
  induction t using finset.induction with x t hx ih generalizing U hU s hs hsC,
  { refine ‚ü®Œª _, ‚àÖ, Œª i, is_compact_empty, Œª i, empty_subset _, _‚ü©,
    simpa only [subset_empty_iff, Union_false, Union_empty] using hsC },
  simp only [finset.set_bUnion_insert] at hsC,
  simp only [finset.mem_insert] at hU,
  have hU' : ‚àÄ i ‚àà t, is_open (U i) := Œª i hi, hU i (or.inr hi),
  rcases hs.binary_compact_cover (hU x (or.inl rfl)) (is_open_bUnion hU') hsC
    with ‚ü®K‚ÇÅ, K‚ÇÇ, h1K‚ÇÅ, h1K‚ÇÇ, h2K‚ÇÅ, h2K‚ÇÇ, hK‚ü©,
  rcases ih U hU' h1K‚ÇÇ h2K‚ÇÇ with ‚ü®K, h1K, h2K, h3K‚ü©,
  refine ‚ü®update K x K‚ÇÅ, _, _, _‚ü©,
  { intros i, by_cases hi : i = x,
    { simp only [update_same, hi, h1K‚ÇÅ] },
    { rw [‚Üê ne.def] at hi, simp only [update_noteq hi, h1K] }},
  { intros i, by_cases hi : i = x,
    { simp only [update_same, hi, h2K‚ÇÅ] },
    { rw [‚Üê ne.def] at hi, simp only [update_noteq hi, h2K] }},
  { simp only [set_bUnion_insert_update _ hx, hK, h3K] }
end
end

lemma locally_compact_of_compact_nhds [t2_space Œ±] (h : ‚àÄ x : Œ±, ‚àÉ s, s ‚àà ùìù x ‚àß is_compact s) :
  locally_compact_space Œ± :=
‚ü®assume x n hn,
  let ‚ü®u, un, uo, xu‚ü© := mem_nhds_iff.mp hn in
  let ‚ü®k, kx, kc‚ü© := h x in
  -- K is compact but not necessarily contained in N.
  -- K \ U is again compact and doesn't contain x, so
  -- we may find open sets V, W separating x from K \ U.
  -- Then K \ W is a compact neighborhood of x contained in U.
  let ‚ü®v, w, vo, wo, xv, kuw, vw‚ü© :=
    is_compact_is_compact_separated is_compact_singleton (kc.diff uo)
      (disjoint_singleton_left.2 $ Œª h, h.2 xu) in
  have wn : w·∂ú ‚àà ùìù x, from
   mem_nhds_iff.mpr ‚ü®v, vw.subset_compl_right, vo, singleton_subset_iff.mp xv‚ü©,
  ‚ü®k \ w,
   filter.inter_mem kx wn,
   subset.trans (diff_subset_comm.mp kuw) un,
   kc.diff wo‚ü©‚ü©

@[priority 100] -- see Note [lower instance priority]
instance locally_compact_of_compact [t2_space Œ±] [compact_space Œ±] : locally_compact_space Œ± :=
locally_compact_of_compact_nhds (assume x, ‚ü®univ, is_open_univ.mem_nhds trivial, is_compact_univ‚ü©)

/-- In a locally compact T‚ÇÇ space, every point has an open neighborhood with compact closure -/
lemma exists_open_with_compact_closure [locally_compact_space Œ±] [t2_space Œ±] (x : Œ±) :
  ‚àÉ (U : set Œ±), is_open U ‚àß x ‚àà U ‚àß is_compact (closure U) :=
begin
  rcases exists_compact_mem_nhds x with ‚ü®K, hKc, hxK‚ü©,
  rcases mem_nhds_iff.1 hxK with ‚ü®t, h1t, h2t, h3t‚ü©,
  exact ‚ü®t, h2t, h3t, is_compact_closure_of_subset_compact hKc h1t‚ü©
end

/--
In a locally compact T‚ÇÇ space, every compact set has an open neighborhood with compact closure.
-/
lemma exists_open_superset_and_is_compact_closure [locally_compact_space Œ±] [t2_space Œ±]
  {K : set Œ±} (hK : is_compact K) : ‚àÉ V, is_open V ‚àß K ‚äÜ V ‚àß is_compact (closure V) :=
begin
  rcases exists_compact_superset hK with ‚ü®K', hK', hKK'‚ü©,
  refine ‚ü®interior K', is_open_interior, hKK',
    is_compact_closure_of_subset_compact hK' interior_subset‚ü©,
end

/--
In a locally compact T‚ÇÇ space, given a compact set `K` inside an open set `U`, we can find a
open set `V` between these sets with compact closure: `K ‚äÜ V` and the closure of `V` is inside `U`.
-/
lemma exists_open_between_and_is_compact_closure [locally_compact_space Œ±] [t2_space Œ±]
  {K U : set Œ±} (hK : is_compact K) (hU : is_open U) (hKU : K ‚äÜ U) :
  ‚àÉ V, is_open V ‚àß K ‚äÜ V ‚àß closure V ‚äÜ U ‚àß is_compact (closure V) :=
begin
  rcases exists_compact_between hK hU hKU with ‚ü®V, hV, hKV, hVU‚ü©,
  exact ‚ü®interior V, is_open_interior, hKV,
    (closure_minimal interior_subset hV.is_closed).trans hVU,
    is_compact_closure_of_subset_compact hV interior_subset‚ü©,
end

lemma is_preirreducible_iff_subsingleton [t2_space Œ±] {S : set Œ±} :
  is_preirreducible S ‚Üî S.subsingleton :=
begin
  refine ‚ü®Œª h x hx y hy, _, set.subsingleton.is_preirreducible‚ü©,
  by_contradiction e,
  obtain ‚ü®U, V, hU, hV, hxU, hyV, h'‚ü© := t2_separation e,
  exact ((h U V hU hV ‚ü®x, hx, hxU‚ü© ‚ü®y, hy, hyV‚ü©).mono $ inter_subset_right _ _).not_disjoint h',
end

alias is_preirreducible_iff_subsingleton ‚Üî is_preirreducible.subsingleton _
attribute [protected] is_preirreducible.subsingleton

lemma is_irreducible_iff_singleton [t2_space Œ±] {S : set Œ±} :
  is_irreducible S ‚Üî ‚àÉ x, S = {x} :=
by rw [is_irreducible, is_preirreducible_iff_subsingleton,
  exists_eq_singleton_iff_nonempty_subsingleton]

/-- There does not exist a nontrivial preirreducible T‚ÇÇ space. -/
lemma not_preirreducible_nontrivial_t2 (Œ±) [topological_space Œ±] [preirreducible_space Œ±]
  [nontrivial Œ±] [t2_space Œ±] : false :=
(preirreducible_space.is_preirreducible_univ Œ±).subsingleton.not_nontrivial nontrivial_univ

end separation

section regular_space

/-- A topological space is called a *regular space* if for any closed set `s` and `a ‚àâ s`, there
exist disjoint open sets `U ‚äá s` and `V ‚àã a`. We formulate this condition in terms of `disjoint`ness
of filters `ùìùÀ¢ s` and `ùìù a`. -/
@[mk_iff] class regular_space (X : Type u) [topological_space X] : Prop :=
(regular : ‚àÄ {s : set X} {a}, is_closed s ‚Üí a ‚àâ s ‚Üí disjoint (ùìùÀ¢ s) (ùìù a))

lemma regular_space_tfae (X : Type u) [topological_space X] :
  tfae [regular_space X,
    ‚àÄ (s : set X) (a ‚àâ closure s), disjoint (ùìùÀ¢ s) (ùìù a),
    ‚àÄ (a : X) (s : set X), disjoint (ùìùÀ¢ s) (ùìù a) ‚Üî a ‚àâ closure s,
    ‚àÄ (a : X) (s ‚àà ùìù a), ‚àÉ t ‚àà ùìù a, is_closed t ‚àß t ‚äÜ s,
    ‚àÄ a : X, (ùìù a).lift' closure ‚â§ ùìù a,
    ‚àÄ a : X, (ùìù a).lift' closure = ùìù a] :=
begin
  tfae_have : 1 ‚Üî 5,
  { rw [regular_space_iff, (@compl_surjective (set X) _).forall, forall_swap],
    simp only [is_closed_compl_iff, mem_compl_iff, not_not, @and_comm (_ ‚àà _),
      (nhds_basis_opens _).lift'_closure.le_basis_iff (nhds_basis_opens _), and_imp,
      (nhds_basis_opens _).disjoint_iff_right, exists_prop, ‚Üê subset_interior_iff_mem_nhds_set,
      interior_compl, compl_subset_compl] },
  tfae_have : 5 ‚Üí 6, from Œª h a, (h a).antisymm (ùìù _).le_lift'_closure,
  tfae_have : 6 ‚Üí 4,
  { intros H a s hs,
    rw [‚Üê H] at hs,
    rcases (ùìù a).basis_sets.lift'_closure.mem_iff.mp hs with ‚ü®U, hU, hUs‚ü©,
    exact ‚ü®closure U, mem_of_superset hU subset_closure, is_closed_closure, hUs‚ü© },
  tfae_have : 4 ‚Üí 2,
  { intros H s a ha,
    have ha' : s·∂ú ‚àà ùìù a, by rwa [‚Üê mem_interior_iff_mem_nhds, interior_compl],
    rcases H _ _ ha' with ‚ü®U, hU, hUc, hUs‚ü©,
    refine disjoint_of_disjoint_of_mem disjoint_compl_left _ hU,
    rwa [‚Üê subset_interior_iff_mem_nhds_set, hUc.is_open_compl.interior_eq, subset_compl_comm] },
  tfae_have : 2 ‚Üí 3,
  { refine Œª H a s, ‚ü®Œª hd has, mem_closure_iff_nhds_ne_bot.mp has _, H s a‚ü©,
    exact (hd.symm.mono_right $ @principal_le_nhds_set _ _ s).eq_bot },
  tfae_have : 3 ‚Üí 1, from Œª H, ‚ü®Œª s a hs ha, (H _ _).mpr $ hs.closure_eq.symm ‚ñ∏ ha‚ü©,
  tfae_finish
end

lemma regular_space.of_lift'_closure (h : ‚àÄ a : Œ±, (ùìù a).lift' closure = ùìù a) : regular_space Œ± :=
iff.mpr ((regular_space_tfae Œ±).out 0 5) h

lemma regular_space.of_basis {Œπ : Œ± ‚Üí Sort*} {p : Œ† a, Œπ a ‚Üí Prop} {s : Œ† a, Œπ a ‚Üí set Œ±}
  (h‚ÇÅ : ‚àÄ a, (ùìù a).has_basis (p a) (s a)) (h‚ÇÇ : ‚àÄ a i, p a i ‚Üí is_closed (s a i)) :
  regular_space Œ± :=
regular_space.of_lift'_closure $ Œª a, (h‚ÇÅ a).lift'_closure_eq_self (h‚ÇÇ a)

lemma regular_space.of_exists_mem_nhds_is_closed_subset
  (h : ‚àÄ (a : Œ±) (s ‚àà ùìù a), ‚àÉ t ‚àà ùìù a, is_closed t ‚àß t ‚äÜ s) : regular_space Œ± :=
iff.mpr ((regular_space_tfae Œ±).out 0 3) h

variables [regular_space Œ±] {a : Œ±} {s : set Œ±}

lemma disjoint_nhds_set_nhds : disjoint (ùìùÀ¢ s) (ùìù a) ‚Üî a ‚àâ closure s :=
iff.mp ((regular_space_tfae Œ±).out 0 2) ‚Äπ_‚Ä∫ _ _

lemma disjoint_nhds_nhds_set : disjoint (ùìù a) (ùìùÀ¢ s) ‚Üî a ‚àâ closure s :=
disjoint.comm.trans disjoint_nhds_set_nhds

lemma exists_mem_nhds_is_closed_subset {a : Œ±} {s : set Œ±} (h : s ‚àà ùìù a) :
  ‚àÉ t ‚àà ùìù a, is_closed t ‚àß t ‚äÜ s :=
iff.mp ((regular_space_tfae Œ±).out 0 3) ‚Äπ_‚Ä∫ _ _ h

lemma closed_nhds_basis (a : Œ±) : (ùìù a).has_basis (Œª s : set Œ±, s ‚àà ùìù a ‚àß is_closed s) id :=
has_basis_self.2 (Œª _, exists_mem_nhds_is_closed_subset)

lemma lift'_nhds_closure (a : Œ±) : (ùìù a).lift' closure = ùìù a :=
(closed_nhds_basis a).lift'_closure_eq_self (Œª s hs, hs.2)

lemma filter.has_basis.nhds_closure {Œπ : Sort*} {a : Œ±} {p : Œπ ‚Üí Prop} {s : Œπ ‚Üí set Œ±}
  (h : (ùìù a).has_basis p s) : (ùìù a).has_basis p (Œª i, closure (s i)) :=
lift'_nhds_closure a ‚ñ∏ h.lift'_closure

lemma has_basis_nhds_closure (a : Œ±) : (ùìù a).has_basis (Œª s, s ‚àà ùìù a) closure :=
(ùìù a).basis_sets.nhds_closure

lemma has_basis_opens_closure (a : Œ±) : (ùìù a).has_basis (Œª s, a ‚àà s ‚àß is_open s) closure :=
(nhds_basis_opens a).nhds_closure

lemma topological_space.is_topological_basis.nhds_basis_closure
  {B : set (set Œ±)} (hB : topological_space.is_topological_basis B) (a : Œ±) :
  (ùìù a).has_basis (Œª s : set Œ±, a ‚àà s ‚àß s ‚àà B) closure :=
by simpa only [and_comm] using hB.nhds_has_basis.nhds_closure

lemma topological_space.is_topological_basis.exists_closure_subset
  {B : set (set Œ±)} (hB : topological_space.is_topological_basis B) {a : Œ±} {s : set Œ±}
  (h : s ‚àà ùìù a) :
  ‚àÉ t ‚àà B, a ‚àà t ‚àß closure t ‚äÜ s :=
by simpa only [exists_prop, and.assoc] using hB.nhds_has_basis.nhds_closure.mem_iff.mp h

lemma disjoint_nhds_nhds_iff_not_specializes {a b : Œ±} :
  disjoint (ùìù a) (ùìù b) ‚Üî ¬¨a ‚§≥ b :=
by rw [‚Üê nhds_set_singleton, disjoint_nhds_set_nhds, specializes_iff_mem_closure]

lemma specializes_comm {a b : Œ±} : a ‚§≥ b ‚Üî b ‚§≥ a :=
by simp only [‚Üê disjoint_nhds_nhds_iff_not_specializes.not_left, disjoint.comm]

alias specializes_comm ‚Üî specializes.symm _

lemma specializes_iff_inseparable {a b : Œ±} : a ‚§≥ b ‚Üî inseparable a b :=
‚ü®Œª h, h.antisymm h.symm, le_of_eq‚ü©

lemma is_closed_set_of_specializes : is_closed {p : Œ± √ó Œ± | p.1 ‚§≥ p.2} :=
by simp only [‚Üê is_open_compl_iff, compl_set_of, ‚Üê disjoint_nhds_nhds_iff_not_specializes,
  is_open_set_of_disjoint_nhds_nhds]

lemma is_closed_set_of_inseparable : is_closed {p : Œ± √ó Œ± | inseparable p.1 p.2} :=
by simp only [‚Üê specializes_iff_inseparable, is_closed_set_of_specializes]

protected lemma inducing.regular_space [topological_space Œ≤] {f : Œ≤ ‚Üí Œ±} (hf : inducing f) :
  regular_space Œ≤ :=
regular_space.of_basis (Œª b, by { rw [hf.nhds_eq_comap b], exact (closed_nhds_basis _).comap _ }) $
  Œª b s hs, hs.2.preimage hf.continuous

lemma regular_space_induced (f : Œ≤ ‚Üí Œ±) : @regular_space Œ≤ (induced f ‚Äπ_‚Ä∫) :=
by { letI := induced f ‚Äπ_‚Ä∫, exact inducing.regular_space ‚ü®rfl‚ü© }

lemma regular_space_Inf {X} {T : set (topological_space X)} (h : ‚àÄ t ‚àà T, @regular_space X t) :
  @regular_space X (Inf T) :=
begin
  letI := Inf T,
  have : ‚àÄ a, (ùìù a).has_basis
    (Œª If : Œ£ I : set T, I ‚Üí set X,
      If.1.finite ‚àß ‚àÄ i : If.1, If.2 i ‚àà @nhds X i a ‚àß is_closed[‚Üëi] (If.2 i))
    (Œª If, ‚ãÇ i : If.1, If.snd i),
  { intro a,
    rw [nhds_Inf, ‚Üê infi_subtype''],
    exact has_basis_infi (Œª t : T, @closed_nhds_basis X t (h t t.2) a) },
  refine regular_space.of_basis this (Œª a If hIf, is_closed_Inter $ Œª i, _),
  exact (hIf.2 i).2.mono (Inf_le (i : T).2)
end

lemma regular_space_infi {Œπ X} {t : Œπ ‚Üí topological_space X} (h : ‚àÄ i, @regular_space X (t i)) :
  @regular_space X (infi t) :=
regular_space_Inf $ forall_range_iff.mpr h

lemma regular_space.inf {X} {t‚ÇÅ t‚ÇÇ : topological_space X} (h‚ÇÅ : @regular_space X t‚ÇÅ)
  (h‚ÇÇ : @regular_space X t‚ÇÇ) : @regular_space X (t‚ÇÅ ‚äì t‚ÇÇ) :=
by { rw [inf_eq_infi], exact regular_space_infi (bool.forall_bool.2 ‚ü®h‚ÇÇ, h‚ÇÅ‚ü©) }

instance {p : Œ± ‚Üí Prop} : regular_space (subtype p) :=
embedding_subtype_coe.to_inducing.regular_space

instance [topological_space Œ≤] [regular_space Œ≤] : regular_space (Œ± √ó Œ≤) :=
(regular_space_induced prod.fst).inf (regular_space_induced prod.snd)

instance {Œπ : Type*} {œÄ : Œπ ‚Üí Type*} [Œ† i, topological_space (œÄ i)] [‚àÄ i, regular_space (œÄ i)] :
  regular_space (Œ† i, œÄ i) :=
regular_space_infi $ Œª i, regular_space_induced _

end regular_space

section t3

/-- A T‚ÇÉ space is a T‚ÇÄ space which is a regular space. Any T‚ÇÉ space is a T‚ÇÅ space, a T‚ÇÇ space, and
a T‚ÇÇ.‚ÇÖ space.  -/
class t3_space (Œ± : Type u) [topological_space Œ±] extends t0_space Œ±, regular_space Œ± : Prop

@[priority 100] -- see Note [lower instance priority]
instance t3_space.t2_5_space [t3_space Œ±] : t2_5_space Œ± :=
begin
  refine ‚ü®Œª x y hne, _‚ü©,
  rw [lift'_nhds_closure, lift'_nhds_closure],
  have aux : x ‚àâ closure {y} ‚à® y ‚àâ closure {x},
    from (t0_space_iff_or_not_mem_closure Œ±).mp infer_instance x y hne,
  wlog H : x ‚àâ closure ({y} : set Œ±),
  { refine (this y x hne.symm aux.symm (aux.resolve_left H)).symm },
  { rwa [‚Üê disjoint_nhds_nhds_set, nhds_set_singleton] at H },
end

protected lemma embedding.t3_space [topological_space Œ≤] [t3_space Œ≤] {f : Œ± ‚Üí Œ≤}
  (hf : embedding f) : t3_space Œ± :=
{ to_t0_space := hf.t0_space,
  to_regular_space := hf.to_inducing.regular_space }

instance subtype.t3_space [t3_space Œ±] {p : Œ± ‚Üí Prop} : t3_space (subtype p) :=
embedding_subtype_coe.t3_space

instance [topological_space Œ≤] [t3_space Œ±] [t3_space Œ≤] : t3_space (Œ± √ó Œ≤) := ‚ü®‚ü©

instance {Œπ : Type*} {œÄ : Œπ ‚Üí Type*} [Œ† i, topological_space (œÄ i)] [Œ† i, t3_space (œÄ i)] :
  t3_space (Œ† i, œÄ i) := ‚ü®‚ü©

/-- Given two points `x ‚â† y`, we can find neighbourhoods `x ‚àà V‚ÇÅ ‚äÜ U‚ÇÅ` and `y ‚àà V‚ÇÇ ‚äÜ U‚ÇÇ`,
with the `V‚Çñ` closed and the `U‚Çñ` open, such that the `U‚Çñ` are disjoint. -/
lemma disjoint_nested_nhds [t3_space Œ±] {x y : Œ±} (h : x ‚â† y) :
  ‚àÉ (U‚ÇÅ V‚ÇÅ ‚àà ùìù x) (U‚ÇÇ V‚ÇÇ ‚àà ùìù y), is_closed V‚ÇÅ ‚àß is_closed V‚ÇÇ ‚àß is_open U‚ÇÅ ‚àß is_open U‚ÇÇ ‚àß
  V‚ÇÅ ‚äÜ U‚ÇÅ ‚àß V‚ÇÇ ‚äÜ U‚ÇÇ ‚àß disjoint U‚ÇÅ U‚ÇÇ :=
begin
  rcases t2_separation h with ‚ü®U‚ÇÅ, U‚ÇÇ, U‚ÇÅ_op, U‚ÇÇ_op, x_in, y_in, H‚ü©,
  rcases exists_mem_nhds_is_closed_subset (U‚ÇÅ_op.mem_nhds x_in) with ‚ü®V‚ÇÅ, V‚ÇÅ_in, V‚ÇÅ_closed, h‚ÇÅ‚ü©,
  rcases exists_mem_nhds_is_closed_subset (U‚ÇÇ_op.mem_nhds y_in) with ‚ü®V‚ÇÇ, V‚ÇÇ_in, V‚ÇÇ_closed, h‚ÇÇ‚ü©,
  exact ‚ü®U‚ÇÅ, mem_of_superset V‚ÇÅ_in h‚ÇÅ, V‚ÇÅ, V‚ÇÅ_in, U‚ÇÇ, mem_of_superset V‚ÇÇ_in h‚ÇÇ, V‚ÇÇ, V‚ÇÇ_in,
    V‚ÇÅ_closed, V‚ÇÇ_closed, U‚ÇÅ_op, U‚ÇÇ_op, h‚ÇÅ, h‚ÇÇ, H‚ü©
end

open separation_quotient

/-- The `separation_quotient` of a regular space is a T‚ÇÉ space. -/
instance [regular_space Œ±] : t3_space (separation_quotient Œ±) :=
{ regular := Œª s, surjective_mk.forall.2 $ Œª a hs ha,
    by { rw [‚Üê disjoint_comap_iff surjective_mk, comap_mk_nhds_mk, comap_mk_nhds_set],
         exact regular_space.regular (hs.preimage continuous_mk) ha } }

end t3

section normality

/-- A T‚ÇÑ space, also known as a normal space (although this condition sometimes
  omits T‚ÇÇ), is one in which for every pair of disjoint closed sets `C` and `D`,
  there exist disjoint open sets containing `C` and `D` respectively. -/
class normal_space (Œ± : Type u) [topological_space Œ±] extends t1_space Œ± : Prop :=
(normal : ‚àÄ s t : set Œ±, is_closed s ‚Üí is_closed t ‚Üí disjoint s t ‚Üí separated_nhds s t)

theorem normal_separation [normal_space Œ±] {s t : set Œ±}
  (H1 : is_closed s) (H2 : is_closed t) (H3 : disjoint s t) :
  separated_nhds s t :=
normal_space.normal s t H1 H2 H3

theorem normal_exists_closure_subset [normal_space Œ±] {s t : set Œ±} (hs : is_closed s)
  (ht : is_open t) (hst : s ‚äÜ t) :
  ‚àÉ u, is_open u ‚àß s ‚äÜ u ‚àß closure u ‚äÜ t :=
begin
  have : disjoint s t·∂ú, from set.disjoint_left.mpr (Œª x hxs hxt, hxt (hst hxs)),
  rcases normal_separation hs (is_closed_compl_iff.2 ht) this
    with ‚ü®s', t', hs', ht', hss', htt', hs't'‚ü©,
  refine ‚ü®s', hs', hss',
    subset.trans (closure_minimal _ (is_closed_compl_iff.2 ht')) (compl_subset_comm.1 htt')‚ü©,
  exact Œª x hxs hxt, hs't'.le_bot ‚ü®hxs, hxt‚ü©
end

@[priority 100] -- see Note [lower instance priority]
instance normal_space.t3_space [normal_space Œ±] : t3_space Œ± :=
{ regular := Œª s x hs hxs, let ‚ü®u, v, hu, hv, hsu, hxv, huv‚ü© :=
    normal_separation hs is_closed_singleton (disjoint_singleton_right.mpr hxs) in
    disjoint_of_disjoint_of_mem huv (hu.mem_nhds_set.2 hsu) (hv.mem_nhds $ hxv rfl) }

-- We can't make this an instance because it could cause an instance loop.
lemma normal_of_compact_t2 [compact_space Œ±] [t2_space Œ±] : normal_space Œ± :=
‚ü®Œª s t hs ht, is_compact_is_compact_separated hs.is_compact ht.is_compact‚ü©

protected lemma closed_embedding.normal_space [topological_space Œ≤] [normal_space Œ≤] {f : Œ± ‚Üí Œ≤}
  (hf : closed_embedding f) : normal_space Œ± :=
{ to_t1_space := hf.to_embedding.t1_space,
  normal :=
  begin
    intros s t hs ht hst,
    have H : separated_nhds (f '' s) (f '' t),
      from normal_space.normal (f '' s) (f '' t) (hf.is_closed_map s hs) (hf.is_closed_map t ht)
        (disjoint_image_of_injective hf.inj hst),
    exact (H.preimage hf.continuous).mono (subset_preimage_image _ _) (subset_preimage_image _ _)
  end }

namespace separation_quotient

/-- The `separation_quotient` of a normal space is a T‚ÇÑ space. We don't have separate typeclasses
for normal spaces (without T‚ÇÅ assumption) and T‚ÇÑ spaces, so we use the same class for assumption
and for conclusion.

One can prove this using a homeomorphism between `Œ±` and `separation_quotient Œ±`. We give an
alternative proof that works without assuming that `Œ±` is a T‚ÇÅ space. -/
instance [normal_space Œ±] : normal_space (separation_quotient Œ±) :=
{ normal := Œª s t hs ht hd, separated_nhds_iff_disjoint.2 $
    begin
      rw [‚Üê disjoint_comap_iff surjective_mk, comap_mk_nhds_set, comap_mk_nhds_set],
      exact separated_nhds_iff_disjoint.1 (normal_separation (hs.preimage continuous_mk)
        (ht.preimage continuous_mk) (hd.preimage mk))
    end }

end separation_quotient

variable (Œ±)

/-- A T‚ÇÉ topological space with second countable topology is a normal space.
This lemma is not an instance to avoid a loop. -/
lemma normal_space_of_t3_second_countable [second_countable_topology Œ±] [t3_space Œ±] :
  normal_space Œ± :=
begin
  have key : ‚àÄ {s t : set Œ±}, is_closed t ‚Üí disjoint s t ‚Üí
    ‚àÉ U : set (countable_basis Œ±), (s ‚äÜ ‚ãÉ u ‚àà U, ‚Üëu) ‚àß
      (‚àÄ u ‚àà U, disjoint (closure ‚Üëu) t) ‚àß
      ‚àÄ n : ‚Ñï, is_closed (‚ãÉ (u ‚àà U) (h : encodable.encode u ‚â§ n), closure (u : set Œ±)),
  { intros s t hc hd,
    rw disjoint_left at hd,
    have : ‚àÄ x ‚àà s, ‚àÉ U ‚àà countable_basis Œ±, x ‚àà U ‚àß disjoint (closure U) t,
    { intros x hx,
      rcases (is_basis_countable_basis Œ±).exists_closure_subset (hc.is_open_compl.mem_nhds (hd hx))
        with ‚ü®u, hu, hxu, hut‚ü©,
      exact ‚ü®u, hu, hxu, disjoint_left.2 hut‚ü© },
    choose! U hu hxu hd,
    set V : s ‚Üí countable_basis Œ± := maps_to.restrict _ _ _ hu,
    refine ‚ü®range V, _, forall_range_iff.2 $ subtype.forall.2 hd, Œª n, _‚ü©,
    { rw bUnion_range,
      exact Œª x hx, mem_Union.2 ‚ü®‚ü®x, hx‚ü©, hxu x hx‚ü© },
    { simp only [‚Üê supr_eq_Union, supr_and'],
      exact is_closed_bUnion (((finite_le_nat n).preimage_embedding (encodable.encode' _)).subset $
        inter_subset_right _ _) (Œª u hu, is_closed_closure) } },
  refine ‚ü®Œª s t hs ht hd, _‚ü©,
  rcases key ht hd with ‚ü®U, hsU, hUd, hUc‚ü©,
  rcases key hs hd.symm with ‚ü®V, htV, hVd, hVc‚ü©,
  refine ‚ü®‚ãÉ u ‚àà U, ‚Üëu \ ‚ãÉ (v ‚àà V) (hv : encodable.encode v ‚â§ encodable.encode u), closure ‚Üëv,
    ‚ãÉ v ‚àà V, ‚Üëv \ ‚ãÉ (u ‚àà U) (hu : encodable.encode u ‚â§ encodable.encode v), closure ‚Üëu,
    is_open_bUnion $ Œª u hu, (is_open_of_mem_countable_basis u.2).sdiff (hVc _),
    is_open_bUnion $ Œª v hv, (is_open_of_mem_countable_basis v.2).sdiff (hUc _),
    Œª x hx, _, Œª x hx, _, _‚ü©,
  { rcases mem_Union‚ÇÇ.1 (hsU hx) with ‚ü®u, huU, hxu‚ü©,
    refine mem_bUnion huU ‚ü®hxu, _‚ü©,
    simp only [mem_Union],
    rintro ‚ü®v, hvV, -, hxv‚ü©,
    exact (hVd v hvV).le_bot ‚ü®hxv, hx‚ü© },
  { rcases mem_Union‚ÇÇ.1 (htV hx) with ‚ü®v, hvV, hxv‚ü©,
    refine mem_bUnion hvV ‚ü®hxv, _‚ü©,
    simp only [mem_Union],
    rintro ‚ü®u, huU, -, hxu‚ü©,
    exact (hUd u huU).le_bot ‚ü®hxu, hx‚ü© },
  { simp only [disjoint_left, mem_Union, mem_diff, not_exists, not_and, not_forall, not_not],
    rintro a ‚ü®u, huU, hau, haV‚ü© v hvV hav,
    cases le_total (encodable.encode u) (encodable.encode v) with hle hle,
    exacts [‚ü®u, huU, hle, subset_closure hau‚ü©, (haV _ hvV hle $ subset_closure hav).elim] }
end

end normality

section completely_normal

/-- A topological space `Œ±` is a *completely normal Hausdorff space* if each subspace `s : set Œ±` is
a normal Hausdorff space. Equivalently, `Œ±` is a `T‚ÇÅ` space and for any two sets `s`, `t` such that
`closure s` is disjoint with `t` and `s` is disjoint with `closure t`, there exist disjoint
neighbourhoods of `s` and `t`. -/
class t5_space (Œ± : Type u) [topological_space Œ±] extends t1_space Œ± : Prop :=
(completely_normal : ‚àÄ ‚¶És t : set Œ±‚¶Ñ, disjoint (closure s) t ‚Üí disjoint s (closure t) ‚Üí
  disjoint (ùìùÀ¢ s) (ùìùÀ¢ t))

export t5_space (completely_normal)

lemma embedding.t5_space [topological_space Œ≤] [t5_space Œ≤] {e : Œ± ‚Üí Œ≤} (he : embedding e) :
  t5_space Œ± :=
begin
  haveI := he.t1_space,
  refine ‚ü®Œª s t hd‚ÇÅ hd‚ÇÇ, _‚ü©,
  simp only [he.to_inducing.nhds_set_eq_comap],
  refine disjoint_comap (completely_normal _ _),
  { rwa [‚Üê subset_compl_iff_disjoint_left, image_subset_iff, preimage_compl,
      ‚Üê he.closure_eq_preimage_closure_image, subset_compl_iff_disjoint_left] },
  { rwa [‚Üê subset_compl_iff_disjoint_right, image_subset_iff, preimage_compl,
      ‚Üê he.closure_eq_preimage_closure_image, subset_compl_iff_disjoint_right] }
end

/-- A subspace of a `T‚ÇÖ` space is a `T‚ÇÖ` space. -/
instance [t5_space Œ±] {p : Œ± ‚Üí Prop} : t5_space {x // p x} := embedding_subtype_coe.t5_space

/-- A `T‚ÇÖ` space is a `T‚ÇÑ` space. -/
@[priority 100] -- see Note [lower instance priority]
instance t5_space.to_normal_space [t5_space Œ±] : normal_space Œ± :=
‚ü®Œª s t hs ht hd, separated_nhds_iff_disjoint.2 $
  completely_normal (by rwa [hs.closure_eq]) (by rwa [ht.closure_eq])‚ü©

open separation_quotient

/-- The `separation_quotient` of a completely normal space is a T‚ÇÖ space. We don't have separate
typeclasses for completely normal spaces (without T‚ÇÅ assumption) and T‚ÇÖ spaces, so we use the same
class for assumption and for conclusion.

One can prove this using a homeomorphism between `Œ±` and `separation_quotient Œ±`. We give an
alternative proof that works without assuming that `Œ±` is a T‚ÇÅ space. -/
instance [t5_space Œ±] : t5_space (separation_quotient Œ±) :=
{ completely_normal := Œª s t hd‚ÇÅ hd‚ÇÇ,
    begin
      rw [‚Üê disjoint_comap_iff surjective_mk, comap_mk_nhds_set, comap_mk_nhds_set],
      apply t5_space.completely_normal; rw [‚Üê preimage_mk_closure],
      exacts [hd‚ÇÅ.preimage mk, hd‚ÇÇ.preimage mk]
    end }

end completely_normal

/-- In a compact t2 space, the connected component of a point equals the intersection of all
its clopen neighbourhoods. -/
lemma connected_component_eq_Inter_clopen [t2_space Œ±] [compact_space Œ±] (x : Œ±) :
  connected_component x = ‚ãÇ Z : {Z : set Œ± // is_clopen Z ‚àß x ‚àà Z}, Z :=
begin
  apply eq_of_subset_of_subset connected_component_subset_Inter_clopen,
  -- Reduce to showing that the clopen intersection is connected.
  refine is_preconnected.subset_connected_component _ (mem_Inter.2 (Œª Z, Z.2.2)),
  -- We do this by showing that any disjoint cover by two closed sets implies
  -- that one of these closed sets must contain our whole thing.
  -- To reduce to the case where the cover is disjoint on all of `Œ±` we need that `s` is closed
  have hs : is_closed (‚ãÇ (Z : {Z : set Œ± // is_clopen Z ‚àß x ‚àà Z}), Z : set Œ±) :=
    is_closed_Inter (Œª Z, Z.2.1.2),
  rw (is_preconnected_iff_subset_of_fully_disjoint_closed hs),
  intros a b ha hb hab ab_disj,
  haveI := @normal_of_compact_t2 Œ± _ _ _,
  -- Since our space is normal, we get two larger disjoint open sets containing the disjoint
  -- closed sets. If we can show that our intersection is a subset of any of these we can then
  -- "descend" this to show that it is a subset of either a or b.
  rcases normal_separation ha hb ab_disj with ‚ü®u, v, hu, hv, hau, hbv, huv‚ü©,
  -- If we can find a clopen set around x, contained in u ‚à™ v, we get a disjoint decomposition
  -- Z = Z ‚à© u ‚à™ Z ‚à© v of clopen sets. The intersection of all clopen neighbourhoods will then lie
  -- in whichever of u or v x lies in and hence will be a subset of either a or b.
  rsuffices ‚ü®Z, H‚ü© : ‚àÉ (Z : set Œ±), is_clopen Z ‚àß x ‚àà Z ‚àß Z ‚äÜ u ‚à™ v,
  { have H1 := is_clopen_inter_of_disjoint_cover_clopen H.1 H.2.2 hu hv huv,
    rw [union_comm] at H,
    have H2 := is_clopen_inter_of_disjoint_cover_clopen H.1 H.2.2 hv hu huv.symm,
    by_cases (x ‚àà u),
    -- The x ‚àà u case.
    { left,
      suffices : (‚ãÇ (Z : {Z : set Œ± // is_clopen Z ‚àß x ‚àà Z}), ‚ÜëZ) ‚äÜ u,
      { replace hab : (‚ãÇ (Z : {Z // is_clopen Z ‚àß x ‚àà Z}), ‚ÜëZ) ‚â§ a ‚à™ b := hab,
        replace this : (‚ãÇ (Z : {Z // is_clopen Z ‚àß x ‚àà Z}), ‚ÜëZ) ‚â§ u := this,
        exact disjoint.left_le_of_le_sup_right hab (huv.mono this hbv) },
      { apply subset.trans _ (inter_subset_right Z u),
        apply Inter_subset (Œª Z : {Z : set Œ± // is_clopen Z ‚àß x ‚àà Z}, ‚ÜëZ)
          ‚ü®Z ‚à© u, H1, mem_inter H.2.1 h‚ü© } },
    -- If x ‚àâ u, we get x ‚àà v since x ‚àà u ‚à™ v. The rest is then like the x ‚àà u case.
    have h1 : x ‚àà v,
    { cases (mem_union x u v).1 (mem_of_subset_of_mem (subset.trans hab
        (union_subset_union hau hbv)) (mem_Inter.2 (Œª i, i.2.2))) with h1 h1,
      { exfalso, exact h h1},
      { exact h1} },
    right,
    suffices : (‚ãÇ (Z : {Z : set Œ± // is_clopen Z ‚àß x ‚àà Z}), ‚ÜëZ) ‚äÜ v,
    { replace this : (‚ãÇ (Z : {Z // is_clopen Z ‚àß x ‚àà Z}), ‚ÜëZ) ‚â§ v := this,
      exact (huv.symm.mono this hau).left_le_of_le_sup_left hab },
    { apply subset.trans _ (inter_subset_right Z v),
      apply Inter_subset (Œª Z : {Z : set Œ± // is_clopen Z ‚àß x ‚àà Z}, ‚ÜëZ)
        ‚ü®Z ‚à© v, H2, mem_inter H.2.1 h1‚ü© } },
  -- Now we find the required Z. We utilize the fact that X \ u ‚à™ v will be compact,
  -- so there must be some finite intersection of clopen neighbourhoods of X disjoint to it,
  -- but a finite intersection of clopen sets is clopen so we let this be our Z.
  have H1 := (hu.union hv).is_closed_compl.is_compact.inter_Inter_nonempty
    (Œª Z : {Z : set Œ± // is_clopen Z ‚àß x ‚àà Z}, Z) (Œª Z, Z.2.1.2),
  rw [‚Üênot_disjoint_iff_nonempty_inter, imp_not_comm, not_forall] at H1,
  cases H1 (disjoint_compl_left_iff_subset.2 $ hab.trans $ union_subset_union hau hbv) with Zi H2,
  refine ‚ü®(‚ãÇ (U ‚àà Zi), subtype.val U), _, _, _‚ü©,
  { exact is_clopen_bInter_finset (Œª Z hZ, Z.2.1) },
  { exact mem_Inter‚ÇÇ.2 (Œª Z hZ, Z.2.2) },
  { rwa [‚Üêdisjoint_compl_left_iff_subset, disjoint_iff_inter_eq_empty, ‚Üênot_nonempty_iff_eq_empty] }
end

section profinite

/-- A T1 space with a clopen basis is totally separated. -/
lemma totally_separated_space_of_t1_of_basis_clopen [t1_space Œ±]
  (h : is_topological_basis {s : set Œ± | is_clopen s}) :
  totally_separated_space Œ± :=
begin
  constructor,
  rintros x - y - hxy,
  rcases h.mem_nhds_iff.mp (is_open_ne.mem_nhds hxy) with ‚ü®U, hU, hxU, hyU‚ü©,
  exact ‚ü®U, U·∂ú, hU.is_open, hU.compl.is_open, hxU, Œª h, hyU h rfl,
    (union_compl_self U).superset, disjoint_compl_right‚ü©
end

variables [t2_space Œ±] [compact_space Œ±]

/-- A compact Hausdorff space is totally disconnected if and only if it is totally separated, this
  is also true for locally compact spaces. -/
theorem compact_t2_tot_disc_iff_tot_sep :
  totally_disconnected_space Œ± ‚Üî totally_separated_space Œ± :=
begin
  split,
  { intro h, constructor,
    rintros x - y -,
    contrapose!,
    intros hyp,
    suffices : x ‚àà connected_component y,
      by simpa [totally_disconnected_space_iff_connected_component_singleton.1 h y,
                mem_singleton_iff],
    rw [connected_component_eq_Inter_clopen, mem_Inter],
    rintro ‚ü®w : set Œ±, hw : is_clopen w, hy : y ‚àà w‚ü©,
    by_contra hx,
    exact hyp w·∂ú w hw.2.is_open_compl hw.1 hx hy (@is_compl_compl _ w _).symm.codisjoint.top_le
      disjoint_compl_left },
  apply totally_separated_space.totally_disconnected_space,
end

variables [totally_disconnected_space Œ±]

lemma nhds_basis_clopen (x : Œ±) : (ùìù x).has_basis (Œª s : set Œ±, x ‚àà s ‚àß is_clopen s) id :=
‚ü®Œª U, begin
  split,
  { have : connected_component x = {x},
      from totally_disconnected_space_iff_connected_component_singleton.mp ‚Äπ_‚Ä∫ x,
    rw connected_component_eq_Inter_clopen at this,
    intros hU,
    let N := {Z // is_clopen Z ‚àß x ‚àà Z},
    rsuffices ‚ü®‚ü®s, hs, hs'‚ü©, hs''‚ü© : ‚àÉ Z : N, Z.val ‚äÜ U,
    { exact ‚ü®s, ‚ü®hs', hs‚ü©, hs''‚ü© },
    haveI : nonempty N := ‚ü®‚ü®univ, is_clopen_univ, mem_univ x‚ü©‚ü©,
    have hNcl : ‚àÄ Z : N, is_closed Z.val := (Œª Z, Z.property.1.2),
    have hdir : directed superset (Œª Z : N, Z.val),
    { rintros ‚ü®s, hs, hxs‚ü© ‚ü®t, ht, hxt‚ü©,
      exact ‚ü®‚ü®s ‚à© t, hs.inter ht, ‚ü®hxs, hxt‚ü©‚ü©, inter_subset_left s t, inter_subset_right s t‚ü© },
    have h_nhd: ‚àÄ y ‚àà (‚ãÇ Z : N, Z.val), U ‚àà ùìù y,
    { intros y y_in,
      erw [this, mem_singleton_iff] at y_in,
      rwa y_in },
    exact exists_subset_nhds_of_compact_space hdir hNcl h_nhd },
  { rintro ‚ü®V, ‚ü®hxV, V_op, -‚ü©, hUV : V ‚äÜ U‚ü©,
    rw mem_nhds_iff,
    exact ‚ü®V, hUV, V_op, hxV‚ü© }
end‚ü©

lemma is_topological_basis_clopen : is_topological_basis {s : set Œ± | is_clopen s} :=
begin
  apply is_topological_basis_of_open_of_nhds (Œª U (hU : is_clopen U), hU.1),
  intros x U hxU U_op,
  have : U ‚àà ùìù x,
  from is_open.mem_nhds U_op hxU,
  rcases (nhds_basis_clopen x).mem_iff.mp this with ‚ü®V, ‚ü®hxV, hV‚ü©, hVU : V ‚äÜ U‚ü©,
  use V,
  tauto
end

/-- Every member of an open set in a compact Hausdorff totally disconnected space
  is contained in a clopen set contained in the open set.  -/
lemma compact_exists_clopen_in_open {x : Œ±} {U : set Œ±} (is_open : is_open U) (memU : x ‚àà U) :
  ‚àÉ (V : set Œ±) (hV : is_clopen V), x ‚àà V ‚àß V ‚äÜ U :=
(is_topological_basis.mem_nhds_iff is_topological_basis_clopen).1 (is_open.mem_nhds memU)

end profinite

section locally_compact

variables {H : Type*} [topological_space H] [locally_compact_space H] [t2_space H]

/-- A locally compact Hausdorff totally disconnected space has a basis with clopen elements. -/
lemma loc_compact_Haus_tot_disc_of_zero_dim [totally_disconnected_space H] :
  is_topological_basis {s : set H | is_clopen s} :=
begin
  refine is_topological_basis_of_open_of_nhds (Œª u hu, hu.1) _,
  rintros x U memU hU,
  obtain ‚ü®s, comp, xs, sU‚ü© := exists_compact_subset hU memU,
  obtain ‚ü®t, h, ht, xt‚ü© := mem_interior.1 xs,
  let u : set s := (coe : s ‚Üí H)‚Åª¬π' (interior s),
  have u_open_in_s : is_open u := is_open_interior.preimage continuous_subtype_coe,
  let X : s := ‚ü®x, h xt‚ü©,
  have Xu : X ‚àà u := xs,
  haveI : compact_space s := is_compact_iff_compact_space.1 comp,
  obtain ‚ü®V : set s, clopen_in_s, Vx, V_sub‚ü© := compact_exists_clopen_in_open u_open_in_s Xu,
  have V_clopen : is_clopen ((coe : s ‚Üí H) '' V),
  { refine ‚ü®_, (comp.is_closed.closed_embedding_subtype_coe.closed_iff_image_closed).1
               clopen_in_s.2‚ü©,
    let v : set u := (coe : u ‚Üí s)‚Åª¬π' V,
    have : (coe : u ‚Üí H) = (coe : s ‚Üí H) ‚àò (coe : u ‚Üí s) := rfl,
    have f0 : embedding (coe : u ‚Üí H) := embedding_subtype_coe.comp embedding_subtype_coe,
    have f1 : open_embedding (coe : u ‚Üí H),
    { refine ‚ü®f0, _‚ü©,
      { have : set.range (coe : u ‚Üí H) = interior s,
        { rw [this, set.range_comp, subtype.range_coe, subtype.image_preimage_coe],
          apply set.inter_eq_self_of_subset_left interior_subset, },
        rw this,
        apply is_open_interior } },
    have f2 : is_open v := clopen_in_s.1.preimage continuous_subtype_coe,
    have f3 : (coe : s ‚Üí H) '' V = (coe : u ‚Üí H) '' v,
    { rw [this, image_comp coe coe, subtype.image_preimage_coe,
          inter_eq_self_of_subset_left V_sub] },
    rw f3,
    apply f1.is_open_map v f2 },
  refine ‚ü®coe '' V, V_clopen, by simp [Vx, h xt], _‚ü©,
  transitivity s,
  { simp },
  assumption
end

/-- A locally compact Hausdorff space is totally disconnected
  if and only if it is totally separated. -/
theorem loc_compact_t2_tot_disc_iff_tot_sep :
  totally_disconnected_space H ‚Üî totally_separated_space H :=
begin
  split,
  { introI h,
    exact totally_separated_space_of_t1_of_basis_clopen loc_compact_Haus_tot_disc_of_zero_dim },
  apply totally_separated_space.totally_disconnected_space,
end

end locally_compact

/-- `connected_components Œ±` is Hausdorff when `Œ±` is Hausdorff and compact -/
instance connected_components.t2 [t2_space Œ±] [compact_space Œ±] :
  t2_space (connected_components Œ±) :=
begin
  -- Proof follows that of: https://stacks.math.columbia.edu/tag/0900
  -- Fix 2 distinct connected components, with points a and b
  refine ‚ü®connected_components.surjective_coe.forall‚ÇÇ.2 $ Œª a b ne, _‚ü©,
  rw connected_components.coe_ne_coe at ne,
  have h := connected_component_disjoint ne,
  -- write ‚Üëb as the intersection of all clopen subsets containing it
  rw [connected_component_eq_Inter_clopen b, disjoint_iff_inter_eq_empty] at h,
  -- Now we show that this can be reduced to some clopen containing `‚Üëb` being disjoint to `‚Üëa`
  obtain ‚ü®U, V, hU, ha, hb, rfl‚ü© : ‚àÉ (U : set Œ±) (V : set (connected_components Œ±)), is_clopen U ‚àß
    connected_component a ‚à© U = ‚àÖ ‚àß connected_component b ‚äÜ U ‚àß coe ‚Åª¬π' V = U,
  { cases is_closed_connected_component.is_compact.elim_finite_subfamily_closed _ _ h with fin_a ha,
    swap, { exact Œª Z, Z.2.1.2 },
    -- This clopen and its complement will separate the connected components of `a` and `b`
    set U : set Œ± := (‚ãÇ (i : {Z // is_clopen Z ‚àß b ‚àà Z}) (H : i ‚àà fin_a), i),
    have hU : is_clopen U := is_clopen_bInter_finset (Œª i j, i.2.1),
    exact ‚ü®U, coe '' U, hU, ha, subset_Inter‚ÇÇ (Œª Z _, Z.2.1.connected_component_subset Z.2.2),
      (connected_components_preimage_image U).symm ‚ñ∏ hU.bUnion_connected_component_eq‚ü© },
  rw connected_components.quotient_map_coe.is_clopen_preimage at hU,
  refine ‚ü®V·∂ú, V, hU.compl.is_open, hU.is_open, _, hb mem_connected_component, disjoint_compl_left‚ü©,
  exact Œª h, flip set.nonempty.ne_empty ha ‚ü®a, mem_connected_component, h‚ü©,
end
